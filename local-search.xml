<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>配色图例</title>
    <link href="/%E9%85%8D%E8%89%B2/2023/04/09/%E9%85%8D%E8%89%B2%E5%9B%BE%E4%BE%8B/"/>
    <url>/%E9%85%8D%E8%89%B2/2023/04/09/%E9%85%8D%E8%89%B2%E5%9B%BE%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>为了做PPT，UI等方面快速确定主题配色，记录一些网络上的配色表，以备后用。</p><h2 id="天气之子"><a href="#天气之子" class="headerlink" title="天气之子"></a>天气之子</h2><p><img src="https://file.note.0moe.cn/img/640" alt="下坠"></p><p><img src="https://file.note.0moe.cn/img/yuhou" alt="img"></p><h2 id="你的名字"><a href="#你的名字" class="headerlink" title="你的名字"></a>你的名字</h2><p><img src="https://file.note.0moe.cn/img/nidemingzi1" alt="图片"></p><p><img src="https://file.note.0moe.cn/img/nidemingzi2.jpg" alt="图片"></p><h2 id="铃芽之旅"><a href="#铃芽之旅" class="headerlink" title="铃芽之旅"></a>铃芽之旅</h2><p><img src="https://file.note.0moe.cn/img/lingya" alt="图片"></p><p><img src="https://file.note.0moe.cn/img/lingya2" alt="图片"></p><h2 id="原神"><a href="#原神" class="headerlink" title="原神"></a>原神</h2><p><img src="https://file.note.0moe.cn/img/keli.jpg" alt="shatang"></p>]]></content>
    
    
    <categories>
      
      <category>配色</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敏捷与宗教与供给侧结构性改革</title>
    <link href="/%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/2022/12/25/%E6%95%8F%E6%8D%B7%E4%B8%8E%E5%AE%97%E6%95%99%E4%B8%8E%E4%BE%9B%E7%BB%99%E4%BE%A7%E7%BB%93%E6%9E%84%E6%80%A7%E6%94%B9%E9%9D%A9/"/>
    <url>/%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/2022/12/25/%E6%95%8F%E6%8D%B7%E4%B8%8E%E5%AE%97%E6%95%99%E4%B8%8E%E4%BE%9B%E7%BB%99%E4%BE%A7%E7%BB%93%E6%9E%84%E6%80%A7%E6%94%B9%E9%9D%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="敏捷与宗教与供给侧结构性改革"><a href="#敏捷与宗教与供给侧结构性改革" class="headerlink" title="敏捷与宗教与供给侧结构性改革"></a>敏捷与宗教与供给侧结构性改革</h1><p>最近做了一段时间的敏捷教练，遇到了许多挑战，人和事都有吧，但主要还是在人上，因此也接触了一下心理医生、也和同事聊过一点佛学，我自己之前也研究过一点道家，易经之类的东西，上大学时候跟老师做过一点供给侧结构性改革的论文，忽然发现好像世间这些路都有那么点万法归一的意思，刚刚提到的这几样东西不能说是毫不相关，但是也起码差了十万八千里，但是背后所体现的思想，真的很万法归一，都是要找到<strong>真我</strong>。因此在这记录下现在的分析与感悟，以待提醒自己，后续若有新的想法也可再翻出来两相印证。</p><h2 id="各条道路的梳理"><a href="#各条道路的梳理" class="headerlink" title="各条道路的梳理"></a>各条道路的梳理</h2><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>这条道路本想用敏捷做标题的，但是想了想还是换成项目管理比较贴切，需要用到项目管理的一些知识加以说明。</p><h3 id="佛学"><a href="#佛学" class="headerlink" title="佛学"></a>佛学</h3><p>###道家</p><h3 id="上帝"><a href="#上帝" class="headerlink" title="上帝"></a>上帝</h3><h3 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h3><h3 id="供给侧结构性改革"><a href="#供给侧结构性改革" class="headerlink" title="供给侧结构性改革"></a>供给侧结构性改革</h3>]]></content>
    
    
    <categories>
      
      <category>设计哲学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>敏捷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CodeReview最佳实践</title>
    <link href="/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2022/12/04/CodeReview%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2022/12/04/CodeReview%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>我一直认为Code Review是软件开发中的最佳实践之一，可以有效提高整体代码质量，及时发现代码中可能存在的问题。包括像Google、微软这些公司，Code Review都是基本要求，代码合并之前必须要有人审查通过才行。</p><p>然而对于我观察到的大部分软件开发团队来说，认真做Code Review的很少，有的流于形式，有的可能根本就没有Code Review的环节，代码质量只依赖于事后的测试。也有些团队想做好代码审查，但不知道怎么做比较好。</p><p>高效地进行 Code Review 一直是我们想要做的事情，如何持续保持高效 Review 也是我们日常开发中所亟需解决的问题。</p><h2 id="Code-Review的好处"><a href="#Code-Review的好处" class="headerlink" title="Code Review的好处"></a>Code Review的好处</h2><p>一直以来，人们都说 Code Reivew 作为敏捷开发中重要的一环，实践 Code Review 有很多益处，那么到底 Code Review 有什么益处呢? 到底是因为什么魔力，我们这么笃定每天去做 Code Review?</p><p>我们认真地思考了 Code Review 的益处，认为以下几点在整个敏捷开发流程中起到了至关重要的作用。</p><h3 id="互相学习，知识共享"><a href="#互相学习，知识共享" class="headerlink" title="互相学习，知识共享"></a>互相学习，知识共享</h3><p>我们无法保证项目中每个人都拥有相同的知识储备，而且对于同一个问题，不同的人有不同的解决方案。通过 Code Review 我们可以快速地、有重点地将自己的知识传递给其他人。其他人也可以将代码上下文、知识以及更好的解决方案提供给我们，让我们做出更优的实现。</p><p>Code Review 可以让业务上下文在团队中共享。日常工作中，开发人员只会对自己负责的这块业务比较熟悉。通过 Code Review 的方式，我们可以快速了解到其他业务上下文，更好地了解业务知识，让每位同学对系统都有更全面的认识。</p><h3 id="统一风格，提高代码质量"><a href="#统一风格，提高代码质量" class="headerlink" title="统一风格，提高代码质量"></a>统一风格，提高代码质量</h3><p>团队一般会有统一的代码规范。有些规范可以借助工具扫描来实现统一，工具扫描不到的就要靠 Code Review 来统一规范。</p><p>莎士比亚说过：“一千个人眼里有一千个哈姆雷特”，针对同一段代码可能多种实现都是可行的。如果没有统一的风格，不便于后续对代码的维护。通过 Code Review 的方式，我们可以在团队内达成共识，形成统一的代码规范，为后续开发提供标准，让代码看起来是同一个人写的。</p><h3 id="尽早暴露问题，降低修复成本"><a href="#尽早暴露问题，降低修复成本" class="headerlink" title="尽早暴露问题，降低修复成本"></a>尽早暴露问题，降低修复成本</h3><p>代码开发过程中，我们很容易陷入到自己所预定的 Happy Path 中，反复验证却无法发现问题。通过 Code Review 我们可以借助他人的视角来审查自己的代码。是复制的时候变量名忘记了修改，还是忘记了测试异常情况，或是理解错业务含义等等。代码从写完到 Review 的时间间隔越短，解决问题的成本越低。和测试左移类似，Code Review 也可以将问题左移，从而尽早暴露，尽早修复。</p><h2 id="我们团队的-Code-Review-实践经历"><a href="#我们团队的-Code-Review-实践经历" class="headerlink" title="我们团队的 Code Review 实践经历"></a>我们团队的 Code Review 实践经历</h2><h3 id="审查流程"><a href="#审查流程" class="headerlink" title="审查流程"></a>审查流程</h3><p>团队采用的 Code Review 方式是每周四下班前，找一名开发作为主持人，并找2~3名开发分别讲解自己的代码。</p><p>每天一位主持人带团队 Code Review，选择当周讲解人所有的提交记录，一起 Review。<br>代码由提交人讲解，主持人驱动 Code Review，控制流程、时间以及负责补充解说。<br>主持人通过工具记录 Code Review 的问题。<br>这种方式的好处是同一个功能的代码能够集中讲解。主持人把控节奏，并且没有了切换成本，大大加快了 Code Review 的速度。而且每个人的提交都能被 review 到。此外，借助 Code Review 问题记录工具，效率大幅提升。</p><p>我们认为通过主持人驱动的方式能够更加高效地进行 Code Review，所以将其采纳为我们团队的 Code Review 最佳实践。</p><h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><h4 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h4><p>从系统和站在组织的角度，问以下问题：</p><ul><li>从系统的角度，这份代码的改动会引起兼容性的问题吗？它能够很好的跟其他系统整合吗？</li><li>该代码的改动会不会引起系统故障或者影响其他依赖的系统的使用？</li><li>现在是改变这个功能的恰当时机吗？整体的代码是否符合逻辑？</li></ul><h4 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h4><p>从功能性的角度考察：</p><ul><li>代码是否能够实现开发者想要的目标？</li><li>这份代码是否包含测试？这些测试覆盖的场景是否足够多？是否考虑到了一些边界情况？并发的情况下性能怎么样，会不会产生死锁等问题？</li><li>把自己想象成一个用户的角度，功能是否满足，是否考虑全面，是否存在一些bug？</li></ul><h4 id="代码风格和命名规范"><a href="#代码风格和命名规范" class="headerlink" title="代码风格和命名规范"></a>代码风格和命名规范</h4><ul><li>这些代码的命名是否规范？如果让一个不太熟悉的人来看这份代码，是否能够通过命名就了解其含义？</li><li>代码有没有遵守约定的代码风格？</li><li>提交的代码如果想要做一些代码格式化的调整，如缩进和换行等等，需要放到另外的PR中进行，避免跟功能代码混在一起，给阅读代码的人造成不便。</li></ul><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><p>在开展Code Review一段时间之后，逐渐积累起了一定量的数据。此时我们可以通过统计工具分析数据。比如按照问题类型进行统计，对于出现次数多的问题分类，可以针对性展开培训，提升团队成员技能。</p><p>培训完成后，我们可以根据新一轮统计结果分析培训效果，观察团队是否确实得到了提升，从而形成闭环。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Code Review 的好处虽然被广泛认可，但想做好 Code Review 并不容易。首先团队需要对开展 Code Review 达成共识，然后针对自己团队的特性，采用相匹配的实践方式。在提升自动化程度的同时，积累 Code Review 数据，指导团队针对性地提升技能。</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot启动过程分析</title>
    <link href="/Java/2022/10/19/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <url>/Java/2022/10/19/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="springboot的入口程序"><a href="#springboot的入口程序" class="headerlink" title="springboot的入口程序"></a>springboot的入口程序</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationDemo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当程序开始执行之后，会调用SpringApplication的构造方法，进行某些初始参数的设置</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个新的实例，这个应用程序的上下文将要从指定的来源加载Bean</span><span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//资源初始化资源加载器，默认为null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>    <span class="token comment">//断言主要加载资源类不能为 null，否则报错</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化主要加载资源类集合并去重</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//推断当前 WEB 应用类型，一共有三种：NONE,SERVLET,REACTIVE</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置应用上线文初始化器,从"META-INF/spring.factories"读取ApplicationContextInitializer类的实例名称集合并去重，并进行set去重。（一共7个）</span>    <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置监听器,从"META-INF/spring.factories"读取ApplicationListener类的实例名称集合并去重，并进行set去重。（一共11个）</span>    <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//推断主入口应用类，通过当前调用栈，获取Main方法所在类，并赋值给mainApplicationClass</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在上述构造方法中，有一个判断应用类型的方法，用来判断当前应用程序的类型：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">static</span> <span class="token class-name">WebApplicationType</span> <span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">WEBFLUX_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">WEBMVC_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">JERSEY_INDICATOR_CLASS</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">REACTIVE</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> <span class="token constant">SERVLET_INDICATOR_CLASSES</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//WebApplicationType的类型</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">WebApplicationType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * The application should not run as a web application and should not start an     * embedded web server.     * 非web项目     */</span>    <span class="token constant">NONE</span><span class="token punctuation">,</span>    <span class="token comment">/**     * The application should run as a servlet-based web application and should start an     * embedded servlet web server.     * servlet web 项目     */</span>    <span class="token constant">SERVLET</span><span class="token punctuation">,</span>    <span class="token comment">/**     * The application should run as a reactive web application and should start an     * embedded reactive web server.     * 响应式 web 项目     */</span>    <span class="token constant">REACTIVE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>springboot启动的运行方法，可以看到主要是各种运行环境的准备工作</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1、创建并启动计时监控类</span>    <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2、初始化应用上下文和异常报告集合</span>    <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">></span></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、设置系统属性“java.awt.headless”的值，默认为true，用于运行headless服务器，进行简单的图像处理，多用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true</span>    <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4、创建所有spring运行监听器并发布应用启动事件，简单说的话就是获取SpringApplicationRunListener类型的实例（EventPublishingRunListener对象），并封装进SpringApplicationRunListeners对象，然后返回这个SpringApplicationRunListeners对象。说的再简单点，getRunListeners就是准备好了运行时监听器EventPublishingRunListener。</span>    <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//5、初始化默认应用参数类</span>        <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6、根据运行监听器和应用参数来准备spring环境</span>        <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将要忽略的bean的参数打开</span>        <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7、创建banner打印类</span>        <span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//8、创建应用上下文，可以理解为创建一个容器</span>        context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//9、准备异常报告器，用来支持报告关于启动的错误</span>        exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//10、准备应用上下文，该步骤包含一个非常关键的操作，将启动类注入容器，为后续开启自动化提供基础</span>        <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//11、刷新应用上下文</span>        <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//12、应用上下文刷新后置处理，做一些扩展功能</span>        <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//13、停止计时监控类</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//14、输出日志记录执行主类名、时间信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//15、发布应用上下文启动监听事件</span>        listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//16、执行所有的Runner运行器</span>        <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//17、发布应用上下文就绪事件</span>        listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//18、返回应用上下文</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>下面详细介绍各个启动的环节：</p><h3 id="1-创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。"><a href="#1-创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。" class="headerlink" title="1. 创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。"></a>1. 创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//详细源代码</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentTaskName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Can't start StopWatch: it's already running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentTaskName <span class="token operator">=</span> taskName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startTimeNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-初始化应用上下文和异常报告集合"><a href="#2-初始化应用上下文和异常报告集合" class="headerlink" title="2.初始化应用上下文和异常报告集合"></a>2.初始化应用上下文和异常报告集合</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">></span></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="3-设置系统属性java-awt-headless的值："><a href="#3-设置系统属性java-awt-headless的值：" class="headerlink" title="3.设置系统属性java.awt.headless的值："></a>3.设置系统属性java.awt.headless的值：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*java.awt.headless模式是在缺少显示屏、键盘或者鼠标的系统配置当配置了如下属性之后，应用程序可以执行如下操作：    1、创建轻量级组件    2、收集关于可用的字体、字体指标和字体设置的信息    3、设置颜色来渲染准备图片    4、创造和获取图像，为渲染准备图片    5、使用java.awt.PrintJob,java.awt.print.*和javax.print.*类里的方法进行打印*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTY_JAVA_AWT_HEADLESS</span><span class="token punctuation">,</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTY_JAVA_AWT_HEADLESS</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headless<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-创建所有spring运行监听器并发布应用启动事件"><a href="#4-创建所有spring运行监听器并发布应用启动事件" class="headerlink" title="4.创建所有spring运行监听器并发布应用启动事件"></a>4.创建所有spring运行监听器并发布应用启动事件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建spring监听器</span><span class="token keyword">private</span> <span class="token class-name">SpringApplicationRunListeners</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationRunListeners</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span>                <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> types<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SpringApplicationRunListeners</span><span class="token punctuation">(</span><span class="token class-name">Log</span> log<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SpringApplicationRunListener</span><span class="token punctuation">></span></span> listeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>log <span class="token operator">=</span> log<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环遍历获取监听器</span><span class="token keyword">void</span> <span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListener</span> listener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        listener<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//此处的监听器可以看出是事件发布监听器，主要用来发布启动事件</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里是创建application事件‘applicationStartingEvent’</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>initialMulticaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationStartingEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//applicationStartingEvent是springboot框架最早执行的监听器，在该监听器执行started方法时，会继续发布事件，主要是基于spring的事件机制</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ResolvableType</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResolvableType</span> type <span class="token operator">=</span> <span class="token punctuation">(</span>eventType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> eventType <span class="token operator">:</span> <span class="token function">resolveDefaultEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取线程池，如果为空则同步处理。这里线程池为空，还未初始化</span>        <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token function">getTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//异步发送事件</span>                executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//同步发送事件</span>                <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-初始化默认应用参数类"><a href="#5-初始化默认应用参数类" class="headerlink" title="5.初始化默认应用参数类"></a>5.初始化默认应用参数类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"Args must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-根据运行监听器和应用参数来准备spring环境"><a href="#6-根据运行监听器和应用参数来准备spring环境" class="headerlink" title="6.根据运行监听器和应用参数来准备spring环境"></a>6.根据运行监听器和应用参数来准备spring环境</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//详细环境的准备</span><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span>    <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取或者创建应用环境</span>    <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 配置应用环境，配置propertySource和activeProfiles</span>    <span class="token function">configureEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//listeners环境准备，广播ApplicationEnvironmentPreparedEvent</span>    <span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将环境绑定给当前应用程序</span>    <span class="token function">bindToSpringApplication</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对当前的环境类型进行判断，如果不一致进行转换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isCustomEnvironment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentConverter</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertEnvironmentIfNecessary</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span>                    <span class="token function">deduceEnvironmentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置propertySource对它自己的递归依赖</span>    <span class="token class-name">ConfigurationPropertySources</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> environment<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取或者创建应用环境，根据应用程序的类型可以分为servlet环境、标准环境(特殊的非web环境)和响应式环境</span><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//存在则直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//根据webApplicationType创建对应的Environment</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token constant">SERVLET</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StandardServletEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">REACTIVE</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StandardReactiveWebEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//配置应用环境</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addConversionService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConversionService</span> conversionService <span class="token operator">=</span> <span class="token class-name">ApplicationConversionService</span><span class="token punctuation">.</span><span class="token function">getSharedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        environment<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableConversionService</span><span class="token punctuation">)</span> conversionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置property sources</span>    <span class="token function">configurePropertySources</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置profiles</span>    <span class="token function">configureProfiles</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-创建banner的打印类"><a href="#7-创建banner的打印类" class="headerlink" title="7.创建banner的打印类"></a>7.创建banner的打印类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印类的详细操作过程</span><span class="token keyword">private</span> <span class="token class-name">Banner</span> <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> <span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader                <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SpringApplicationBannerPrinter</span> bannerPrinter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBannerPrinter</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> <span class="token class-name">Mode</span><span class="token punctuation">.</span><span class="token constant">LOG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-创建应用的上下文-根据不同哦那个的应用类型初始化不同的上下文应用类"><a href="#8-创建应用的上下文-根据不同哦那个的应用类型初始化不同的上下文应用类" class="headerlink" title="8.创建应用的上下文:根据不同哦那个的应用类型初始化不同的上下文应用类"></a>8.创建应用的上下文:根据不同哦那个的应用类型初始化不同的上下文应用类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token constant">SERVLET</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SERVLET_WEB_CONTEXT_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token constant">REACTIVE</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_REACTIVE_WEB_CONTEXT_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CONTEXT_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        <span class="token string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="9-准备异常报告器"><a href="#9-准备异常报告器" class="headerlink" title="9.准备异常报告器"></a>9.准备异常报告器</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Use names and ensure unique to protect against duplicates</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token function">createSpringFactoriesInstances</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> args<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instances<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="10-准备应用上下文"><a href="#10-准备应用上下文" class="headerlink" title="10.准备应用上下文"></a>10.准备应用上下文</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span>            <span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">,</span> <span class="token class-name">Banner</span> printedBanner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//应用上下文的environment</span>        context<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//应用上下文后处理</span>        <span class="token function">postProcessApplicationContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为上下文应用所有初始化器，执行容器中的applicationContextInitializer(spring.factories的实例)，将所有的初始化对象放置到context对象中</span>        <span class="token function">applyInitializers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//触发所有SpringApplicationRunListener监听器的ContextPrepared事件方法。添加所有的事件监听器</span>        listeners<span class="token punctuation">.</span><span class="token function">contextPrepared</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录启动日志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">logStartupInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">logStartupProfileInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 注册启动参数bean，将容器指定的参数封装成bean，注入容器</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springApplicationArguments"</span><span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置banner</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>printedBanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springBootBanner"</span><span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazyInitialization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LazyInitializationBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 加载所有资源，指的是启动器指定的参数</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sources <span class="token operator">=</span> <span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>sources<span class="token punctuation">,</span> <span class="token string">"Sources must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将bean加载到上下文中</span>        <span class="token function">load</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> sources<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//触发所有springapplicationRunListener监听器的contextLoaded事件方法，</span>        listeners<span class="token punctuation">.</span><span class="token function">contextLoaded</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token comment">//这里没有做任何的处理过程，因为beanNameGenerator和resourceLoader默认为空，可以方便后续做扩展处理</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CONFIGURATION_BEAN_NAME_GENERATOR</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addConversionService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span><span class="token class-name">ApplicationConversionService</span><span class="token punctuation">.</span><span class="token function">getSharedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token comment">//将启动器类加载到spring容器中，为后续的自动化配置奠定基础，之前看到的很多注解也与此相关</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sources<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loading source "</span> <span class="token operator">+</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">arrayToCommaDelimitedString</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">BeanDefinitionLoader</span> loader <span class="token operator">=</span> <span class="token function">createBeanDefinitionLoader</span><span class="token punctuation">(</span><span class="token function">getBeanDefinitionRegistry</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> sources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loader<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token comment">//springboot会优先选择groovy加载方式，找不到在选择java方式</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isGroovyPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">GroovyBeanDefinitionSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span>            <span class="token class-name">GroovyBeanDefinitionSource</span> loader <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token class-name">GroovyBeanDefinitionSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">load</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComponent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>annotatedReader<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="11-刷新应用上下文"><a href="#11-刷新应用上下文" class="headerlink" title="11.刷新应用上下文"></a>11.刷新应用上下文</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">refresh</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerShutdownHook<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                context<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccessControlException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Not allowed in some environments.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Prepare this context for refreshing.</span>            <span class="token comment">//刷新上下文环境，初始化上下文环境，对系统的环境变量或者系统属性进行准备和校验</span>            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>            <span class="token comment">//初始化beanfactory，解析xml，相当于之前的xmlBeanfactory操作</span>            <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Prepare the bean factory for use in this context.</span>            <span class="token comment">//为上下文准备beanfactory，对beanFactory的各种功能进行填充，如@autowired，设置spel表达式解析器，设置编辑注册器，添加applicationContextAwareprocessor处理器等等</span>            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>                <span class="token comment">//提供子类覆盖的额外处理，即子类处理自定义的beanfactorypostProcess</span>                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Invoke factory processors registered as beans in the context.</span>                <span class="token comment">//激活各种beanfactory处理器</span>                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Register bean processors that intercept bean creation.</span>                <span class="token comment">//注册拦截bean创建的bean处理器，即注册beanPostProcessor</span>                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Initialize message source for this context.</span>                <span class="token comment">//初始化上下文中的资源文件如国际化文件的处理</span>                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Initialize event multicaster for this context.</span>                <span class="token comment">//初始化上下文事件广播器</span>                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Initialize other special beans in specific context subclasses.</span>                <span class="token comment">//给子类扩展初始化其他bean</span>                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Check for listener beans and register them.</span>                <span class="token comment">//在所有的bean中查找listener bean,然后 注册到广播器中</span>                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>                <span class="token comment">//初始化剩余的非懒惰的bean，即初始化非延迟加载的bean</span>                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Last step: publish corresponding event.</span>                <span class="token comment">//发完成刷新过程，通知声明周期处理器刷新过程，同时发出ContextRefreshEvent通知别人</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Reset 'active' flag.</span>                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Propagate exception to caller.</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>                <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="12-应用上下文刷新后置处理"><a href="#12-应用上下文刷新后置处理" class="headerlink" title="12.应用上下文刷新后置处理"></a>12.应用上下文刷新后置处理</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前方法的代码是空的，可以做一些自定义的后置处理操作</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterRefresh</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="13-停止计时监控类：计时监听器停止，并统计一些任务执行信息"><a href="#13-停止计时监控类：计时监听器停止，并统计一些任务执行信息" class="headerlink" title="13.停止计时监控类：计时监听器停止，并统计一些任务执行信息"></a>13.停止计时监控类：计时监听器停止，并统计一些任务执行信息</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentTaskName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Can't stop StopWatch: it's not running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> lastTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTimeNanos<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalTimeNanos <span class="token operator">+=</span> lastTime<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastTaskInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentTaskName<span class="token punctuation">,</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keepTaskList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastTaskInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskCount<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentTaskName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="14-输出日志记录执行主类名、时间信息"><a href="#14-输出日志记录执行主类名、时间信息" class="headerlink" title="14.输出日志记录执行主类名、时间信息"></a>14.输出日志记录执行主类名、时间信息</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="15-发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法"><a href="#15-发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法" class="headerlink" title="15.发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法"></a>15.发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">started</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListener</span> listener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            listener<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="16-执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器"><a href="#16-执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器" class="headerlink" title="16.执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器"></a>16.执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callRunners</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> runners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        runners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">ApplicationRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        runners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">CommandLineRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>runners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> runner <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>runners<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>runner <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationRunner</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">callRunner</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationRunner</span><span class="token punctuation">)</span> runner<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>runner <span class="token keyword">instanceof</span> <span class="token class-name">CommandLineRunner</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">callRunner</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CommandLineRunner</span><span class="token punctuation">)</span> runner<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="17-发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法"><a href="#17-发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法" class="headerlink" title="17.发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法"></a>17.发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListener</span> listener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            listener<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="18-返回应用上下文"><a href="#18-返回应用上下文" class="headerlink" title="18.返回应用上下文"></a>18.返回应用上下文</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> context<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意：</p><p>整个springboot框架中获取factorys文件的方式统一如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Use names and ensure unique to protect against duplicates</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token function">createSpringFactoriesInstances</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> args<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instances<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factoryType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> factoryTypeName <span class="token operator">=</span> factoryType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>                    classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span> <span class="token operator">:</span>                    <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">UrlResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> factoryTypeName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> factoryImplementationName <span class="token operator">:</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryTypeName<span class="token punctuation">,</span> factoryImplementationName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unable to load factories from location ["</span> <span class="token operator">+</span>                    <span class="token constant">FACTORIES_RESOURCE_LOCATION</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">createSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">,</span>            <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//装载class文件到内存</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> instanceClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isAssignable</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> instanceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> instanceClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//通过反射创建实例</span>                <span class="token class-name">T</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>constructor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                instances<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot instantiate "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instances<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>spring.factory文件中的类的作用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># PropertySource Loaders 属性文件加载器</span><span class="token key attr-name">org.springframework.boot.env.PropertySourceLoader</span><span class="token punctuation">=</span><span class="token value attr-value">\</span><span class="token comment"># properties文件加载器</span>org.springframework.boot.env.PropertiesPropertySourceLoader,\<span class="token comment"># yaml文件加载器</span>org.springframework.boot.env.YamlPropertySourceLoader<span class="token comment"># Run Listeners 运行时的监听器</span><span class="token key attr-name">org.springframework.boot.SpringApplicationRunListener</span><span class="token punctuation">=</span><span class="token value attr-value">\</span><span class="token comment"># 程序运行过程中所有监听通知都是通过此类来进行回调</span>org.springframework.boot.context.event.EventPublishingRunListener<span class="token comment"># Error Reporters   错误报告器</span><span class="token key attr-name">org.springframework.boot.SpringBootExceptionReporter</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.diagnostics.FailureAnalyzers</span><span class="token comment"># Application Context Initializers</span><span class="token key attr-name">org.springframework.context.ApplicationContextInitializer</span><span class="token punctuation">=</span><span class="token value attr-value">\</span><span class="token comment"># 报告spring容器的一些常见的错误配置</span>org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\<span class="token comment"># 设置spring应用上下文的ID</span>org.springframework.boot.context.ContextIdApplicationContextInitializer,\<span class="token comment"># 使用环境属性context.initializer.classes指定初始化器进行初始化规则</span>org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\<span class="token comment"># 将内置servlet容器实际使用的监听端口写入到environment环境属性中</span>org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer<span class="token comment"># Application Listeners</span><span class="token key attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token value attr-value">\</span><span class="token comment"># 应用上下文加载完成后对缓存做清除工作，响应事件ContextRefreshEvent</span>org.springframework.boot.ClearCachesApplicationListener,\<span class="token comment"># 监听双亲应用上下文的关闭事件并往自己的孩子应用上下文中传播，相关事件ParentContextAvailableEvent/ContextClosedEvent</span>org.springframework.boot.builder.ParentContextCloserApplicationListener,\org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\<span class="token comment"># 如果系统文件编码和环境变量中指定的不同则终止应用启动。具体的方法是比较系统属性file.encoding和环境变量spring.mandatory-file-encoding是否相等(大小写不敏感)。</span>org.springframework.boot.context.FileEncodingApplicationListener,\<span class="token comment"># 根据spring.output.ansi.enabled参数配置AnsiOutput</span>org.springframework.boot.context.config.AnsiOutputApplicationListener,\<span class="token comment"># EnvironmentPostProcessor，从常见的那些约定的位置读取配置文件，比如从以下目录读取#application.properties,application.yml等配置文件：</span><span class="token comment"># classpath:</span><span class="token comment"># file:.</span><span class="token comment"># classpath:config</span><span class="token comment"># file:./config/:</span><span class="token comment"># 也可以配置成从其他指定的位置读取配置文件</span>org.springframework.boot.context.config.ConfigFileApplicationListener,\<span class="token comment"># 监听到事件后转发给环境变量context.listener.classes指定的那些事件监听器</span>org.springframework.boot.context.config.DelegatingApplicationListener,\<span class="token comment"># 一个SmartApplicationListener,对环境就绪事件ApplicationEnvironmentPreparedEvent/应用失败事件ApplicationFailedEvent做出响应，往日志DEBUG级别输出TCCL(thread context class loader)的classpath。</span>org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\<span class="token comment"># 检测正在使用的日志系统，默认时logback，，此时日志系统还没有初始化</span>org.springframework.boot.context.logging.LoggingApplicationListener,\<span class="token comment"># 使用一个可以和Spring Boot可执行jar包配合工作的版本替换liquibase ServiceLocator</span>org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener<span class="token comment"># Environment Post Processors</span><span class="token key attr-name">org.springframework.boot.env.EnvironmentPostProcessor</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor,\org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor</span><span class="token comment"># Failure Analyzers</span><span class="token key attr-name">org.springframework.boot.diagnostics.FailureAnalyzer</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</span><span class="token comment"># FailureAnalysisReporters</span><span class="token key attr-name">org.springframework.boot.diagnostics.FailureAnalysisReporter</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span><span class="token comment"># Initializers</span><span class="token key attr-name">org.springframework.context.ApplicationContextInitializer</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><span class="token comment"># Application Listeners</span><span class="token key attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token value attr-value">\</span><span class="token comment"># 另外单独启动一个线程实例化并调用run方法，包括验证器、消息转换器等</span>org.springframework.boot.autoconfigure.BackgroundPreinitializer<span class="token comment"># Auto Configuration Import Listeners</span><span class="token key attr-name">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><span class="token comment"># Auto Configuration Import Filters</span><span class="token key attr-name">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.condition.OnBeanCondition,\org.springframework.boot.autoconfigure.condition.OnClassCondition,\org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><span class="token comment"># Auto Configure</span><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><span class="token comment"># Failure analyzers</span><span class="token key attr-name">org.springframework.boot.diagnostics.FailureAnalyzer</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span><span class="token comment"># Template availability providers</span><span class="token key attr-name">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider</span><span class="token punctuation">=</span><span class="token value attr-value">\org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Code Review 指南</title>
    <link href="/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2022/07/23/Google-Code-Review-%E6%8C%87%E5%8D%97/"/>
    <url>/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2022/07/23/Google-Code-Review-%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="代码审查者指南"><a href="#代码审查者指南" class="headerlink" title="代码审查者指南"></a>代码审查者指南</h1><p>本节是基于过往经验编写的 Code Review 最佳方式建议。其中分为了很多独立的部分，共同组成完整的文档。虽然您不必阅读文档，但通读一遍会对您自己和团队很有帮助。</p><h1 id="Code-Review-标准"><a href="#Code-Review-标准" class="headerlink" title="Code Review 标准"></a>Code Review 标准</h1><p>代码审查的主要目的是确保逐步改善 Google 代码库的整体健康状况。代码审查的所有工具和流程都是为此而设计的。</p><p>为了实现此目标，必须做出一系列权衡。</p><p>首先，开发人员必须能够对任务进行<strong>改进</strong>。如果开发者从未向代码库提交过代码，那么代码库的改进也就无从谈起。此外，如果审核人员对代码吹毛求疵，那么开发人员以后也很难再做出改进。</p><p>另外，审查者有责任确保随着时间的推移，CL 的质量不会使代码库的整体健康状况下降。这可能很棘手，因为通常情况下，代码库健康状况会随着时间的而下降，特别是在对团队有严格的时间要求时，团队往往会采取捷径来达成他们的目标。</p><p>此外，审查者应对正在审核的代码负责并拥有所有权。审查者希望确保代码库保持一致、可维护及 [Code Review 要点](#Code Review 要点)中所提及的所有其他内容。</p><p>因此，我们将以下规则作为 Code Review 中期望的标准：</p><p><strong>一般来说，审核人员应该倾向于批准 CL，只要 CL 确实可以提高系统的整体代码健康状态，即使 CL 并不完美。</strong></p><p>这是所有 Code Review 指南中的<strong>高级</strong>原则。</p><p>当然，也有一些限制。例如，如果 CL 添加了审查者认为系统中不需要的功能，那么即使代码设计良好，审查者依然可以拒绝批准它。</p><p>此处有一个关键点就是没有“完美”的代码，只有<strong>更好的</strong>代码。审查者不该要求开发者在批准程序前仔细清理、润色 CL 每个角落。相反，审查者应该在变更的重要性与取得进展之间取得平衡。审查者不应该追求完美，而应是追求持续改进。不要因为一个 CL不是“完美的”，就将可以提高系统的可维护性、可读性和可理解性的 CL 延迟数天或数周才批准。</p><p>审核者应该随时在可以改善的地方留下审核评论，但如果评论不是很重要，请在评论语句前加上“Nit：”之类的内容，让开发者知道这条评论是用来指出可以润色的地方，而他们可以选择是否忽略。</p><p>注意：本文档中没有任何内容证明检查 CL 肯定会使系统的整体代码健康状况恶化。您会做这种事情应该只有在<a href="#%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5">紧急情况</a>时。</p><h2 id="指导"><a href="#指导" class="headerlink" title="指导"></a>指导</h2><p>代码审查具有向开发人员传授语言、框架或通用软件设计原则新内容的重要功能。留下评论可以帮助开发人员学习新东西，这总归是很好的。分享知识是随着长年累月改善系统代码健康状况的一部分。请记住，如果您的评论纯粹是教育性的，且对于本文档中描述的标准并不重要，请在其前面添加“Nit：”或以其他方式表明作者不必在此 CL 中解决它。</p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>基于技术事实和数据否决意见和个人偏好。</li><li>关于代码风格问题，<a href="http://google.github.io/styleguide/">风格指南</a>是绝对权威。任何不在风格指南中的纯粹风格点（例如空白等）都是个人偏好的问题。代码风格应该与风格指南中的一致。如果没有以前的风格，请接受作者的风格。</li><li><strong>软件设计方面几乎不是纯粹的风格或个人偏好问题。</strong>软件设计基于基本原则且应该权衡这些原则，而不仅仅是个人意见。有时候会有多种有效的选择。如果作者可以证明（通过数据或基于可靠的工程原理）该方法同样有效，那么审查者应该接受作者的偏好。否则，就要取决于软件设计的标准原则。</li><li>如果没有其他适用规则，则审查者可以要求作者与当前代码库中的内容保持一致，只要不恶化系统的整体代码健康状况即可。</li></ul><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>如果在代码审查过程中有任何冲突，第一步应该始终是开发人员和审查者根据本文档中的 <a href="#%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97">CL 开发者指南</a>和<a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E8%80%85%E6%8C%87%E5%8D%97">审查者指南</a>达成共识。</p><p>当达成共识变得特别困难时，审阅者和开发者可以进行面对面的会议，或者有 VC 参与调停，而不仅仅是试着通过代码审查评论来解决冲突。 （但是，如果您这样做了，请确保在 CL 的评论中记录讨论结果，以供将来的读者使用。）</p><p>如果这样还不能解决问题，那么解决该问题最常用方法是将问题升级。通常是将问题升级为更广泛的团队讨论，有一个 TL 权衡，要求维护人员对代码作出决定，或要求工程经理的帮助。 <strong>不要因为 CL 的开发者和审查者不能达成一致，就让 CL 在那里卡壳。</strong></p><h1 id="Code-Review-要点"><a href="#Code-Review-要点" class="headerlink" title="Code Review 要点"></a>Code Review 要点</h1><p>注意：在考虑这些要点时，请谨记 “[Code Review 标准](#Code Review 标准)”。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>审查中最重要的是 CL 的整体设计。CL 中各种代码的交互是否有意义？此变更是属于您的代码库（codebase）还是属于库（library）？它是否与您系统的其他部分很好地集成？现在是添加此功能的好时机吗？</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>这个 CL 是否符合开发者的意图？开发者的意图对代码的用户是否是好的？ “用户”通常都是最终用户（当他们受到变更影响时）和开发者（将来必须“使用”此代码）。</p><p>大多数情况下，我们希望开发者能够很好地测试 CL，以便在审查时代码能够正常工作。但是，作为审查者，仍然应该考虑边缘情况，寻找并发问题，尝试像用户一样思考，并确保您单纯透过阅读方式审查时，代码没有包含任何 bug。</p><p>当要检查 CL 的行为会对用户有重大影响时，验证 CL 的变化将变得十分重要。例如 <strong>UI 变更</strong>。当您只是阅读代码时，很难理解某些变更会如何影响用户。如果在 CL 中打 patch 或自行尝试这样的变更太不方便，您可以让开发人员为您提供功能演示。</p><p>另一个在代码审查期间特别需要考虑功能的时机，就是如果 CL 中存在某种<strong>并行编程</strong>，理论上可能导致死锁或竞争条件。通过运行代码很难检测到这些类型的问题，并且通常需要某人（开发者和审查者）仔细思考它们以确保不会引入问题。 （请注意，这也是在可能出现竞争条件或死锁的情况下，不使用并发模型的一个很好的理由——它会使代码审查或理解代码变得非常复杂。）</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>CL 是否已经超过它原本所必须的复杂度？针对任何层级的 CL 请务必确认这点——每行程序是否过于复杂？ 功能太复杂了吗？类太复杂了吗？ “太复杂”通常意味着<strong>“阅读代码的人无法快速理解</strong>。”也可能意味着<strong>“开发者在尝试调用或修改此代码时可能会引入错误。”</strong></p><p>其中一种复杂性就是<strong>过度工程（over-engineering）</strong>，如开发人员使代码过度通用，超过它原本所需的，或者添加系统当前不需要的功能。审查者应特别警惕过度工程。未来的问题应该在它实际到达后解决，且届时才能更清晰的看到其真实样貌及在现实环境里的需求，鼓励开发人员解决他们现在需要解决的问题，而不是开发人员推测<strong>可能</strong>需要在未来解决的问题。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将要求单元、集成或端到端测试视为应该做的适当变更。通常，除非 CL 处理<a href="#%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5">紧急情况</a>，否则应在与生产代码相同的 CL 中添加测试。</p><p>确保 CL 中的测试正确，合理且有用。测试并非用来测试自己本身，且我们很少为测试编写测试——人类必须确保测试有效。</p><p>当代码被破坏时，测试是否真的会失败？ 如果代码发生变化时，它们会开始产生误报吗？ 每个测试都会做出简单而有用的断言吗？ 不同测试方法的测试是否适当分开？</p><p>请记住，测试也是必须维护的代码。不要仅仅因为它们不是主二进制文件的一部分而接受测试中的复杂性。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>开发人员是否为所有内容选择了好名字？ 一个好名字应该足够长，可以完全传达项目的内容或作用，但又不会太长，以至于难以阅读。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>开发者是否用可理解的英语撰写了清晰的注释？所有注释都是必要的吗？通常，注释<strong>解释为什么</strong>某些代码存在时很有用，且不应该用来解释某些代码正在做什么。如果代码无法清楚到去解释自己时，那么代码应该变得更简单。有一些例外（正则表达式和复杂算法通常会从解释他们正在做什么事情的注释中获益很多），但大多数注释都是针对代码本身可能无法包含的信息，例如决策背后的推理。</p><p>查看此 CL 之前的注释也很有帮助。 也许有一个 TODO 现在可以删除，一个注释建议不要进行这种改变，等等。</p><p>请注意，注释与类、模块或函数的<strong>文档</strong>不同，它们应该代表一段代码的目的，如何使用它，以及使用时它的行为方式。</p><h2 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h2><p>Google 提供了所有主要语言的<a href="http://google.github.io/styleguide/">风格指南</a>，甚至包括大多数小众语言。确保 CL 遵循适当的风格指南。</p><p>如果您想改进风格指南中没有的一些样式点，请在评论前加上“Nit：”，让开发人员知道这是您认为可改善代码的小瑕疵，但不是强制性的。不要仅根据个人风格偏好阻止提交 CL。</p><p>CL 的作者不应在主要风格变更中，包括与其他种类的变更。它会使得很难看到 CL 中的变更了什么，使合并和回滚更复杂，并导致其他问题。例如，如果作者想要重新格式化整个文件，让他们只将重新格式化变为一个 CL，其后再发送另一个包含功能变更的 CL。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>如果 CL 变更了用户构建、测试、交互或发布代码的方式，请检查相关文档是否有更新，包括 README、g3doc 页面和任何生成的参考文档。如果 CL 删除或弃用代码，请考虑是否也应删除文档。 如果缺少文档，请询问。</p><h2 id="每一行"><a href="#每一行" class="headerlink" title="每一行"></a>每一行</h2><p>查看分配给您审查的<strong>每行</strong>代码。有时如数据文件、生成的代码或大型数据结构等东西，您可以快速扫过。但不要快速扫过人类编写的类、函数或代码块，并假设其中的内容是 OK 的。显然，某些代码需要比其他代码更仔细的审查——这是您必须做出的判断——但您至少应该确定您<strong>理解</strong>所有代码正在做什么。</p><p>如果您觉得这些代码太难以阅读了并减慢您审查的速度，您应该在您尝试继续审核前要让开发者知道这件事，并等待他们为程序做出解释、澄清。在 Google，我们聘请了优秀的软件工程师，您就是其中之一。如果您无法理解代码，那么很可能其他开发人员也不会。因此，当您要求开发人员澄清此代码时，您也会帮助未来的开发人员理解这些代码。</p><p>如果您了解代码但觉得没有资格做某些部分的审查，请确保 CL 上有一个合格的审查人，特别是对于安全性、并发性、可访问性、国际化等复杂问题。</p><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><p>在广泛的上下文下查看 CL 通常很有帮助。通常，代码审查工具只会显示变更的部分的周围的几行。有时您必须查看整个文件以确保变更确实有意义。例如，您可能只看到添加了四行新代码，但是当您查看整个文件时，您会看到这四行是添加在一个 50 行的方法里，现在确实需要将它们分解为更小的方法。</p><p>在整个系统的上下文中考虑 CL 也很有用。 这个 CL 是否改善了系统的代码健康状况，还是使整个系统更复杂，测试更少等等？<strong>不要接受降低系统代码运行状况的 CL</strong>。大多数系统通过许多小的变化而变得复杂，因此防止新变更引入即便很小的复杂性也非常重要。</p><h2 id="好的事情"><a href="#好的事情" class="headerlink" title="好的事情"></a>好的事情</h2><p>如果您在 CL 中看到一些不错的东西，请告诉开发者，特别是当他们以一种很好的方式解决了您的的一个评论时。代码审查通常只关注错误，但也应该为良好实践提供鼓励。在指导方面，比起告诉他们他们做错了什么，有时更有价值的是告诉开发人员他们做对了什么。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在进行代码审查时，您应该确保：</p><ul><li>代码设计精良。</li><li>该功能对代码用户是有好处的。</li><li>任何 UI 变更都是合理的且看起来是好的。</li><li>其中任何并行编程都是安全的。</li><li>代码并不比它需要的复杂。</li><li>开发人员没有实现他们将来<strong>可能</strong>需要，但不知道他们现在是否需要的东西。</li><li>代码有适当的单元测试。</li><li>测试精心设计。</li><li>开发人员使用了清晰的名称。</li><li>注释清晰有用，且大多用来解释<strong>为什么</strong>而不是<strong>做什么</strong>。</li><li>代码有适当记录成文件（通常在 g3doc 中）。</li><li>代码符合我们的风格指南。</li></ul><p>确保查看您被要求查看的<strong>每一行</strong>代码，查看<strong>上下文</strong>，确保您<strong>提高代码健康状况</strong>，并赞扬开发人员所做的<strong>好事</strong>。</p><h1 id="查看-CL-的步骤"><a href="#查看-CL-的步骤" class="headerlink" title="查看 CL 的步骤"></a>查看 CL 的步骤</h1><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>现在您已经知道了 [Code Review 要点](#Code Review 要点)，那么管理分布在多个文件中的评论的最有效方法是什么？</p><ol><li>变更是否有意义？它有很好的描述吗？</li><li>首先看一下变更中最重要的部分。整体设计得好吗？</li><li>以适当的顺序查看 CL 的其余部分。</li></ol><h2 id="第一步：全面了解变更"><a href="#第一步：全面了解变更" class="headerlink" title="第一步：全面了解变更"></a>第一步：全面了解变更</h2><p>查看 [CL 描述](#写好 CL 描述)和 CL 大致上用来做什么事情。这种变更是否有意义？如果在最初不应该发生这样的变更，请立即回复，说明为什么不应该进行变更。当您拒绝这样的变更时，向开发人员建议应该做什么也是一个好主意。</p><p>例如，您可能会说“看起来你已经完成一些不错的工作，谢谢！但实际上，我们正朝着删除您在这里修改的 FooWidget 系统的方向演进，所以我们不想对它进行任何新的修改。不过，您来重构下新的 BarWidget 类怎么样？“</p><p>请注意，审查者不仅拒绝了当前的 CL 并提供了替代建议，而且他们保持礼貌地这样做。这种礼貌很重要，因为我们希望表明，即使不同意，我们也会相互尊重。</p><p>如果您获得了多个您不想变更的 CL，您应该考虑重整开发团队的开发过程或外部贡献者的发布过程，以便在编写CL之前有更多的沟通。最好在他们完成大量工作之前说“不”，避免已经投入心血的工作现在必须被抛弃或彻底重写。</p><h2 id="第二步：检查-CL-的主要部分"><a href="#第二步：检查-CL-的主要部分" class="headerlink" title="第二步：检查 CL 的主要部分"></a>第二步：检查 CL 的主要部分</h2><p>查找作为此 CL “主要”部分的文件。通常，包含大量的逻辑变更的文件就是 CL 的主要部分。先看看这些主要部分。这有助于为 CL 的所有较小部分提供上下文，并且通常可以加速代码审查。如果 CL 太大而无法确定哪些部分是主要部分，请向开发人员询问您应该首先查看的内容，或者要求他们[将 CL 拆分为多个 CL](#小型 CL)。</p><p>如果在该部分发现存在一些主要的设计问题时，即使没有时间立即查看 CL 的其余部分，也应立即留下评论告知此问题。因为事实上，因为该设计问题足够严重的话，继续审查其余部分很可能只是浪费宝贵的时间，因为其他正在审查的程序可能都将无关或消失。</p><p>立即发送这些主要设计评论非常重要，有两个主要原因：</p><ul><li>通常开发者在发出 CL 后，在等待审查时立即开始基于该 CL 的新工作。如果您正在审查的 CL 中存在重大设计问题，那么他们以后的 CL 也必须要返工。您应该赶在他们在有问题的设计上做了太多无用功之前通知他们。</li><li>主要的设计变更比起小的变更来说需要更长的时间才能完成。开发人员基本都有截止日期；为了完成这些截止日期并且在代码库中仍然保有高质量代码，开发人员需要尽快开始 CL 的任何重大工作。</li></ul><h2 id="第三步：以适当的顺序查看-CL-的其余部分"><a href="#第三步：以适当的顺序查看-CL-的其余部分" class="headerlink" title="第三步：以适当的顺序查看 CL 的其余部分"></a>第三步：以适当的顺序查看 CL 的其余部分</h2><p>一旦您确认整个 CL 没有重大的设计问题，试着找出一个逻辑顺序来查看文件，同时确保您不会错过查看任何文件。 通常在查看主要文件之后，最简单的方法是按照代码审查工具向您提供的顺序浏览每个文件。有时在阅读主代码之前先阅读测试也很有帮助，因为这样您就可以了解该变更应当做些什么。</p><h1 id="Code-Review-速度"><a href="#Code-Review-速度" class="headerlink" title="Code Review 速度"></a>Code Review 速度</h1><h2 id="为什么尽快进行-Code-Review？"><a href="#为什么尽快进行-Code-Review？" class="headerlink" title="为什么尽快进行 Code Review？"></a>为什么尽快进行 Code Review？</h2><p><strong>在Google，我们优化了开发团队共同开发产品的速度</strong>，而不是优化单个开发者编写代码的速度。个人开发的速度很重要，它并不如整个团队的速度那么重要。</p><p>当代码审查很慢时，会发生以下几件事：</p><ul><li><strong>整个团队的速度降低了。</strong>是的，对审查没有快速响应的个人的确完成了其他工作。但是，对于团队其他人来说重要的新功能与缺陷修復将会被延迟数天、数周甚至数月，只因为每个 CL 正在等待审查和重新审查。</li><li><strong>开发者开始抗议代码审查流程。</strong>如果审查者每隔几天只响应一次，但每次都要求对 CL 进行重大更改，那么开发者可能会变得沮丧。通常，开发者将表达对审查者过于“严格”的抱怨。如果审查者请求相同实质性更改（确实可以改善代码健康状况），但每次开发者进行更新时都会快速响应，则抱怨会逐渐消失。<strong>大多数关于代码审查流程的投诉实际上是通过加快流程来解决的。</strong></li><li><strong>代码健康状况可能会受到影响。</strong>如果审查速度很慢，则造成开发者提交不尽如人意的 CL 的压力会越来越大。审查太慢还会阻止代码清理、重构以及对现有 CL 的进一步改进。</li></ul><h2 id="Code-Review-应该有多快？"><a href="#Code-Review-应该有多快？" class="headerlink" title="Code Review 应该有多快？"></a>Code Review 应该有多快？</h2><p>如果您没有处于重点任务的中，那么您应该在<strong>收到代码审查后尽快开始</strong>。</p><p><strong>一个工作日</strong>是应该响应代码审查请求所需的最长时间（即第二天早上的第一件事）。</p><p>遵循这些指导意味着典型的 CL 应该在一天内进行多轮审查（如果需要）。</p><h2 id="速度-vs-中断"><a href="#速度-vs-中断" class="headerlink" title="速度 vs. 中断"></a>速度 vs. 中断</h2><p>有一种情况下个人速度胜过团队速度。<strong>如果您正处于重点任务中，例如编写代码，请不要打断自己进行代码审查。</strong>研究表明，开发人员在被打断后需要很长时间才能恢复到顺畅的开发流程中。因此，编写代码时打断自己实际上比让另一位开发人员等待代码审查的代价更加昂贵。</p><p>相反，在回复审查请求之前，请等待工作中断点。可能是当你的当前编码任务完成，午餐后，从会议返回，从厨房回来等等。</p><h2 id="快速响应"><a href="#快速响应" class="headerlink" title="快速响应"></a>快速响应</h2><p>当我们谈论代码审查的速度时，我们关注的是响应时间，而不是 CL 需要多长时间才能完成整个审查并提交。理想情况下，整个过程也应该是快速的，<strong>快速的个人响应比整个过程快速发生更为重要</strong>。</p><p>即使有时需要很久才能完成整个审查流程，但在整个过程中获得审查者的快速响应可以显着减轻开发人员对“慢速”代码审查感到的挫败感。</p><p>如果您太忙而无法对 CL 进行全面审查，您仍然可以发送快速回复，让开发人员知道您什么时候可以开始，或推荐其他能够更快回复的审查人员，或者[提供一些大体的初步评论](#查看 CL 的步骤)。 （注意：这并不意味着您应该中断编码，即使发送这样的响应，也要在工作中的合理断点处发出响应。）</p><p>重要的是，审查人员要花足够的时间进行审查，确信他们的“LGTM”意味着“此代码符合我们的[标准](#Code Review 标准)。”但是，理想情况下，个人反应仍然应该很[快](#Code Review 应该有多快？)。</p><h2 id="跨时区审查"><a href="#跨时区审查" class="headerlink" title="跨时区审查"></a>跨时区审查</h2><p>在处理时区差异时，尝试在他们还在办公室时回复作者。 如果他们已经下班回家了，那么请确保在第二天回到办公室之前完成审查。</p><h2 id="带评论的-LGTM"><a href="#带评论的-LGTM" class="headerlink" title="带评论的 LGTM"></a>带评论的 LGTM</h2><p>为了加快代码审查，在某些情况下，即使他们也在 CL 上留下未解决的评论，审查者也应该给予 LGTM&#x2F;Approval，这可以是以下任何一种情况：</p><ul><li>审查者确信开发人员将适当地处理所有审查者的剩余评论。</li><li>其余的更改很小，不必由开发者完成。</li></ul><p>如果不清楚的话，审查者应该指定他们想要哪些选项。</p><p>当开发者和审查者处于不同的时区时，带评论的 LGTM 尤其值得考虑，否则开发者将等待一整天才能获得 “LGTM，Approval”。</p><h2 id="大型-CL"><a href="#大型-CL" class="headerlink" title="大型 CL"></a>大型 CL</h2><p>如果有人向您发送了代码审查太大，您不确定何时有时间查看，那么您应该要求开发者[将 CL 拆分为几个较小的 CL](#小型 CL) 而不是一次审查的一个巨大的 CL。这通常可行，对审查者非常有帮助，即使需要开发人员的额外工作。</p><p>如果 CL 无法分解为较小的 CL，并且您没有时间快速查看整个内容，那么至少要对 CL 的整体设计写一些评论并将其发送回开发人员以进行改进。作为审查者，您的目标之一应该在不牺牲代码健康状况的前提下，始终减少开发者能够快速采取某种进一步的操作的阻力。</p><h2 id="代码审查随时间推移而改进"><a href="#代码审查随时间推移而改进" class="headerlink" title="代码审查随时间推移而改进"></a>代码审查随时间推移而改进</h2><p>如果您遵循这些准则，并且您对代码审查非常严格，那么您应该会发现整个代码审核流程会随着时间的推移而变得越来越快。开发者可以了解健康代码所需的内容，并向您发送从一开始就很棒的 CL，且需要的审查时间越来越短。审查者学会快速响应，而不是在审查过程中添加不必要的延迟。但是，从长远来看，<strong>不要为了提高想象中的代码审查速度，而在[代码审查标准](#Code Review 标准)或质量方面妥协，实际上这样做对于长期来说不会有任何帮助。</strong></p><h2 id="紧急情况"><a href="#紧急情况" class="headerlink" title="紧急情况"></a>紧急情况</h2><p>还有一些<a href="#%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5">紧急情况</a>，CL 必须非常快速地通过整个审查流程，并且质量准则将放宽。请查看<a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5%EF%BC%9F">什么是紧急情况？</a> 中描述的哪些情况属于紧急情况，哪些情况不属于紧急情况。</p><h1 id="如何撰写-Code-Review-评论"><a href="#如何撰写-Code-Review-评论" class="headerlink" title="如何撰写 Code Review 评论"></a>如何撰写 Code Review 评论</h1><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li>保持友善。</li><li>解释你的推理。</li><li>在给出明确的指示与只指出问题并让开发人员自己决定间做好平衡。</li><li>鼓励开发人员简化代码或添加代码注释，而不仅仅是向你解释复杂性。</li></ul><h2 id="礼貌"><a href="#礼貌" class="headerlink" title="礼貌"></a>礼貌</h2><p>一般而言，对于那些正在被您审查代码的人，除了保持有礼貌且尊重以外，重要的是还要确保您（的评论）是非常清楚且有帮助的。你并不总是必须遵循这种做法，但在说出可能令人不安或有争议的事情时你绝对应该使用它。 例如：</p><p>糟糕的示例：“为什么这里<strong>你</strong>使用了线程，显然并发并没有带来什么好处？”</p><p>好的示例：“这里的并发模型增加了系统的复杂性，但没有任何实际的性能优势，因为没有性能优势，最好是将这些代码作为单线程处理而不是使用多线程。”</p><h2 id="解释为什么"><a href="#解释为什么" class="headerlink" title="解释为什么"></a>解释为什么</h2><p>关于上面的“好”示例，您会注意到的一件事是，它可以帮助开发人员理解您发表评论的原因。 并不总是需要您在审查评论中包含此信息，但有时候提供更多解释，对于表明您的意图，您在遵循的最佳实践，或为您建议如何提高代码健康状况是十分恰当的。</p><h2 id="给予指导"><a href="#给予指导" class="headerlink" title="给予指导"></a>给予指导</h2><p><strong>一般来说，修复 CL 是开发人员的责任，而不是审查者。</strong> 您无需为开发人员详细设计解决方案或编写代码。</p><p>但这并不意味着审查者应该没有帮助。一般来说，您应该在指出问题和提供直接指导之间取得适当的平衡。指出问题并让开发人员做出决定通常有助于开发人员学习，并使代码审查变得更容易。它还可能产生更好的解决方案，因为开发人员比审查者更接近代码。</p><p>但是，有时直接说明，建议甚至代码会更有帮助。代码审查的主要目标是尽可能获得最佳 CL。第二个目标是提高开发人员的技能，以便他们随着时间的推移需要的审查越来越少。</p><h2 id="接受解释"><a href="#接受解释" class="headerlink" title="接受解释"></a>接受解释</h2><p>如果您要求开发人员解释一段您不理解的代码，那通常会导致他们<strong>更清楚地重写代码</strong>。偶尔，在代码中添加注释也是一种恰当的响应，只要它不仅仅是解释过于复杂的代码。</p><p><strong>仅在代码审查工具中编写的解释对未来的代码阅读者没有帮助。</strong>这仅在少数情况下是可接受的，例如当您查看一个您不熟悉的领域时，开发人员会用来向您解释普通读者已经知道的内容。</p><h1 id="处理-Code-Review-中的拖延"><a href="#处理-Code-Review-中的拖延" class="headerlink" title="处理 Code Review 中的拖延"></a>处理 Code Review 中的拖延</h1><p>有时开发人员会拖延（Pushback）代码审查。他们要么不同意您的建议，要么抱怨您太严格。</p><h2 id="谁是对的？"><a href="#谁是对的？" class="headerlink" title="谁是对的？"></a>谁是对的？</h2><p>当开发人员不同意您的建议时，请先花点时间考虑一下是否正确。通常，他们比你更接近代码，所以他们可能真的对它的某些方面有更好的洞察力。他们的论点有意义吗？从代码健康的角度来看它是否有意义？如果是这样，让他们知道他们是对的，把问题解决。</p><p>但是，开发人员并不总是对的。在这种情况下，审查人应进一步解释为什么认为他们的建议是正确的。好的解释在描述对开发人员回复的理解的同时，还会解释为什么请求更改。</p><p>特别是，当审查人员认为他们的建议会改善代码健康状况时，他们应该继续提倡更改，如果他们认为最终的代码质量改进能够证明所需的额外工作是合理的。<strong>提高代码健康状况往往只需很小的几步。</strong></p><p>有时需要几轮解释一个建议才能才能让对方真正理解你的用意。只要确保始终保持[礼貌](#如何撰写 Code Review 评论)，让开发人员知道你有听到他们在说什么，只是你不同意该论点而已。</p><h2 id="沮丧的开发者"><a href="#沮丧的开发者" class="headerlink" title="沮丧的开发者"></a>沮丧的开发者</h2><p>审查者有时认为，如果审查者人坚持改进，开发人员会感到不安。有时候开发人员会感到很沮丧，但这样的感觉通常只会持续很短的时间，后来他们会非常感谢您在提高代码质量方面给他们的帮助。通常情况下，如果您在评论中表现得很有[礼貌](#如何撰写 Code Review 评论)，开发人员实际上根本不会感到沮丧，这些担忧都仅存在于审核者心中而已。开发者感到沮丧通常更多地与[评论的写作方式](#如何撰写 Code Review 评论)有关，而不是审查者对代码质量的坚持。</p><h2 id="稍后清理"><a href="#稍后清理" class="headerlink" title="稍后清理"></a>稍后清理</h2><p>开发人员拖延的一个常见原因是开发人员（可以理解）希望完成任务。他们不想通过另一轮审查来完成该 CL。所以他们说会在以后的 CL 中清理一些东西，所以您现在应该 LGTM 这个 CL。一些开发人员非常擅长这一点，并会立即编写一个修复问题的后续 CL。但是，经验表明，在开发人员编写原始 CL 后，经过越长的时间这种清理发生的可能性就越小。实际上，通常除非开发人员在当前 CL 之后立即进行清理，否则它就永远不会发生。这不是因为开发人员不负责任，而是因为他们有很多工作要做，清理工作在其他工作中被丢失或遗忘。因此，在代码进入代码库并“完成”之前，通常最好坚持让开发人员现在清理他们的 CL。让人们“稍后清理东西”是代码库质量退化的常见原因。</p><p>如果 CL 引入了新的复杂性，除非是<a href="#%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5">紧急情况</a>，否则必须在提交之前将其清除。如果 CL 暴露了相关的问题并且现在无法解决，那么开发人员应该将 bug 记录下来并分配给自己，避免后续被遗忘。又或者他们可以选择在程序中留下 TODO 的注释并连结到刚记录下的 bug。</p><h2 id="关于严格性的抱怨"><a href="#关于严格性的抱怨" class="headerlink" title="关于严格性的抱怨"></a>关于严格性的抱怨</h2><p>如果您以前有相当宽松的代码审查，并转而进行严格的审查，一些开发人员会抱怨得非常大声。通常提高代码审查的[速度](#Code Review 速度)会让这些抱怨逐渐消失。</p><p>有时，这些投诉可能需要数月才会消失，但最终开发人员往往会看到严格的代码审查的价值，因为他们会看到代码审查帮助生成的优秀代码。而且一旦发生某些事情时，最响亮的抗议者甚至可能会成为你最坚定的支持者，因为他们会看到审核变严格后所带来的价值。</p><h2 id="解决冲突-1"><a href="#解决冲突-1" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>如果上述所有操作仍无法解决您与开发人员之间的冲突，请参阅 “[Code Review 标准](#Code Review 标准)”以获取有助于解决冲突的指导和原则。</p><h1 id="代码开发者指南"><a href="#代码开发者指南" class="headerlink" title="代码开发者指南"></a>代码开发者指南</h1><p>本节页面的内容为开发人员进行代码审查的最佳实践。这些指南可帮助您更快地完成审核并获得更高质量的结果。您不必全部阅读它们，但它们适用于每个 Google 开发人员，并且许阅读全文通常会很有帮助。</p><h1 id="写好-CL-描述"><a href="#写好-CL-描述" class="headerlink" title="写好 CL 描述"></a>写好 CL 描述</h1><p>CL 描述是进行了<strong>哪些更改</strong>以及<strong>为何更改</strong>的公开记录。CL 将作为版本控制系统中的永久记录，可能会在长时期内被除审查者之外的数百人阅读。</p><p>开发者将来会根据描述搜索您的 CL。有人可能会仅凭有关联性的微弱印象，但没有更多具体细节的情况下，来查找你的改动。如果所有重要信息都在代码而不是描述中，那么会让他们更加难以找到你的 CL 。</p><h2 id="首行"><a href="#首行" class="headerlink" title="首行"></a>首行</h2><ul><li>正在做什么的简短摘要。</li><li>完整的句子，使用祈使句。</li><li>后面跟一个空行。</li></ul><p>CL 描述的<strong>第一行</strong>应该是关于这个 CL 是<strong>做什么</strong>的简短摘要，后面跟一个空白行。这是将来大多数的代码搜索者在浏览代码的版本控制历史时，最常被看到的内容，因此第一行应该提供足够的信息，以便他们不必阅读 CL 的整个描述就可以获得这个 CL 实际上是做了什么的信息。</p><p>按照传统，CL 描述的第一行应该是一个完整的句子，就好像是一个命令（一个命令句）。例如，“<strong>Delete</strong> the FizzBuzz RPC and <strong>replace</strong> it with the new system.”而不是“<strong>Deleting</strong> the FizzBuzz RPC and <strong>replacing</strong> it with the new system.“ 但是，您不必把其余的描述写成祈使句。</p><h2 id="Body-是信息丰富的"><a href="#Body-是信息丰富的" class="headerlink" title="Body 是信息丰富的"></a>Body 是信息丰富的</h2><p>其余描述应该是提供信息的。可能包括对正在解决的问题的简要描述，以及为什么这是最好的方法。如果方法有任何缺点，应该提到它们。如果相关，请包括背景信息，例如错误编号，基准测试结果以及设计文档的链接。</p><p>即使是小型 CL 也需要注意细节。在 CL 描述中提供上下文以供参照。</p><h2 id="糟糕的-CL-描述"><a href="#糟糕的-CL-描述" class="headerlink" title="糟糕的 CL 描述"></a>糟糕的 CL 描述</h2><p>“Fix bug ”是一个不充分的 CL 描述。什么 bug？你做了什么修复？其他类似的不良描述包括：</p><ul><li>“Fix build.”</li><li>“Add patch.”</li><li>“Moving code from A to B.”</li><li>“Phase 1.”</li><li>“Add convenience functions.”</li><li>“kill weird URLs.”</li></ul><p>其中一些是真正的 CL 描述。他们的作者可能认为自己提供了有用的信息，却没有达到 CL 描述的目的。</p><h2 id="好的-CL-描述"><a href="#好的-CL-描述" class="headerlink" title="好的 CL 描述"></a>好的 CL 描述</h2><p>以下是一些很好的描述示例。</p><h3 id="功能更新"><a href="#功能更新" class="headerlink" title="功能更新"></a>功能更新</h3><blockquote><p>rpc：删除 RPC 服务器消息 freelist 上的大小限制。</p><p>像 FIzzBuzz 这样的服务器有非常大的消息，并且可以从重用中受益。增大 freelist，添加一个 goroutine，缓慢释放 freelist 条目，以便空闲服务器最终释放所有 freelist 条目。</p></blockquote><p>前几个词描述了CL实际上做了什么。其余的描述讨论了正在解决的问题，为什么这是一个很好的解决方案，以及有关具体实现的更多信息。</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><blockquote><p>Construct a Task with a TimeKeeper to use its TimeStr and Now methods.</p><p>Add a Now method to Task, so the borglet() getter method can be removed (which was only used by OOMCandidate to call borglet’s Now method). This replaces the methods on Borglet that delegate to a TimeKeeper.</p><p>Allowing Tasks to supply Now is a step toward eliminating the dependency on Borglet. Eventually, collaborators that depend on getting Now from the Task should be changed to use a TimeKeeper directly, but this has been an accommodation to refactoring in small steps.</p><p>Continuing the long-range goal of refactoring the Borglet Hierarchy.</p></blockquote><p>第一行描述了 CL 的作用以及改变。其余的描述讨论了具体的实现，CL 的背景，解决方案并不理想，以及未来的可能方向。它还解释了为什么正在进行此更改。</p><h3 id="需要上下文的-小-CL"><a href="#需要上下文的-小-CL" class="headerlink" title="需要上下文的 小 CL"></a>需要上下文的 小 CL</h3><blockquote><p>Create a Python3 build rule for status.py.</p><p>This allows consumers who are already using this as in Python3 to depend on a rule that is next to the original status build rule instead of somewhere in their own tree. It encourages new consumers to use Python3 if they can, instead of Python2, and significantly simplifies some automated build file refactoring tools being worked on currently.</p></blockquote><p>第一句话描述实际做了什么。其余的描述解释了为什么正在进行更改并为审查者提供了大量背景信息。</p><h2 id="在提交-CL-前审查描述"><a href="#在提交-CL-前审查描述" class="headerlink" title="在提交 CL 前审查描述"></a>在提交 CL 前审查描述</h2><p>CL 在审查期间可能会发生重大变更。在提交 CL 之前检查 CL 描述是必要的，以确保描述仍然反映了 CL 的作用。</p><h1 id="小型-CL"><a href="#小型-CL" class="headerlink" title="小型 CL"></a>小型 CL</h1><h2 id="为什么提交小型-CL"><a href="#为什么提交小型-CL" class="headerlink" title="为什么提交小型 CL?"></a>为什么提交小型 CL?</h2><p>小且简单的 CL 是指：</p><ul><li><strong>审查更快。</strong>审查者更容易抽多次五分钟时间来审查小型 CL，而不是留出 30 分钟来审查一个大型 CL。</li><li><strong>审查得更彻底。</strong>如果是大的变更，审查者和提交者往往会因为大量细节的讨论翻来覆去而感到沮丧——有时甚至到了重要点被遗漏或丢失的程度。</li><li><strong>不太可能引入错误。</strong> 由于您进行的变更较少，您和您的审查者可以更轻松有效地推断 CL 的影响，并查看是否已引入错误。</li><li><strong>如果被拒绝，减少浪费的工作。</strong> 如果您写了一个巨大的 CL，您的评论者说整个 CL 的方向都错误了，你就浪费了很多精力和时间。</li><li><strong>更容易合并。</strong> 处理大型 CL 需要很长时间，在合并时会出现很多冲突，并且必须经常合并。</li><li><strong>更容易设计好。</strong> 打磨一个小变更的设计和代码健康状况比完善一个大变更的所有细节要容易得多。</li><li><strong>减少对审查的阻碍。</strong> 发送整体变更的自包含部分可让您在等待当前 CL 审核时继续编码。</li><li><strong>更简单的回滚。</strong> 大型 CL 更有可能触及在初始 CL 提交和回滚 CL 之间更新的文件，从而使回滚变得复杂（中间的 CL 也可能需要回滚）。</li></ul><p>请注意，<strong>审查者可以仅凭 CL 过大而自行决定完全拒绝您的变更。</strong>通常他们会感谢您的贡献，但要求您以某种方式将其 CL 改成一系列较小的变更。在您编写完变更后，或者需要花费大量时间来讨论为什么审查者应该接受您的大变更，这可能需要做很多工作。首先编写小型 CL 更容易。</p><h2 id="什么是小型-CL？"><a href="#什么是小型-CL？" class="headerlink" title="什么是小型 CL？"></a>什么是小型 CL？</h2><p>一般来说，CL 的正确大小是<strong>自包含的变更</strong>。这意味着：</p><ul><li>CL 进行了一项最小的变更，<strong>只解决了一件事</strong>。通常只是功能的一部分，而不是一个完整的功能。一般来说，因为编写过小的 CL 而犯错也比过大的 CL 犯错要好。与您的审查者讨论以确定可接受的大小。</li><li>审查者需要了解的关于 CL 的所有内容（除了未来的开发）都在 CL 的描述、现有的代码库或已经审查过的 CL 中。</li><li>对其用户和开发者来说，在签入 CL 后系统能继续良好的工作。</li><li>CL 不会过小以致于其含义难以理解。如果您添加新 API，则应在同一 CL 中包含 API 的用法，以便审查者可以更好地了解 API 的使用方式。这也可以防止签入未使用的 API。</li></ul><p>关于多大算“太大”没有严格的规则。对于 CL 来说，100 行通常是合理的大小，1000 行通常太大，但这取决于您的审查者的判断。变更中包含的文件数也会影响其“大小”。一个文件中的 200 行变更可能没问题，但是分布在 50 个文件中通常会太大。</p><p>请记住，尽管从开始编写代码开始就您就已经密切参与了代码，但审查者通常不清楚背景信息。对您来说，看起来像是一个可接受的大小的 CL 对您的审查者来说可能是压倒性的。如有疑问，请编写比您认为需要编写的要小的 CL。审查者很少抱怨收到过小的 CL 提交。</p><h2 id="什么时候大-CL-是可以的？"><a href="#什么时候大-CL-是可以的？" class="headerlink" title="什么时候大 CL 是可以的？"></a>什么时候大 CL 是可以的？</h2><p>在某些情况下，大变更也是可以接受的：</p><ul><li>您通常可以将整个文件的删除视为一行变更，因为审核人员不需要很长时间审核。</li><li>有时一个大的 CL 是由您完全信任的自动重构工具生成的，而审查者的工作只是检查并确定想要这样的变更。但这些 CL 可以更大，尽管上面的一些警告（例如合并和测试）仍然适用。</li></ul><h3 id="按文件拆分"><a href="#按文件拆分" class="headerlink" title="按文件拆分"></a>按文件拆分</h3><p>拆分 CL 的另一种方法是对文件进行分组，这些文件需要不同的审查者，否则就是自包含的变更。</p><p>例如：您发送一个 CL 以修改协议缓冲区，另一个 CL 发送变更使用该原型的代码。您必须在代码 CL 之前提交 proto CL，但它们都可以同时进行审查。如果这样做，您可能希望通知两组审查者审查您编写的其他 CL，以便他们对您的变更具有更充足的上下文。</p><p>另一个例子：你发送一个 CL 用于代码更改，另一个用于使用该代码的配置或实验；如果需要，这也更容易回滚，因为配置&#x2F;实验文件有时会比代码变更更快地推向生产。</p><h2 id="分离出重构"><a href="#分离出重构" class="headerlink" title="分离出重构"></a>分离出重构</h2><p>通常最好在功能变更或错误修复的单独 CL 中进行重构。例如，移动和重命名类应该与修复该类中的错误的 CL 不同。审查者更容易理解每个 CL 在单独时引入的更改。</p><p>但是，修复本地变量名称等小清理可以包含在功能变更或错误修复 CL 中。如果重构大到包含在您当前的 CL 中，会使审查更加困难的话，需要开发者和审查者一起判断是否将其拆开。</p><h2 id="将相关的测试代码保存在同一个-CL-中"><a href="#将相关的测试代码保存在同一个-CL-中" class="headerlink" title="将相关的测试代码保存在同一个 CL 中"></a>将相关的测试代码保存在同一个 CL 中</h2><p>避免将测试代码拆分为单独的 CL。验证代码修改的测试应该进入相同的 CL，即使它增加了代码行数。</p><p>但是，独立的测试修改可以首先进入单独的 CL，类似于<a href="#%E5%88%86%E7%A6%BB%E5%87%BA%E9%87%8D%E6%9E%84">重构指南</a>。包括：</p><ul><li>使用新测试验证预先存在的已提交代码。</li><li>重构测试代码（例如引入辅助函数）。</li><li>引入更大的测试框架代码（例如集成测试）。</li></ul><h2 id="不要破坏构建"><a href="#不要破坏构建" class="headerlink" title="不要破坏构建"></a>不要破坏构建</h2><p>如果您有几个相互依赖的 CL，您需要找到一种方法来确保在每次提交 CL 后整个系统能够继续运作。否则可能会在您的 CL 提交的几分钟内打破所有开发人员的构建（如果您之后的 CL 提交意外出错，时间可能会甚至更长）。</p><h2 id="如果不能让它足够小"><a href="#如果不能让它足够小" class="headerlink" title="如果不能让它足够小"></a>如果不能让它足够小</h2><p>有时你会遇到看起来您的 CL 必须如此庞大，但这通常很少是正确的。习惯于编写小型 CL 的提交者几乎总能找到将功能分解为一系列小变更的方法。</p><p>在编写大型 CL 之前，请考虑在重构 CL 之前是否可以为更清晰的实现铺平道路。与你的同伴聊聊，看看是否有人想过如何在小型 CL 中实现这些功能。</p><p>如果以上的努力都失败了（这应该是非常罕见的），那么请在事先征得审查者的同意后提交大型 CL，以便他们收到有关即将发生的事情的警告。在这种情况下，做好完成审查过程需要很长一段时间的准备，对不引入错误保持警惕，并且在编写测试时要更下功夫。</p><h1 id="如何处理审查者的评论"><a href="#如何处理审查者的评论" class="headerlink" title="如何处理审查者的评论"></a>如何处理审查者的评论</h1><p>当您发送 CL 进行审查时，您的审查者可能会对您的 CL 发表一些评论。以下是处理审查者评论的一些有用信息。</p><h2 id="不是针对您"><a href="#不是针对您" class="headerlink" title="不是针对您"></a>不是针对您</h2><p>审查的目标是保持代码库和产品的质量。当审查者对您的代码提出批评时，请将其视为在帮助您、代码库和 Google，而不是对您或您的能力的个人攻击。</p><p>有时，审查者会感到沮丧并在评论中表达他们的挫折感。对于审查者来说，这不是一个好习惯，但作为开发人员，您应该为此做好准备。问问自己，“审查者试图与我沟通的建设性意见是什么？”然后像他们实际说的那样操作。</p><p><strong>永远不要愤怒地回应代码审查评论。</strong>这严重违反了专业礼仪且将永远存在于代码审查工具中。如果您太生气或恼火而无法好好的回应，那么请离开电脑一段时间，或者做一些别的事情，直到您感到平静，可以礼貌地回答。</p><p>一般来说，如果审查者没有以建设性和礼貌的方式提供反馈，请亲自向他们解释。如果您无法亲自或通过视频通话与他们交谈，请向他们发送私人电子邮件。以友善的方式向他们解释您不喜欢的东西以及您希望他们以怎样不同的方式来做些什么。如果他们也以非建设性的方式回复此私人讨论，或者没有预期的效果，那么请酌情上报给您的经理。</p><h2 id="修复代码"><a href="#修复代码" class="headerlink" title="修复代码"></a>修复代码</h2><p>如果审查者说他们不了解您的代码中的某些内容，那么您的第一反应应该是澄清代码本身。 如果无法澄清代码，请添加代码注释，以解释代码存在的原因。 只有在想增加的注释看起来毫无意义时，您才能在代码审查工具中进行回复与解释。</p><p>如果审查者不理解您的某些代码，那么代码的未来读者可能也不会理解。在代码审查工具中回复对未来的代码读者没有帮助，但澄清代码或添加代码注释确可以实实在在得帮助他们。</p><h2 id="自我反思"><a href="#自我反思" class="headerlink" title="自我反思"></a>自我反思</h2><p>编写 CL 可能需要做很多工作。在终于发送一个 CL 用于审查后，我们通常会感到满足的，认为它已经完成，并且非常确定不需要进一步的工作。这通常是令人满意的。因此，当审查者回复对可以改进的事情的评论时，很容易本能地认为评论是错误的，审查者正在不必要地阻止您，或者他们应该让您提交 CL。但是，<strong>无论您目前多么确定</strong>，请花一点时间退一步，考虑审查者是否提供有助于对代码库和对 Google 的有价值的反馈。您首先应该想到的应该是，“审查者是否正确？”</p><p>如果您无法回答这个问题，那么审查者可能需要澄清他们的意见。</p><p>如果您已经考虑过并且仍然认为自己是正确的，请随时回答一下为什么您的方法对代码库、用户和&#x2F;或 Google 更好。通常，审查者实际上是在提供建议，他们希望您自己思考什么是最好的。您可能实际上对审阅者不知道的用户、代码库或 CL 有所了解。所以提供并告诉他们更多的上下文。通常，您可以根据技术事实在自己和审查者之间达成一些共识。</p><h2 id="解决冲突-2"><a href="#解决冲突-2" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>解决冲突的第一步应该是尝试与审查者达成共识。 如果您无法达成共识，请参阅“[Code Review 标准](#Code Review 标准)”，该标准提供了在这种情况下遵循的原则。</p><h1 id="紧急情况-1"><a href="#紧急情况-1" class="headerlink" title="紧急情况"></a>紧急情况</h1><p>有时候紧急 CL 必须尽快通过 code review 过程。</p><h2 id="什么是紧急情况？"><a href="#什么是紧急情况？" class="headerlink" title="什么是紧急情况？"></a>什么是紧急情况？</h2><p>紧急 CL 是这样的<strong>小</strong>更新：允许主要发布继续而不是回滚，修复显著影响用户生产的错误，处理紧迫的法律问题，关闭主要安全漏洞等。</p><p>在紧急情况下，我们确实关心 Code Review 的整体速度，而不仅仅是响应的速度。仅在这种情况下，审查人员应该更关心审查的速度和代码的正确性（是否解决了紧急情况？）。此外（显然）这类状况的审查应该优先于所有其他 code reivew。</p><p>但是，在紧急情况解决后，您应该再次查看紧急 CL 并进行更彻底的审查。</p><h2 id="什么不是紧急情况？"><a href="#什么不是紧急情况？" class="headerlink" title="什么不是紧急情况？"></a>什么不是紧急情况？</h2><p>需要说明的是，以下情况并非紧急情况：</p><ul><li>想要在本周而不是下周推出（除非有一些实际<a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5%EF%BC%9F">硬性截止日期</a>，例如合作伙伴协议）。</li><li>开发人员已经在很长一段时间内完成了一项功能想要获得 CL。</li><li>审查者都在另一个时区，目前是夜间或他们已离开现场。</li><li>现在是星期五，在开发者在过周末之前获得这个 CL 会很棒。</li><li>今天因为<a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A7%E6%80%A5%E6%83%85%E5%86%B5%EF%BC%9F">软（非硬）截止日期</a>，经理表示必须完成此审核并签入 CL。</li><li>回滚导致测试失败或构建破坏的 CL。</li></ul><p>等等。</p><h2 id="什么是-Hard-Deadline？"><a href="#什么是-Hard-Deadline？" class="headerlink" title="什么是 Hard Deadline？"></a>什么是 Hard Deadline？</h2><p>硬性截止日期（Hard Deadline）是指如果你错过它会发生灾难性的事情。例如：</p><ul><li>对于合同义务，必须在特定日期之前提交 CL。</li><li>如果在某个日期之前没有发布，您的产品将在市场上完全失败。</li><li>一些硬件制造商每年只发送一次新硬件。如果您错过了向他们提交代码的截止日期，那么这可能是灾难性的，具体取决于您尝试发布的代码类型。</li></ul><p>延迟发布一周并不是灾难性的。错过重要会议可能是灾难性的，但往往不是。</p><p>大多数截止日期都是软截止日期，而非最后期限。软截止日期表示希望在特定时间内完成某项功能。它们很重要，但你不应该以牺牲代码健康为前提来达到。</p><p>如果您的发布周期很长（几周），那么在下一个周期之前就可能会牺牲代码审查质量来获取功能。然而，如果重复这种模式，往往会给项目建立压倒性技术债务。如果开发人员在周期结束时经常提交 CL，只需要进行表面评审就必须“进入”，那么团队应该修改其流程，以便在周期的早期发生大的功能变更，并有足够的时间进行良好的审查。</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解Redis基本数据结构及设计策略</title>
    <link href="/Redis/2022/05/10/%E7%90%86%E8%A7%A3Redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/Redis/2022/05/10/%E7%90%86%E8%A7%A3Redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>Redis内置了5种对外开放的数据结构， 分别是字符串， 列表， 集合， 有序集合以及哈希对象。 每一种数据结构的底层实现都会由存入的数据产生动态变化， 这也是Redis具有极佳吞吐量的原因之一。 本篇文章主要描述其基本数据结构的实现以及这些结构在使用时的注意事项。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Sting对象是Redis中使用最为广泛的数据结构， 不管是存储的Key， 还是Value， 都绕不开String对象。</p><p>Redis并没有直接使用C语言中传统的字符数组来实现字符串， 而是对其进行了一层包装， 称为简单动态字符串(Simple Dynamic String, SDS)。</p><p>首先对C语言中的字符串进行一个简单的介绍， 毕竟没有对比就没有伤害。 C语言是使用一个以<code>\0</code>结尾的字符数组来表示字符串的。 当我们想要判断一个字符串的长度时， C会对数组进行遍历， 直到发现<code>\0</code>标识为止。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">int main() &#123;    char data[] &#x3D; &quot;hello&quot;;    printf(&quot;%d&quot;, strlen(data));  &#x2F;&#x2F; 输出为5    printf(&quot;%d&quot;, sizeof(data));  &#x2F;&#x2F; 输出为6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之所以<code>sizeof</code>函数对数组调用的结果为6， 是因为在数组末尾保存了<code>\0</code>, 即<code>null</code>这个标识位。 那么问题就来了， 如果我们有一个字符串是<code>hello\0hello</code>的话， C语言只会把它当作是<code>hello</code>字符串对待。</p><p>基于这个问题， SDS结构对字符数组的使用长度， 以及空闲长度进行了记录， 避免此类问题的发生:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">struct sdshdr &#123;    int len;    int free;    char buf[];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样一来首先能够在O(1)的时间内获取字符串长度， 而C字符串则需要O(N)的时间复杂度。 并且在字符串拼接时， 能够避免缓冲区溢出问题。</p><h3 id="字符串对象以及常用命令"><a href="#字符串对象以及常用命令" class="headerlink" title="字符串对象以及常用命令"></a>字符串对象以及常用命令</h3><p>字符串对象的编码可以是int, embstr或者是raw， 这里的字符串对象和SDS有着本质的不同。 SDS是Redis底层的一种字符串实现方式， 而字符串对象则是用户在实际使用过程中产生的对象， 可以理解为SDS是字符串对象的一种组成方式。</p><p>在使用<code>set age 1</code>的命令之后， 由于<code>age</code>的值为整型， 没有必要保存成为一个字符串， 所以在Redis内部直接使用整型来进行保存。</p><p>对于小于39个字符的字符串对象， Redis采用一次分配内存的方式， 将其保存为embstr类型的字符串对象。 如果字符串字符数量大于39， 则采用两次分配内存的方式， 将其保存为raw类型的字符串对象。 数据的长度是Redis对数据结构优化的唯一指标。</p><h3 id="字符串常用命令"><a href="#字符串常用命令" class="headerlink" title="字符串常用命令"></a>字符串常用命令</h3><ol><li>设置值</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">set key value [ex seconds] [px milliseconds] [nx|xx]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>ex</code>和<code>px</code>代表了两种时间单位的过期时间， 前者表示秒级过期时间， 后者则代表毫秒级过期时间。</p><p><code>nx</code>和<code>xx</code>是一个非常重要的选项。 <code>nx</code>表示当前键必须不存在才能够设置成功， 用于添加。 <code>xx</code>则相反， 键必须存在才能够设置成功， 用于修改。 <code>nx</code>常常会被作为一种简易的分布式锁来对系统中各进程进行资源的约束。 因为Redis是一个单线程命令处理的系统， 所以如果有多个客户端同时执行<code>setnx</code>命令的话， 只有一个客户端会成功。</p><ol><li>计数</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">set access_number 0incr access_number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>同样是利用Redis单线程处理命令的机制， 可以以并发安全的来对某些key进行自增操作， 常用于访问量计数的基础组件。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表的内部编码有2种， ziplist(压缩列表)和linkedlist(链表)， 当列表的元素个数小于512， 或者是列表元素的值都小于64字节时， 会使用ziplist作为内部编码， 否则使用linkedlist。</p><p>ziplist主要是为了节省内存而开发的， 其内部实现可参考《Redis设计与实现》。 由于我们对列表结构的索引功能使用并不会很频繁， 添加和移除元素的操作要更多一些， 那么在这种场景下， 链表要比压缩列表更为高效。</p><h3 id="列表常用命令"><a href="#列表常用命令" class="headerlink" title="列表常用命令"></a>列表常用命令</h3><ol><li>添加元素</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lpush|rpush user_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>lpush</code>表示从左侧添加元素， <code>rpush</code>则是从右侧添加元素。</p><ol><li>删除元素</li></ol><p><code>rpop</code>和<code>lpop</code>分别表示从右侧和左侧删除一个元素， 在客户端操作的比较多。 更为重要的是阻塞操作<code>brpop</code>以及<code>blpop</code>。 <code>brpop</code>表示阻塞的删除列表元素， 当列表为空时， 该命令将会被阻塞。 <code>lpush+brpop</code>是非常常用的组成消息队列的两个命令。</p><h2 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h2><p>哈希对象的内部编码同样有两个， 压缩列表以及字典。 字典的实现与Python相同， 由哈希数组实现， 并且哈希冲突采用拉链法解决。</p><p>这里想要提及的是字典对象的Rehash操作。 如果哈希数组的大小为512， 并且此时保存了1024个节点的话， 那么该哈希表的负载因子为:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">load_factor &#x3D; 1024 &#x2F; 512 &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>也就是说， 平均每个数组空间都保存了2个节点元素， 如果哈希算法比较糟糕的话， 很有可能出现下图的情况:</p><p>![img](<a href="https://file.note.0moe.cn/img/Screenshot">https://file.note.0moe.cn/img/Screenshot</a> from 2019-03-12 21-31-36.png)</p><p>此时的查询效率将会由O(1)转变为O(n)， 所以必须要对哈希数组进行扩容， 并对其中的节点进行Rehash操作。 那么问题来了， 该字典外部还在使用， 怎么做到安全， 稳定的Rehash操作呢？</p><p>Redis在字典结构中保存了两个数组， 记为<code>ht[0]</code>以及<code>ht[1]</code>， 其中<code>ht[1]</code>是专门为了Rehash而生的。</p><p>当Redis要对某个字典进行扩容Redis操作时， 首先为<code>ht[1]</code>数组分配足够的空间， 而后每次对字典的删改查的操作， 都会将<code>ht[0]</code>里面的元素重新rehash到<code>ht[1]</code>， 而添加操作则直接添加至<code>ht[1]</code>。 也就是说， 在rehash未完成之前， <code>ht[1]</code>保存了<code>ht[0]</code>的部分元素。 随着时间的推移， <code>ht[0]</code>里面的所有元素都被访问时， <code>ht[1]</code>也就有了全部的数据， rehash操作结束。</p><p>当然， 有时候字典里面的键可能很久不会被使用， 这样以来该键就不会被rehash到<code>ht[1]</code>数组中， 所以此时可以有一个外部的定时脚本来协助完成这个工作。</p><p>Redis通过渐进式Rehash， 多分数据冗余加上外部脚本的方式来完成字典数据的并发扩容。</p><h2 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h2><p><code>setex</code>可以使得某一个键在未来的某个时间上过期， 从而被Redis删除， 那么Redis是如何实现这个功能的呢？</p><p>通常来讲， 过期键删除策略有3种:</p><ul><li>定时删除: 为每一个键创建一个定时器， 让定时器在键的过期时间将要来临时 ， 立即执行对键的删除操作。</li><li>惰性删除: 对于过期键不做任何处理， 而是再下一次获取该键时检查其过期时间。 如果键过期了再删除。</li><li>定时脚本: 定时脚本对数据库中所有的键进行定时扫描， 发现过期的键则直接删除。</li></ul><p>为每一个键创建定时器的代价太大， 极为浪费服务器资源。 所以Redis采用的是惰性删除+定时脚本的方式来实现过期键的删除策略。</p><p>在开发中许多地方都会用到过期这个功能， 例如电商订单45分钟内未支付则返回库存， 并将订单状态改为失效。 惰性删除+定时脚本的方案同样适于这些常规功能的开发。</p><h2 id="AOF重写缓冲区"><a href="#AOF重写缓冲区" class="headerlink" title="AOF重写缓冲区"></a>AOF重写缓冲区</h2><p>AOF文件类似于MySQL的binlog， 将所有数据的修改， 添加以及删除操作均写入<code>appendonly.aof</code>文件中， 其目的就是将内存数据持久化至磁盘， 便于数据在灾难时的恢复。</p><p>将内存中持续产生的数据写入磁盘中有很多种方式， 比较常见的就是建立内存缓冲区， 每隔一段时间调用系统的<code>fsync</code>函数将数据一起写入磁盘中。 当然也可以每产生一个数据就写入磁盘， 但是这种方式效率比较低。 Redis所默认的刷盘方式是每秒将AOF缓冲区内的内容写入磁盘中。</p><p>![img](<a href="https://file.note.0moe.cn/img/Screenshot">https://file.note.0moe.cn/img/Screenshot</a> from 2019-03-13 09-45-10.png)</p><p>如果对列表对象执行了4次操作， 每次均添加一个元素:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lpush name_list &quot;bob&quot;lpush name_list &quot;qob&quot;lpush name_list &quot;wob&quot;lpush name_list &quot;rob&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时aof文件中将会产生4条记录。 随着时间的推移， aof文件将会变得越来越大， 此时就必须要对aof文件进行重写。 重写的方法也很直白， 像上面的4条命令， 完全可以使用一条命令完成:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lpush name_list &quot;bob&quot; &quot;qob&quot; &quot;wob&quot; &quot;rob&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>aof文件重写时也会和字典的扩容产生同样的问题: Redis仍然需要提供服务， 数据的修改不可能停止， 而aof文件重写也必须要进行， 这样一来就会导致数据不一致问题。</p><p>字典的扩容采取了一个冗余的扩容数组， 采用渐进式rehash的方式进行数据迁移。 那么在这里， 同样可以对数据进行冗余: 当重写开始时， 建立AOF重写缓冲区， 此时数据记录将会写入AOF缓冲区以及AOF重写缓冲区中。</p><p>![img](<a href="https://file.note.0moe.cn/img/Screenshot">https://file.note.0moe.cn/img/Screenshot</a> from 2019-03-13 10-03-20.png)</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://file.note.0moe.cn/img/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现具备 ACID 事务的分布式 KV 存储</title>
    <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/03/12/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%85%B7%E5%A4%87-ACID-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F-KV-%E5%AD%98%E5%82%A8/"/>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2022/03/12/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%85%B7%E5%A4%87-ACID-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F-KV-%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>F1&#x2F;Spanner 的论文于 2012 年发表，至今仍是世界上最先进的、规模最大的分布式数据库架构，毫无疑问对现代数据库设计产生了深远影响。其最大的亮点莫过于 TrueTime API，凭借原子钟和 GPS 的加持在全球范围实现了单调递增的时间戳，从而达到外部一致性；其次则是验证了分布式 MVCC 的高性能实现，为业界指明一条发展方向。</p><p>不过，<strong>论文对存储层实现只作了模糊的阐述</strong>：原文中说到 tablet 的实现类似于 Bigtable（复用了不少 Bigtable 的代码），底层基于 Colossus —— 继承 GFS 的下一代分布式文件系统。可以确定的一点是，存储层要为 read-only 和 read-write 事务提供支持：</p><ul><li><strong>read-only 事务</strong>: 读取最新或给定时间戳t<sub>read</sub>的快照，也就是 snapshot read</li><li><strong>read-write 事务</strong>：读取事务开始时间戳t<sub>tstart</sub>的快照，而写入操作在提交时间戳t<sub>tcommit</sub>生效</li></ul><p>本文从 F1&#x2F;Spanner 论文出发，结合开源实现 TiDB 和 CockroachDB，谈谈如何设计一个具备 ACID 事务存储层。本文假设读者阅读过原论文 <a href="https://research.google.com/archive/spanner.html">Spanner: Google’s Globally-Distributed Database</a>。</p><h2 id="数据的-KV-表示"><a href="#数据的-KV-表示" class="headerlink" title="数据的 KV 表示"></a>数据的 KV 表示</h2><p>F1&#x2F;Spanner 对外提供（半）关系型数据模型：每张表定义了一个或多个主键列，以及其他的非主键列。这和我们熟知的 SQL 关系型模型几乎一摸一样，唯一的不同是 schema 定义中必须含有主键。</p><p>F1&#x2F;Spanner 早期的设计中大量复用了 BigTable（开源实现即 HBase）的代码。回忆一下 BigTable 的数据模型：每一条数据包含 <code>(Key, Column, Timestamp)</code> 三个维度，满足我们需要的 MVCC 特性。从 BigTable 开始的确是个不错的选择。</p><p>不过，从性能上考虑 Bigtable 毕竟是分布式的 KV 存储系统，在存储这一层我们大可不用搞的那么复杂，分布式的问题例如 scale-out 和 replication 应当留给上层的 sharding 机制和 Paxos 解决。事实上，一个单机的存储引擎足矣。</p><p>Google 自家的 LSM-Tree + SSTable 的实现 LevelDB 是个可选项。它接口非常简单，是一个标准的 KV 存储，可以方便的在它基础上实现我们想要的数据模型。主要接口其实就是两个：</p><ul><li><code>Write(WriteBatch *)</code> 原子地写入一个 WriteBatch，包含一组 <code>Put(K, V)</code> 和 <code>Delete(K)</code> 操作</li><li><code>Iterator()</code> 及 <code>Seek()</code> 从指定位置开始顺序扫描读取 (K, V) 数据</li></ul><p>如何实现列和时间戳呢？举个例子，有如下数据表 <code>Accounts</code>。在数据库中，主键索引通常也是唯一的聚簇索引，它存放了真实的数据，而我们暂时不考虑其他索引。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">| UserID (PK) | Balance | LastModified ||-------------|---------|--------------|| Alice       | 20      | 2018-02-20   || Bob         | 10      | 2018-02-01   |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Spanner 内部使用 MVCC 机制，所以还有一个隐藏的时间戳维度：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">| UserID | Timestamp | Balance | LastModified ||--------|-----------|---------|--------------|| Alice  | 103       | 20      | 2018-02-20   || Alice  | 101       | 15      | 2018-01-20   || Bob    | 102       | 10      | 2018-02-01   |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上述数据表用 KV 模型存储，可以表示为</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">| Key                             | Value      ||---------------------------------|------------|| Accounts&#x2F;Alice&#x2F;Balance&#x2F;103      | 20         || Accounts&#x2F;Alice&#x2F;Balance&#x2F;101      | 15         || Accounts&#x2F;Alice&#x2F;LastModified&#x2F;103 | 2018-02-20 || Accounts&#x2F;Alice&#x2F;LastModified&#x2F;101 | 2018-01-20 || Accounts&#x2F;Bob&#x2F;Balance&#x2F;102        | 10         || Accounts&#x2F;Bob&#x2F;LastModified&#x2F;102   | 2018-02-01 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上表中 <code>/</code> 表示一个分隔符，真实情况要更复杂。Key 这样编码：从左到右依次是表名（因为可以有不止一张表）、主键字段、列的标识符、时间戳（通常倒序排列，Tips. 取反即可）。Value 则对应原表中的数据。</p><p>显然，对于半关系型数据一定能由表名、主键字段、列名唯一地确定一个值，所以这个编码方式能满足我们的要求。</p><blockquote><p>如果一张表只有主键怎么办呢？这种情况下可以为每个主键填充一个 placeholder 的 value 即可。</p></blockquote><h2 id="事务的原子性"><a href="#事务的原子性" class="headerlink" title="事务的原子性"></a>事务的原子性</h2><p>众所周知，事务具有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。其中一致性和持久性其实是数据库系统的特性，对于事务，我们更多讨论的是<strong>原子性</strong>和<strong>隔离性</strong>。</p><p>对于存储层而言，为上层提供原子性 commit 的接口是必须的功能。如何在 KV 存储的基础上实现原子性呢？以下思路是一种常见的方案：</p><ol><li>首先，准备一个<strong>开关</strong>，初始状态为 off，当我们把开关打开的那一刻，意味着 commit 生效可见；</li><li>将所有变更以一种可回滚的方式（e.g. 不能覆盖现有的值）写入存储中。开关同时决定了其它 reader 的视图，由于开关还是 off 状态，现在写入的变更不会被其它事务看到。</li><li>之后，写入开关状态为 on，标志着 commit 的成功，新数据生效，即所谓 commit point。这个写入操作本身的原子性由 LevelDB 保证。</li><li>最后，清除掉中间状态（比如第 2 步中的临时数据）并写入最终的数据。这一步可以异步的完成，因为在第 3 步中事实上 commit 已经成功了，无需等待。</li></ol><p><img src="https://file.note.0moe.cn/img/commit-4-steps.svg" alt="img"></p><p>保证原子性的关键在于 commit point。例如，在单机数据库中，commit point 是 commit 的 redo-log 写入磁盘的一瞬间；在 XA 两阶段提交中，commit point 是协调器将事务状态置为 Committed 的一瞬间。</p><p>在我们的存储中，commit point 也就是第 3 步的写入操作。如果提交过程意外终止在 commit point 之前，我们会在读取时发现第 2 步中的临时写入，然后轻松地清除它；如果意外终止在 commit point 之后，部分临时状态没有被清除，只需继续执行 4 即可。</p><p>上述只是一个解决问题的思路。具体的解决方案可以参考 Percolator 的事务实现。这同时也是 TiDB 的做法，CockroachDB 做法略有不同，但同样遵从这个模式。</p><h3 id="Percolator-事务方案"><a href="#Percolator-事务方案" class="headerlink" title="Percolator 事务方案"></a>Percolator 事务方案</h3><p>Percolator 是 Google 早期的分布式事务解决方案，用于进行大规模增量数据处理。Percolator 在 BigTable 基础上基于 2PL 思想实现了分布式事务。这个算法很简单，你可以把它看作是是封装了一系列 BigTable 的 API 访问（本身无状态），所以可以容易地移植到 KV 存储模型上。</p><p>Percolator 事务模型基于单调递增的时间戳，来源于集群中唯一的 timestamp oracle。每个事务拥有提交时间戳 t<sub>tcommit</sub> 和开始时间戳t<sub>start</sub>。Percolator 事务模型和之前说到的 write-read 事务一致：事务中总是读取 t<sub>start</sub>时的 snapshot，而写入则全部在t<sub>tcommit</sub>生效。这也意味着事务中所有写入都被 buffer 到最后进行，不支持类似于 read-write-read 这样的模式。</p><p><img src="https://file.note.0moe.cn/img/percolator-transaction-model-read-write.jpg" alt="img"></p><p><em>如图，事务 2 看到的是事务 1 提交前的状态，而事务 3 看到的是事务 1、2 提交后的状态。</em></p><p>Percolator 基于 BigTable 的事务实现如下：</p><p>除了数据本身（bal:data 列）以外，我们给数据再加上两列：lock 和 write。</p><ul><li>write 列存放了一个<em>指针</em>，指向写入的 data 的时间戳</li><li>lock 列用于 2PL，加锁时也保存了 primary lock 的位置。</li></ul><p>primary lock 不仅代表当前行的锁状态，还兼任上文中“开关”的作用。通常选取第一个写入的数据作为 primary lock。</p><p>以下表为例。表中 <code>6: data @ 5</code> 表示：ts&#x3D;6 时事务提交，确定了 <code>Bob</code> 对应的值是 <code>5: $10</code>（所以推测出该事务 t<sub>start</sub>&#x3D;5）。其他事务读取时，为了避免读到 uncommitted 的数据，都会先从 write 列开始找，然后再读出其指向的 data。</p><p><img src="https://file.note.0moe.cn/img/percolator-commit-1.jpg" alt="img"></p><p>现在，用户要从 Bob 账户里转 $7 给 Joe，为此必须开启一个事务。ts&#x3D;7 时，转账事务开始，向 Bob 和 Joe 的 data 写入新的余额。</p><p>ts&#x3D;8 时，用户 commit 事务。事务的第一阶段（Prewrite）亦即是 2PL 的加锁阶段，先为 Bob 和 Joe 都加上锁。如下图所示，lock 不为空即代表加上了锁，其内容指向 primary lock 的位置。简单起见，不妨设第一条被锁的数据为 primary row。</p><p><img src="https://file.note.0moe.cn/img/percolator-commit-2.jpg" alt="img"></p><p>下一步很关键：<strong>清除 primary row 的 lock 并向 write 列写入新 data 的位置</strong>。这也就是所谓 commit point，这个写入的成功或失败决定了事务提交成功与否：</p><ul><li>若写入成功，则代表整个事务成功。之后会遍历所有加锁的行，解除 lock 并向 write 列写入新的 data 位置。这样一来，其他事务就能读到当前事务写入的数据。</li><li>否则，整个事务失败。之后会遍历所有加锁的行，解除 lock 并清除之前写入的 data，恢复原状。</li></ul><p>回到例子中，当 commit point 完成后，表的状态如下：</p><p><img src="https://file.note.0moe.cn/img/percolator-commit-3.jpg" alt="img"></p><p>解除 Joe 的 lock 并向 write 列写入新 data 的位置，至此事务 commit 完成：</p><p><img src="https://file.note.0moe.cn/img/percolator-commit-4.jpg" alt="img"></p><p>Commit point 这一步本身的原子性由 BigTable 行事务保证。对于 commit point 前后的其他操作，如果系统当机重启，恢复线程可以通过检查 commit point 操作的结果，来确定该 roll forward 还是 roll back。具体而言：</p><ul><li>通过 lock 找到 primary lock，如果已经解除，说明 commit point 已经完成，需要 roll forward 事务。</li><li>否则，如果 primary lock 还在，说明 commit point 还没到，只能 roll back 事务。</li></ul><p>于是，通过 2PL，我们成功地在 BigTable 的行级事务基础上实现了表级事务。</p><p>上述过程很容易的能映射到 KV 存储模型上。按照前一节描述的方法，将 lock 和 write 列都视作普通的列即可。这里不再赘述。</p><h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><p>上述的讨论只考虑了单个事务的原子性保证——如何<strong>确保</strong>能从从中间状态恢复到未提交或已提交的状态，而没有考虑多线程并发的情况。如果同时有多个 client 在运行多个事务，如何保证严格互相隔离？（Serializable级别）</p><p>Percolator 是一个典型的 Snapshot Isolation 实现。Percolator 包含一个被称为 Strict-SI 的改进：在事务 commit 中，如果发现有一个高于t<sub>start</sub>的版本出现，则放弃 commit。这能避免 lost update 问题。但是 write-skew 问题依然存在。</p><p>F1&#x2F;Spanner 提供 Serializable 隔离性保证。相应的算法被称为 Serializable Snapshot Isolation (SSI)。</p><h3 id="冲突图理论"><a href="#冲突图理论" class="headerlink" title="冲突图理论"></a>冲突图理论</h3><p>首先对以上问题建模。考虑两个事务对同一条数据先后发生两次读或写操作，于是有 4 种情况：</p><ul><li>Read-Read：这是OK的，它不会引起冲突；</li><li>Read-Write：后发生的操作覆盖了前一个读的数据，这是一种冲突；</li><li>Write-Read：读到另一个事务的写入，这是一种冲突。</li><li>Write-Write：即覆盖写，这是一种冲突。</li></ul><p>上述三种冲突的情况，并不是一定会导致问题。举个例子：事务T<sub>2</sub>仅仅是覆盖了事务T<sub>1</sub>写入的数据，那么T<sub>1</sub>和T<sub>2</sub>仍然是符合 serializable 的，只要逻辑上认为T<sub>2</sub>发生在T<sub>1</sub>之后。</p><p>哪些情况会违反 serializable 呢？简单来说，如果冲突A迫使我们规定T<sub>1</sub>先于T<sub>2</sub>，冲突B迫使我们规定 T<sub>2</sub> 先于T<sub>1</sub>，这个因果关系就没法成立了，T<sub>1</sub>、T<sub>2</sub>无法以任何方式串行化。形式化的说：<strong>以所有事务 T作为节点、以所有冲突 C作为有向边构成一张有向图（这被称为冲突图或依赖图），如果这张图是有向无环图（DAG）则满足 serializable；否则（有环）不满足</strong>。</p><p>举个例子：</p><p>这是一个有向无环图，T<sub>1</sub>、T<sub>2</sub>、T<sub>3</sub> 满足 serializable。</p><p><img src="https://file.note.0moe.cn/img/serializable-1.jpg" alt="img"></p><p>这是一个有环的图，T<sub>1</sub>、T<sub>2</sub>、T<sub>3</sub> 无法被串行化。</p><p><img src="https://file.note.0moe.cn/img/serializable-2.jpg" alt="img"></p><p>图论告诉我们，如果一张图是 DAG，<strong>等价于</strong>我们能为它进行拓扑排序，即给每个节点 assign 一个编号，使得所有边都是从编号小的节点指向编号大的。换而言之，<strong>如果我们能给每个节点 assign 一个这样的编号，则可以反推出原图是 DAG，进而证明 T 集合满足 serializable</strong>。</p><blockquote><p>你可能已经隐约感觉到，这个编号和事务发生的顺序有关！事实上，编号代表 serializable 后的逻辑顺序，大多数时候，这个顺序和真实的时间顺序都是一致的。</p><p>Spanner 中强调自己满足的是比 serializable 更强的一致性：linearizable，说的就是不仅能序列化，而且序列化的“逻辑顺序”和时间上的“物理顺序”也一致。</p></blockquote><h3 id="Serializable-Snapshot-Isolation-SSI"><a href="#Serializable-Snapshot-Isolation-SSI" class="headerlink" title="Serializable Snapshot Isolation (SSI)"></a>Serializable Snapshot Isolation (SSI)</h3><p>不妨把事务开始的时间戳 t<sub>start</sub> 作为这个编号。将上述约束条件略微加强一些，就得到了简单有效的判断法则：<strong>对于冲突 T<sub>1</sub>→T<sub>2</sub>，如果时间戳满足 T<sub>1</sub>&lt;T<sub>2</sub>则允许发生；如果 T<sub>1</sub>&gt;T<sub>2</sub>则终止事务。</strong></p><p>具体的来说，对于三种冲突，分别用以下方式处理：</p><ul><li><strong>Write-Read 冲突</strong>：感谢 MVCC，这是不会发生的，在 Percolator 的事务模型中，读操作一定是从一个过去时间点的 snapshot 上读取，而不会读到一个正在进行中事务的脏数据。（但是 MVCC 会引发另一个问题——staled read。见下文）</li><li><strong>Write-Write 冲突</strong>：如果 Write 发生的时候，出现了一条 t<sub>start</sub> 比较大的记录，则终止写事务。</li></ul><blockquote><p>Percolator 的 SI 实现使用了更强的约束：如果出现另一条比开始时间大的记录，无论其时间戳如何都会终止当前提交，这与 SSI 的机制有所区别。</p><p>由于 SI 无法完全避免 Read-Write 冲突（例如 write-skew 问题），所以在 Write-Write 冲突的处理上更为激进；但 SSI 已经解决了 Read-Write 冲突检测，不必用更强的约束。</p></blockquote><ul><li><strong>Read-Write 冲突</strong>：为了知道 Write 和另一个事务的 Read 冲突，必须要以某种方式记录下所有被读过的数据、以及读取事务的 t<sub>start</sub> 。这通常用范围锁（range lock）来实现——将所有查询的 TableScan 范围记录在内存中，如果某一条写入的数据满足某个 where 条件，则有必要检查一下二者的时间戳先后顺序。如果不满足上述判断法则，需要终止写事务。</li></ul><p><img src="https://ericfu.me/images/2018/03/read-write-conflict-1.jpg" alt="img"></p><ul><li>由于 MVCC 的存在，<strong>Read-Write 冲突</strong>还有另一种形式：T<sub>2</sub> 的 Read 发生地更迟，但是由于 MVCC 它读到的是 T<sub>1</sub> 写之前的值（staled read），而且这里 T<sub>1</sub> 先于T<sub>2</sub> 从而构成 Read-Write 冲突。</li></ul><p><img src="https://ericfu.me/images/2018/03/read-write-conflict-2.jpg" alt="img"></p><p>对此，一个简单的解决方案是：如果T<sub>2</sub>发现 T<sub>1</sub> 写入的中间数据（lock），则立即终止自己。经典 SSI 的做法是，在 T<sub>2</sub> commit 时如果发现 T<sub>1</sub> 已经 commit 则放弃本次提交。</p><p>综上，通过给每个事务赋予一个时间戳，并保证每个冲突都符合时间戳顺序，达到 serializable 隔离级别。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>将 <code>(Table, Key, Column, Timestamp)</code> 作为 Key 的编码，从而把（半）关系型数据存储在 KV 引擎中；</li><li>用两阶段锁（2PL）的方式在 KV 引擎上实现事务的原子性提交。</li><li>禁止冲突违反时间戳先后顺序，从而保证 serializable 的隔离性。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://research.google.com/archive/spanner.html">Spanner: Google’s Globally-Distributed Database (OSDI’12)</a></li><li><a href="https://research.google.com/pubs/pub36726.html">Large-scale Incremental Processing Using Distributed Transactions and Notifications - USENIX 2010 - Daniel Peng, Frank Dabek</a></li><li><a href="https://www.cockroachlabs.com/blog/how-cockroachdb-distributes-atomic-transactions/">How CockroachDB Does Distributed, Atomic Transactions - Cockroach Labs</a></li><li><a href="https://www.cockroachlabs.com/blog/serializable-lockless-distributed-isolation-cockroachdb/">Serializable, Lockless, Distributed: Isolation in CockroachDB - Cockroach Labs</a></li><li>Designing Data‑Intensive Applications - Martin Kleppmann</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Akka构建无锁的并发</title>
    <link href="/Java/2022/01/03/%E4%BD%BF%E7%94%A8Akka%E6%9E%84%E5%BB%BA%E6%97%A0%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91/"/>
    <url>/Java/2022/01/03/%E4%BD%BF%E7%94%A8Akka%E6%9E%84%E5%BB%BA%E6%97%A0%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>写并发程序很难。我们不得不处理线程、锁和竞态条件等等，这个过程很容易出错，而且会导致程序代码难以阅读、测试和维护。</p><p>所以，很多人不倾向于使用多线程编程。取而代之的是，他们使用单线程进程，依赖外部服务（如数据库、队列等）处理所需的并发或异步操作。虽然这种方法在有些情况下是可行的，但还有很多其他情况不能奏效。很多实时系统——例如交易或银行业务应用，或实时游戏——等待一个单线程进程完成就太奢侈了（他们需要立即应答）。其他的一些对于计算或资源要求非常高的系统，如果在程序中不引入并行机制就会耗时很久（有些情况下可以达到几个小时或数天）。</p><p>常用的一种单线程方法（例如，在Node.js里广泛应用）是使用基于事件的非阻塞模式。虽然这种方法可以避免上下文切换、锁和阻塞，的确能提高性能，但还是不能解决并发使用多个处理器（需要启动和协调多个独立的处理器）的问题。</p><p>那么，这是不是意味着为了构建一个并发程序，除了深入到线程、锁和竞态条件之外没有别的选择呢？</p><p>感谢Akka框架，它为我们提供了一种选择。</p><h2 id="Akka框架是什么"><a href="#Akka框架是什么" class="headerlink" title="Akka框架是什么"></a>Akka框架是什么</h2><p><em>这篇文章介绍了Akka并仔细研究它如何帮助并简化分布式并发应用的实现。</em></p><p>Akka是JVM（Java虚拟机，下同）平台上构建高并发、分布式和容错应用的工具包和运行时。Akka用Scala语言写成，同时提供了Scala和Java的开发接口。</p><p>Akka处理并发的方法基于Actor模型。在基于Actor的系统里，所有的事物都是Actor，就好像在面向对象设计里面所有的事物都是对象一样。但是有一个重要区别——特别是和我们的讨论相关的——那就是Actor模型是作为一个并发模型设计和架构的，而面向对象模式则不是。更具体一点，在Scala的actor系统里，actor互相交互并共享信息但并不对交互顺序作出预设。Actor之间共享信息和发起任务的机制是消息传递。</p><p><em>创建和调度线程、接收和分发消息以及处理竞态条件和同步的所有复杂性，都委托给框架，框架的处理对应用来说是透明的。</em></p><p>Akka在多个actor和下面的系统之间建立了一个层次（layer），这样一来，actor只需要处理消息就可以了。创建和调度线程、接收和分发消息以及处理竞态条件和同步的所有复杂性，都委托给框架，框架的处理对应用来说是透明的。</p><p>Actor严格遵守<code>响应式声明</code>。响应式应用的目标是通过满足以下一个或多个条件来代替传统的多线程应用：</p><ul><li>事件驱动。使用Actor，代码可以异步处理请求并用独占的方式执行非阻塞操作。</li><li>可伸缩性。在Akka里，不修改代码就增加节点是可能的，感谢消息传递和本地透明性（location transparency）。</li><li>高弹性。任何应用都会碰到错误并在某个时间点失败。Akka的“监管”（容错）策略为实现自愈系统提供了便利。</li><li>响应式。今天的高性能和快速响应应用需要对用户快速反馈，因此对于事件的响应需要非常及时。Akka的非阻塞、基于消息的策略可以帮助达成这个目标。</li></ul><h2 id="Akka中的Actor是什么"><a href="#Akka中的Actor是什么" class="headerlink" title="Akka中的Actor是什么"></a>Akka中的Actor是什么</h2><p>Actor本质上就是接收消息并采取行动处理消息的对象。它从消息源中解耦出来，只负责正确识别接收到的消息类型，并采取相应的行动。</p><p>收到一条消息之后，一个actor可能会采取以下一个或多个行动：</p><ul><li>执行一些本身的操作（例如进行计算、持久化数据、调用外部的Web服务等）</li><li>把消息或衍生消息转发给另外一个actor</li><li>实例化一个新的actor并把消息转发给它</li></ul><p>或者，如果这个actor认为合适的话，可能会完全忽略这条消息（也就是说，它可能选择不响应）。</p><p>为了实现一个actor，需要继承akka.actor.Actor这个trait（一般译为“特征”，译法有一定争议，文中保留原词）并实现receive方法。当一个消息发送给Actor时，它的receive方法会被（Akka）调用。典型的实现包括使用模式匹配（pattern matching）来识别消息类型并作出响应，参见下面的Akka示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>actor<span class="token punctuation">.</span></span>Actor<span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>actor<span class="token punctuation">.</span></span>Props<span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span>Logging<span class="token keyword">class</span> MyActor <span class="token keyword">extends</span> Actor <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> receive <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> value<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token keyword">=></span> doSomething<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"received unknown message"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>模式匹配是一种相对优雅的处理消息的技术，相比基于回调的实现，更倾向于产生“更整洁”以及更容易浏览的代码。例如，考虑一个简化版的HTTP请求&#x2F;响应实现。</p><p>首先，我们使用JavaScript中基于回调的方式实现：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">route<span class="token punctuation">(</span>url<span class="token punctuation">,</span> function<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> query <span class="token operator">=</span> buildQuery<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbCall<span class="token punctuation">(</span>query<span class="token punctuation">,</span> function<span class="token punctuation">(</span>dbResponse<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> wsRequest <span class="token operator">=</span> buildWebServiceRequest<span class="token punctuation">(</span>dbResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            wsCall<span class="token punctuation">(</span>wsRequest<span class="token punctuation">,</span> function<span class="token punctuation">(</span>wsResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sendReply<span class="token punctuation">(</span>wsResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在，我们把它和基于模式匹配的实现做个比较：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">msg <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> HttpRequest<span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> query <span class="token operator">=</span> buildQuery<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        dbCall<span class="token punctuation">(</span>query<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> DbResponse<span class="token punctuation">(</span>dbResponse<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> wsRequest <span class="token operator">=</span> buildWebServiceRequest<span class="token punctuation">(</span>dbResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        wsCall<span class="token punctuation">(</span>dbResponse<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> WsResponse<span class="token punctuation">(</span>wsResponse<span class="token punctuation">)</span> <span class="token keyword">=></span> sendReply<span class="token punctuation">(</span>wsResponse<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>虽然基于回调的JavaScript代码更紧凑，但确实更难以阅读和浏览。相比而言，基于模式匹配的代码对于需要考虑哪些情况、每种情况都是怎么处理的写法更加清晰。</p><h2 id="Actor系统"><a href="#Actor系统" class="headerlink" title="Actor系统"></a>Actor系统</h2><p>把一个复杂的问题不断分解成更小规模的子问题通常是一种可靠的解决问题的技术。这个方法对于计算机科学特别有效（和单一职责原则一致），因为这样容易产生整洁的、模块化的代码，产生的冗余很少甚至没有，而且维护起来相对容易。</p><p>在基于actor的设计里，使用这种技术有助于把actor的逻辑组织变成一个层级结构，也就是所谓的<code>Actor系统</code>。Actor系统提供了一个基础框架，通过这个系统actor之间可以进行交互。</p><p><img src="https://simg.open-open.com/show/e9d82ca845ca498915358e440bbdf33b.png" alt="toptal-blog-image-1395105846790.png"></p><p>在Akka里面，和actor通信的唯一方式就是通过<code>ActorRef</code>。<code>ActorRef</code>代表actor的一个引用，可以阻止其他对象直接访问或操作这个actor的内部信息和状态。消息可以通过一个<code>ActorRef</code>以下面的语法协议中的一种发送到一个actor：<br>-<code>!</code>(“告知”) —— 发送消息并立即返回<br>-<code>?</code>(“请求”) —— 发送消息并返回一个Future对象，代表一个可能的应答</p><p>每个actor都有一个收件箱，用来接收发送过来的消息。收件箱有多种实现方式可以选择，缺省的实现是先进先出（FIFO）队列。</p><p>在处理多条消息时，一个actor包含多个实例变量来保持状态。Akka确保actor的每个实例都运行在自己的轻量级线程里，并保证每次只处理一条消息。这样一来，开发者不必担心同步或竞态条件，而每个actor的状态都可以被可靠地保持。</p><p>Akka的Actor API中提供了每个actor执行任务所需要的有用信息：</p><ul><li><code>sender</code>:当前处理消息的发送者的一个<code>ActorRef</code>引用</li><li><code>context</code>：actor运行上下文相关的信息和方法（例如，包括实例化一个新actor的方法<code>actorOf</code>）</li><li><code>supervisionStrategy</code>：定义用来从错误中恢复的策略</li><li><code>self</code>：actor本身的<code>ActorRef</code>引用</li></ul><p><em>Akka确保actor的每个实例都运行在自己的轻量级线程里，并保证每次只处理一条消息。这样一来，开发者不必担心同步或竞态条件，而每个actor的状态都可以被可靠地保持。</em></p><p>为了把这些教程组织起来，让我们来考虑一个简单的例子：统计一个文本文件中单词的数量。</p><p>为了达到演示Akka示例的目的，我们把这个问题分解为两个子任务；即，（1）统计每行单词数量的“孩子”任务和（2）汇总这些单行单词数量、得到文件里单词总数的“父亲”任务。</p><p>父actor会从文件中装载每一行，然后委托一个子actor来计算某一行的单词数量。当子actor完成之后，它会把结果用消息发回给父actor。父actor会收到（每一行的）单词数量的消息并维持一个整个文件单词总数的计数器，这个计数器会在完成后返回给调用者。</p><p><em>（注意以下提供的Akka教程的例子只是为了教学目的，所以没有顾及所有的边界条件、性能优化等。同时，完整可编译版本的代码示例可以在这个<a href="https://www.open-open.com/misc/goto?guid=4959621495388689469">gist</a>中找到）</em></p><p>让我们首先看一个子类<code>StringCounterActor</code>的示例实现：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> ProcessStringMsg<span class="token punctuation">(</span>string<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">class</span> StringProcessedMsg<span class="token punctuation">(</span>words<span class="token operator">:</span> Integer<span class="token punctuation">)</span><span class="token keyword">class</span> StringCounterActor <span class="token keyword">extends</span> Actor <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> receive <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> ProcessStringMsg<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> wordsInLine <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length            sender <span class="token operator">!</span> StringProcessedMsg<span class="token punctuation">(</span>wordsInLine<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"Error: message not recognized"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个actor有一个非常简单的任务：接收<code>ProcessStringMsg</code>消息（包含一行文本），计算这行文本中单词的数量，并把结果通过一个<code>StringProcessedMsg</code>消息返回给发送者。请注意我们已经实现了我们的类，使用<code>！</code>（“告知”）方法发出<code>StringProcessedMsg</code>消息（发出消息并立即返回）。</p><p>好了，现在我们来关注父<code>WordCounterActor</code>类：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> StartProcessFileMsg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">class</span> WordCounterActor<span class="token punctuation">(</span>filename<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Actor <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> running <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> totalLines <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> linesProcessed <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> fileSender<span class="token operator">:</span> Option<span class="token punctuation">[</span>ActorRef<span class="token punctuation">]</span> <span class="token operator">=</span> None    <span class="token keyword">def</span> receive <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> StartProcessFileMsg<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// println just used for example purposes;</span>                <span class="token comment">// Akka logger should be used instead</span>                println<span class="token punctuation">(</span><span class="token string">"Warning: duplicate start message received"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                running <span class="token operator">=</span> <span class="token boolean">true</span>                fileSender <span class="token operator">=</span> Some<span class="token punctuation">(</span>sender<span class="token punctuation">)</span> <span class="token comment">// save reference to process invoker</span>                <span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Source<span class="token punctuation">.</span>_                fromFile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span>getLines<span class="token punctuation">.</span>foreach <span class="token punctuation">&#123;</span> line <span class="token keyword">=></span>                     context<span class="token punctuation">.</span>actorOf<span class="token punctuation">(</span>Props<span class="token punctuation">[</span>StringCounterActor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!</span> ProcessStringMsg<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                totalLines <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> StringProcessedMsg<span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>            result <span class="token operator">+=</span> words            linesProcessed <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>linesProcessed <span class="token operator">==</span> totalLines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fileSender<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">!</span> result<span class="token punctuation">)</span> <span class="token comment">// provide result to process invoker</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"message not recognized!"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里面有很多细节，我们来逐一考察（<em>注意讨论中所引用的行号基于以上代码示例</em>）。</p><p>首先，请注意要处理的文件名被传给了<code>WordCounterActor</code>的构造方法（第3行）。这意味着这个actor只会用来处理一个单独的文件。这样通过避免重置状态变量（<code>running</code>，<code>totalLines</code>，<code>linesProcessed</code>和<code>result</code>）也简化了开发者的编码工作，因为这个实例只使用一次（也就是说处理一个单独的文件），然后就丢弃了。</p><p>接下来，我们看到<code>WordCounterActor</code>处理了两种类型的消息：</p><ul><li><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">StartProcessFileMsg<pre class="line-numbers language-none"><code class="language-none">  （第12行）  - 从最初启动&#96;WordCounterActor&#96;的外部actor接收到的消息  - 收到这个消息之后，&#96;WordCounterActor&#96;首先检查它收到的是不是一个重复的请求  - 如果这个请求是重复的，那么&#96;WordCounterActor&#96;生成一个警告，然后就不做别的事了（第16行）  - 如果这不是一个重复的请求：    - &#96;WordCounterActor&#96;在&#96;fileSender&#96;实例变量（注意这是一个&#96;Option[ActorRef]&#96;而不是一个&#96;Option[Actor]&#96;）中保存发送者的一个引用。当处理最终的&#96;StringProcessedMsg&#96;（从一个&#96;StringCounterActor&#96;子类中接收，如下文所述）时，为了以后的访问和响应，这个&#96;ActorRef&#96;是必需的。    - 然后&#96;WordCounterActor&#96;读取文件，当文件中每行都装载之后，就会创建一个&#96;StringCounterActor&#96;，需要处理的包含行文本的消息就会传递给它（第21-24行）。- &#96;&#96;&#96;  StringProcessedMsg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>（第27行）- 当处理完成分配给它的行之后，从`StringCounterActor`处接收到的消息- 收到此消息之后，`WordCounterActor`会把文件的行计数器增加，如果所有的行都处理完毕（也就是说，当`totalLines`和`linesProcessed`相等），它会把最终结果发给原来的`fileSender`（第28-31行）。</code></pre></li></ul><p>再次需要注意的是，在Akka里，actor之间通信的唯一机制就是消息传递。消息是actor之间唯一共享的东西，而且因为多个actor可能会并发访问同样的消息，所以为了避免竞态条件和不可预期的行为，消息的不可变性非常重要。</p><p>因为Case class默认是不可变的并且可以和模式匹配无缝集成，所以用case class的形式来传递消息是很常见的。（Scala中的Case class就是正常的类，唯一不同的是通过模式匹配提供了可以递归分解的机制）。</p><p>让我们通过运行整个应用的示例代码来结束这个例子。</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Sample <span class="token keyword">extends</span> App <span class="token punctuation">&#123;</span>    <span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Timeout    <span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>duration<span class="token punctuation">.</span></span>_    <span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>ask</span>    <span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>dispatch<span class="token punctuation">.</span></span>ExecutionContexts<span class="token punctuation">.</span>_    <span class="token keyword">implicit</span> <span class="token keyword">val</span> ec <span class="token operator">=</span> global    <span class="token keyword">override</span> <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> system <span class="token operator">=</span> ActorSystem<span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> actor <span class="token operator">=</span> system<span class="token punctuation">.</span>actorOf<span class="token punctuation">(</span>Props<span class="token punctuation">(</span><span class="token keyword">new</span> WordCounterActor<span class="token punctuation">(</span>args<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">implicit</span> <span class="token keyword">val</span> timeout <span class="token operator">=</span> Timeout<span class="token punctuation">(</span><span class="token number">25</span> seconds<span class="token punctuation">)</span>        <span class="token keyword">val</span> future <span class="token operator">=</span> actor <span class="token operator">?</span> StartProcessFileMsg<span class="token punctuation">(</span><span class="token punctuation">)</span>        future<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> result <span class="token keyword">=></span>            println<span class="token punctuation">(</span><span class="token string">"Total number of words "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>            system<span class="token punctuation">.</span>shutdown        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>请注意这里的<code>?</code>方法是怎样发送一条消息的。用这种方法，调用者可以使用返回的<a href="https://www.open-open.com/misc/goto?guid=4959621495472346978">Future</a>对象，当完成之后可以打印出最后结果并最终通过停掉Actor系统退出程序。</p><h2 id="Akka的容错和监管者策略"><a href="#Akka的容错和监管者策略" class="headerlink" title="Akka的容错和监管者策略"></a>Akka的容错和监管者策略</h2><p>在actor系统里，每个actor都是其子孙的监管者。如果actor处理消息时失败，它就会暂停自己及其子孙并发送一个消息给它的监管者，通常是以异常的形式。</p><p><em>在Akka里面，监管者策略是定义你的系统容错行为的主要并且直接的机制。</em></p><p>在Akka里面，一个监管者对于从子孙传递上来的异常的响应和处理方式称作监管者策略。<a href="https://www.open-open.com/misc/goto?guid=4959621495559525271">监管者策略</a>是定义你的系统容错行为的主要并且直接的机制。</p><p>当一条消息指示有一个错误到达了一个监管者，它会采取如下行动之一：</p><ul><li><strong>恢复孩子（及其子孙），保持内部状态。</strong> 当孩子的状态没有被错误破坏，还可以继续正常工作的时候，可以使用这种策略。</li><li><strong>重启孩子（及其子孙），清除内部状态。</strong> 这种策略应用的场景和第一种正好相反。如果孩子的状态已经被错误破坏，在它可以被用到Future之前有必须要重置其内部状态。</li><li><strong>永久地停掉孩子（及其子孙）。</strong> 这种策略可以用在下面的场景中：错误条件不能被修正，但是并不影响后面执行的操作，这些操作可以在失败的孩子不存在的情况下完成。</li><li><strong>停掉自己并向上传播错误。</strong> 适用场景：当监管者不知道如何处理错误，就把错误传递给自己的监管者。</li></ul><p>而且，一个Actor可以决定是否把行动应用在失败的子孙上抑或是应用到它的兄弟上。有两种预定义的策略：</p><ul><li><code>OneForOneStrategy</code>：只把指定行动应用到失败的孩子上</li><li><code>AllForOneStrategy</code>：把指定行动应用到所有子孙上</li></ul><p>下面是一个使用<code>OneForOneStrategy</code>的简单例子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>actor<span class="token punctuation">.</span></span>OneForOneStrategy<span class="token keyword">import</span> <span class="token namespace">akka<span class="token punctuation">.</span>actor<span class="token punctuation">.</span></span>SupervisorStrategy<span class="token punctuation">.</span>_<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>duration<span class="token punctuation">.</span></span>_<span class="token keyword">override</span> <span class="token keyword">val</span> supervisorStrategy <span class="token operator">=</span>    OneForOneStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> _<span class="token operator">:</span> ArithmeticException <span class="token keyword">=></span> Resume        <span class="token keyword">case</span> _<span class="token operator">:</span> NullPointerException <span class="token keyword">=></span> Restart        <span class="token keyword">case</span> _<span class="token operator">:</span> IllegalArgumentException <span class="token keyword">=></span> Stop        <span class="token keyword">case</span> _<span class="token operator">:</span> Exception <span class="token keyword">=></span> Escalate<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果没有指定策略，那么就使用如下默认的策略：</p><ul><li>如果在初始化actor时出错，或者actor被结束（killed），那么actor就会停止(stopped)</li><li>如果有任何类型的异常出现，actor就会重启</li></ul><p>Akka提供的默认策略的实现如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">final</span> <span class="token keyword">val</span> defaultStrategy<span class="token operator">:</span> SupervisorStrategy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> defaultDecider<span class="token operator">:</span> Decider <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> _<span class="token operator">:</span> ActorInitializationException ⇒ Stop        <span class="token keyword">case</span> _<span class="token operator">:</span> ActorKilledException ⇒ Stop        <span class="token keyword">case</span> _<span class="token operator">:</span> Exception ⇒ Restart    <span class="token punctuation">&#125;</span>    OneForOneStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>defaultDecider<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Akka也考虑到对<a href="https://www.open-open.com/misc/goto?guid=4959621495559525271">定制化监管者策略</a>的实现，但正如Akka文档也提出了警告，这么做要小心，因为错误的实现会产生诸如actor系统被阻塞的问题（也就是说，其中的多个actor被永久挂起了）。</p><h2 id="本地透明性"><a href="#本地透明性" class="headerlink" title="本地透明性"></a>本地透明性</h2><p>Akka架构支持<a href="https://www.open-open.com/misc/goto?guid=4959621495646499516">本地透明性</a>，使得actor完全不知道他们接受的消息是从哪里发出来的。消息的发送者可能驻留在同一个JVM，也有可能是存在于其他的JVM（或者运行在同一个节点，或者运行在不同的节点）。Akka处理这些情况对于actor（也即对于开发者）来说是完全透明的。唯一需要说明的是跨越节点的消息必须要被序列化。</p><p><em>Akka架构支持本地透明性，使得actor完全不知道他们接受的消息是从哪里发出来的。</em></p><p>Actor系统设计的初衷，就是不需要任何专门的代码就可以运行在分布式环境中。Akka只需要一个配置文件（application.conf），用以说明发送消息到哪些节点。下面是配置文件的一个例子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">akka <span class="token punctuation">&#123;</span>    actor <span class="token punctuation">&#123;</span>        provider <span class="token operator">=</span> <span class="token string">"akka.remote.RemoteActorRefProvider"</span>    <span class="token punctuation">&#125;</span>    remote <span class="token punctuation">&#123;</span>        transport <span class="token operator">=</span> <span class="token string">"akka.remote.netty.NettyRemoteTransport"</span>        netty <span class="token punctuation">&#123;</span>            hostname <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>            port <span class="token operator">=</span> <span class="token number">2552</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="最后的一些提示"><a href="#最后的一些提示" class="headerlink" title="最后的一些提示"></a>最后的一些提示</h2><p>我们已经了解了Akka框架帮助完成并发和高性能的方法。然而，正如这篇教程指出的，为了充分发挥Akka的能力，在设计和实现系统时，有些要点值得考虑：</p><ul><li>我们应尽最大可能为每个actor都分配最小的任务（如上面讨论的，遵守单一职责原则）</li><li>Actor应该异步处理事件（也就是处理消息），不应该阻塞，否则就会发生上下文切换，影响性能。具体来说，最好是在一个Future对象里执行阻塞操作（例如IO），这样就不会阻塞actor，如：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">case</span> evt <span class="token keyword">=></span> blockingCall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// BAD</span><span class="token keyword">case</span> evt <span class="token keyword">=></span> Future <span class="token punctuation">&#123;</span>blockingCall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// GOOD</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>要确认你的消息都是不可变的，因为互相传递消息的actor都在它们自己的线程里并发运行。可变的消息很有可能导致不可预期的行为。</li><li>由于在节点之间发送的消息必须是可序列化的，所以必须要记住消息体越大，序列化、发送和反序列化所花费的时间就越多，这也会降低性能。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Akka用Scala语言写成，简化并为开发高并发、分布式和容错式应用提供了便利，对开发者隐藏了很大程度的复杂性。把Akka用好肯定需要了解比这个教程更多的内容，但是希望这里的介绍和示例能够引起你的注意并继续了解Akka。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/guobinhit/akka-guide">Akka 中文指南</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无锁设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性能队列——Disruptor</title>
    <link href="/Java/2021/12/04/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97%E2%80%94%E2%80%94Disruptor/"/>
    <url>/Java/2021/12/04/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97%E2%80%94%E2%80%94Disruptor/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I&#x2F;O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。</p><p>目前，包括Apache Storm、Camel、Log4j 2在内的很多知名项目都应用了Disruptor以获取高性能。在美团技术团队它也有不少应用，有的项目架构借鉴了它的设计机制。本文从实战角度剖析了Disruptor的实现原理。</p><p>需要特别指出的是，这里所说的队列是系统内部的内存队列，而不是Kafka这样的分布式队列。另外，本文所描述的Disruptor特性限于3.3.4。</p><h2 id="Java内置队列"><a href="#Java内置队列" class="headerlink" title="Java内置队列"></a>Java内置队列</h2><p>介绍Disruptor之前，我们先来看一看常用的线程安全的内置队列有什么问题。Java的内置队列如下表所示。</p><table><thead><tr><th align="left">队列</th><th align="left">有界性</th><th align="left">锁</th><th align="left">数据结构</th></tr></thead><tbody><tr><td align="left">ArrayBlockingQueue</td><td align="left">bounded</td><td align="left">加锁</td><td align="left">arraylist</td></tr><tr><td align="left">LinkedBlockingQueue</td><td align="left">optionally-bounded</td><td align="left">加锁</td><td align="left">linkedlist</td></tr><tr><td align="left">ConcurrentLinkedQueue</td><td align="left">unbounded</td><td align="left">无锁</td><td align="left">linkedlist</td></tr><tr><td align="left">LinkedTransferQueue</td><td align="left">unbounded</td><td align="left">无锁</td><td align="left">linkedlist</td></tr><tr><td align="left">PriorityBlockingQueue</td><td align="left">unbounded</td><td align="left">加锁</td><td align="left">heap</td></tr><tr><td align="left">DelayQueue</td><td align="left">unbounded</td><td align="left">加锁</td><td align="left">heap</td></tr></tbody></table><p>队列的底层一般分成三种：数组、链表和堆。其中，堆一般情况下是为了实现带有优先级特性的队列，暂且不考虑。</p><p>我们就从数组和链表两种数据结构来看，基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要通过加锁的方式来保证线程安全；基于链表的线程安全队列分成LinkedBlockingQueue和ConcurrentLinkedQueue两大类，前者也通过锁的方式来实现线程安全，而后者以及上面表格中的LinkedTransferQueue都是通过原子变量compare and swap（以下简称“CAS”）这种不加锁的方式来实现的。</p><p>通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列。在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array&#x2F;heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。</p><h2 id="ArrayBlockingQueue的问题"><a href="#ArrayBlockingQueue的问题" class="headerlink" title="ArrayBlockingQueue的问题"></a>ArrayBlockingQueue的问题</h2><p>ArrayBlockingQueue在实际使用过程中，会因为加锁和伪共享等出现严重的性能问题，我们下面来分析一下。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>现实编程过程中，加锁通常会严重地影响性能。线程会因为竞争不到锁而被挂起，等锁被释放的时候，线程又会被恢复，这个过程中存在着很大的开销，并且通常会有较长时间的中断，因为当一个线程正在等待锁时，它不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行，例如发生了缺页错误、调度延迟或者其它类似情况，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，就会发生优先级反转。</p><p>Disruptor论文中讲述了一个实验：</p><ul><li>这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。</li><li>机器环境：2.4G 6核</li><li>运算： 64位的计数器累加5亿次</li></ul><p>|Method | Time (ms) | |— | —| |Single thread | 300| |Single thread with CAS | 5,700| |Single thread with lock | 10,000| |Single thread with volatile write | 4,700| |Two threads with CAS | 30,000| |Two threads with lock | 224,000|</p><p>CAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级。可见无锁速度最快。</p><p>单线程情况下，不加锁的性能 &gt; CAS操作的性能 &gt; 加锁的性能。</p><p>在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍。</p><p>综上可知，加锁的性能是最差的。</p><p><strong>关于锁和CAS</strong></p><p>保证线程安全一般分成两种方式：锁和原子变量。</p><p><strong>锁</strong></p><p><img src="https://p1.meituan.net/travelcube/9b6a41f7d8527df9730b7832b38ec4d5180025.png" alt="图1 通过加锁的方式实现线程安全"></p><p>图1 通过加锁的方式实现线程安全</p><p>采取加锁的方式，默认线程会冲突，访问数据时，先加上锁再访问，访问之后再解锁。通过锁界定一个临界区，同时只有一个线程进入。如上图所示，Thread2访问Entry的时候，加了锁，Thread1就不能再执行访问Entry的代码，从而保证线程安全。</p><p>下面是ArrayBlockingQueue通过加锁的方式实现的offer方法，保证线程安全。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>原子变量</strong></p><p>原子变量能够保证原子性的操作，意思是某个任务在执行过程中，要么全部成功，要么全部失败回滚，恢复到执行之前的初态，不存在初态和成功之间的中间状态。例如CAS操作，要么比较并交换成功，要么比较并交换失败。由CPU保证原子性。</p><p>通过原子变量可以实现线程安全。执行某个任务的时候，先假定不会有冲突，若不发生冲突，则直接执行成功；当发生冲突的时候，则执行失败，回滚再重新操作，直到不发生冲突。</p><p><img src="https://p0.meituan.net/travelcube/de0ced42337014947e7466db4d8f2d4d158395.png" alt="图2 通过原子变量CAS实现线程安全"></p><p>图2 通过原子变量CAS实现线程安全</p><p>如图所示，Thread1和Thread2都要把Entry加1。若不加锁，也不使用CAS，有可能Thread1取到了myValue&#x3D;1，Thread2也取到了myValue&#x3D;1，然后相加，Entry中的value值为2。这与预期不相符，我们预期的是Entry的值经过两次相加后等于3。</p><p>CAS会先把Entry现在的value跟线程当初读出的值相比较，若相同，则赋值；若不相同，则赋值执行失败。一般会通过while&#x2F;for循环来重新执行，直到赋值成功。</p><p>代码示例是AtomicInteger的getAndAdd方法。CAS是CPU的一个指令，由CPU保证原子性。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Atomically adds the given value to the current value. * * @param delta the value to add * @return the previous value */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> delta<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/** * Atomically sets the value to the given updated value * if the current value &#123;@code ==&#125; the expected value. * * @param expect the expected value * @param update the new value * @return true if successful. False return indicates that * the actual value was not equal to the expected value. */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在高度竞争的情况下，锁的性能将超过原子变量的性能，但是更真实的竞争情况下，原子变量的性能将超过锁的性能。同时原子变量不会有死锁等活跃性问题。</p><h3 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h3><p><strong>什么是共享</strong></p><p>下图是计算的基本结构。L1、L2、L3分别表示一级缓存、二级缓存、三级缓存，越靠近CPU的缓存，速度越快，容量也越小。所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核；L2大一些，也慢一些，并且仍然只能被一个单独的CPU核使用；L3更大、更慢，并且被单个插槽上的所有CPU核共享；最后是主存，由全部插槽上的所有CPU核共享。</p><p><img src="https://p1.meituan.net/travelcube/69ce8ffbe7a4ebee01c377dac174842d433755.png" alt="图3 计算机CPU与缓存示意图"></p><p>图3 计算机CPU与缓存示意图</p><p>当CPU执行运算的时候，它先去L1查找所需的数据、再去L2、然后是L3，如果最后这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。</p><p>另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。</p><p>下面是从CPU访问不同层级数据的时间概念:</p><table><thead><tr><th align="left">从CPU到</th><th align="left">大约需要的CPU周期</th><th align="left">大约需要的时间</th></tr></thead><tbody><tr><td align="left">主存</td><td align="left">-</td><td align="left">约60-80ns</td></tr><tr><td align="left">QPI 总线传输(between sockets, not drawn)</td><td align="left">-</td><td align="left">约20ns</td></tr><tr><td align="left">L3 cache</td><td align="left">约40-45 cycles</td><td align="left">约15ns</td></tr><tr><td align="left">L2 cache</td><td align="left">约10 cycles</td><td align="left">约3ns</td></tr><tr><td align="left">L1 cache</td><td align="left">约3-4 cycles</td><td align="left">约1ns</td></tr><tr><td align="left">寄存器</td><td align="left">1 cycle</td><td align="left">-</td></tr></tbody></table><p>可见CPU读取主存中的数据会比从L1中读取慢了近2个数量级。</p><p><strong>缓存行</strong></p><p>Cache是由很多个cache line组成的。每个cache line通常是64字节，并且它有效地引用主内存中的一块儿地址。一个Java的long类型变量是8字节，因此在一个缓存行中可以存8个long类型的变量。</p><p>CPU每次从主存中拉取数据时，会把相邻的数据也存入同一个cache line。</p><p>在访问一个long数组的时候，如果数组中的一个值被加载到缓存中，它会自动加载另外7个。因此你能非常快的遍历这个数组。事实上，你可以非常快速的遍历在连续内存块中分配的任意数据结构。</p><p>下面的例子是测试利用cache line的特性和不利用cache line的特性的效果对比。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meituan<span class="token punctuation">.</span></span><span class="token class-name">FalseSharing</span><span class="token punctuation">;</span> <span class="token comment">/** * @author gongming * @description * @date 16/6/4 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheLineEffect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//考虑一般缓存行大小是64字节，一个 long 类型占8字节</span>    <span class="token keyword">static</span>  <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> marked <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Loop times:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> marked<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         marked <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Loop times:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> marked<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在2G Hz、2核、8G内存的运行环境中测试，速度差一倍。</p><p>结果：</p><p>Loop times:30ms Loop times:65ms</p><p><strong>什么是伪共享</strong></p><p>ArrayBlockingQueue有三个成员变量： - takeIndex：需要被取走的元素下标 - putIndex：可被元素插入的位置的下标 - count：队列中元素的数量</p><p>这三个变量很容易放到一个缓存行中，但是之间修改没有太多的关联。所以每次修改，都会使之前缓存的数据失效，从而不能完全达到共享的效果。</p><p><img src="https://p0.meituan.net/travelcube/192e9b87b7a5b68cac352fdeb81dc93b161543.png" alt="图4 ArrayBlockingQueue伪共享示意图"></p><p>图4 ArrayBlockingQueue伪共享示意图</p><p>如上图所示，当生产者线程put一个元素到ArrayBlockingQueue时，putIndex会修改，从而导致消费者线程的缓存中的缓存行无效，需要从主存中重新读取。</p><p>这种无法充分使用缓存行特性的现象，称为伪共享。</p><p>对于伪共享，一般的解决方案是，增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meituan<span class="token punctuation">.</span></span><span class="token class-name">FalseSharing</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FalseSharing</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">ITERATIONS</span> <span class="token operator">=</span> <span class="token number">500L</span> <span class="token operator">*</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">100L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> arrayIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ValuePadding</span><span class="token punctuation">[</span><span class="token punctuation">]</span> longs<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">FalseSharing</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> arrayIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>arrayIndex <span class="token operator">=</span> arrayIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">runTest</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread num "</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">" duration = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token constant">NUM_THREADS</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token constant">NUM_THREADS</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            longs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValuePadding</span><span class="token punctuation">[</span><span class="token constant">NUM_THREADS</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> longs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                longs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValuePadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FalseSharing</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token constant">ITERATIONS</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                longs<span class="token punctuation">[</span>arrayIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ValuePadding</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">protected</span> <span class="token keyword">long</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p6<span class="token punctuation">,</span> p7<span class="token punctuation">;</span>            <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token keyword">protected</span> <span class="token keyword">long</span> p9<span class="token punctuation">,</span> p10<span class="token punctuation">,</span> p11<span class="token punctuation">,</span> p12<span class="token punctuation">,</span> p13<span class="token punctuation">,</span> p14<span class="token punctuation">;</span>            <span class="token keyword">protected</span> <span class="token keyword">long</span> p15<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ValueNoPadding</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// protected long p1, p2, p3, p4, p5, p6, p7;</span>            <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token comment">// protected long p9, p10, p11, p12, p13, p14, p15;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在2G Hz，2核，8G内存, jdk 1.7.0_45 的运行环境下，使用了共享机制比没有使用共享机制，速度快了4倍左右。</p><p>结果：</p><ul><li>Thread num 1 duration &#x3D; 447</li><li>Thread num 2 duration &#x3D; 463</li><li>Thread num 3 duration &#x3D; 454</li><li>Thread num 4 duration &#x3D; 464</li><li>Thread num 5 duration &#x3D; 561</li><li>Thread num 6 duration &#x3D; 606</li><li>Thread num 7 duration &#x3D; 684</li><li>Thread num 8 duration &#x3D; 870</li><li>Thread num 9 duration &#x3D; 823</li></ul><p>把代码中ValuePadding都替换为ValueNoPadding后的结果：</p><ul><li>Thread num 1 duration &#x3D; 446</li><li>Thread num 2 duration &#x3D; 2549</li><li>Thread num 3 duration &#x3D; 2898</li><li>Thread num 4 duration &#x3D; 3931</li><li>Thread num 5 duration &#x3D; 4716</li><li>Thread num 6 duration &#x3D; 5424</li><li>Thread num 7 duration &#x3D; 4868</li><li>Thread num 8 duration &#x3D; 4595</li><li>Thread num 9 duration &#x3D; 4540</li></ul><p>备注：在jdk1.8中，有专门的注解@Contended来避免伪共享，更优雅地解决问题。</p><h2 id="Disruptor的设计方案"><a href="#Disruptor的设计方案" class="headerlink" title="Disruptor的设计方案"></a>Disruptor的设计方案</h2><p>Disruptor通过以下设计来解决队列速度慢的问题：</p><ul><li>环形数组结构</li></ul><p>为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。</p><ul><li>元素位置定位</li></ul><p>数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。</p><ul><li>无锁设计</li></ul><p>每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。</p><p>下面忽略数组的环形结构，介绍一下如何实现无锁设计。整个过程通过原子变量CAS，保证操作的线程安全。</p><h3 id="一个生产者"><a href="#一个生产者" class="headerlink" title="一个生产者"></a>一个生产者</h3><p><strong>写数据</strong></p><p>生产者单线程写数据的流程比较简单：</p><ol><li>申请写入m个元素；</li><li>若是有m个元素可以入，则返回最大的序列号。这儿主要判断是否会覆盖未读的元素；</li><li>若是返回的正确，则生产者开始写入元素。</li></ol><p><img src="https://p1.meituan.net/travelcube/e71c1449273361ec413fffc7b0bf5507208689.png" alt="图5 单个生产者生产过程示意图"></p><p>图5 单个生产者生产过程示意图</p><h2 id="多个生产者"><a href="#多个生产者" class="headerlink" title="多个生产者"></a>多个生产者</h2><p>多个生产者的情况下，会遇到“如何防止多个线程重复写同一个元素”的问题。Disruptor的解决方法是，每个线程获取不同的一段数组空间进行操作。这个通过CAS很容易达到。只需要在分配元素的时候，通过CAS判断一下这段空间是否已经分配出去即可。</p><p>但是会遇到一个新问题：如何防止读取的时候，读到还未写的元素。Disruptor在多个生产者的情况下，引入了一个与Ring Buffer大小相同的buffer：available Buffer。当某个位置写入成功的时候，便把availble Buffer相应的位置置位，标记为写入成功。读取的时候，会遍历available Buffer，来判断元素是否已经就绪。</p><p>下面分读数据和写数据两种情况介绍。</p><h3 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h3><p>生产者多线程写入的情况会复杂很多：</p><ol><li>申请读取到序号n；</li><li>若writer cursor &gt;&#x3D; n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置；</li><li>消费者读取元素。</li></ol><p>如下图所示，读线程读到下标为2的元素，三个线程Writer1&#x2F;Writer2&#x2F;Writer3正在向RingBuffer相应位置写数据，写线程被分配到的最大元素下标是11。</p><p>读线程申请读取到下标从3到11的元素，判断writer cursor&gt;&#x3D;11。然后开始读取availableBuffer，从3开始，往后读取，发现下标为7的元素没有生产成功，于是WaitFor(11)返回6。</p><p>然后，消费者读取下标从3到6共计4个元素。</p><p><img src="https://p0.meituan.net/travelcube/99c603494ea90c9535e165579daf340a161527.png" alt="图6 多个生产者情况下，消费者消费过程示意图"></p><p>图6 多个生产者情况下，消费者消费过程示意图</p><h3 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h3><p>多个生产者写入的时候：</p><ol><li>申请写入m个元素；</li><li>若是有m个元素可以写入，则返回最大的序列号。每个生产者会被分配一段独享的空间；</li><li>生产者写入元素，写入元素的同时设置available Buffer里面相应的位置，以标记自己哪些位置是已经写入成功的。</li></ol><p>如下图所示，Writer1和Writer2两个线程写入数组，都申请可写的数组空间。Writer1被分配了下标3到下表5的空间，Writer2被分配了下标6到下标9的空间。</p><p>Writer1写入下标3位置的元素，同时把available Buffer相应位置置位，标记已经写入成功，往后移一位，开始写下标4位置的元素。Writer2同样的方式。最终都写入完成。</p><p><img src="https://p1.meituan.net/travelcube/5e06841b1bba4dcf1d3fac169734ba36133983.png" alt="图7 多个生产者情况下，生产者生产过程示意图"></p><p>图7 多个生产者情况下，生产者生产过程示意图</p><p>防止不同生产者对同一段空间写入的代码，如下所示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InsufficientCapacityException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"n must be > 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">long</span> current<span class="token punctuation">;</span>    <span class="token keyword">long</span> next<span class="token punctuation">;</span>     <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        current <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> current <span class="token operator">+</span> n<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasAvailableCapacity</span><span class="token punctuation">(</span>gatingSequences<span class="token punctuation">,</span> n<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">InsufficientCapacityException</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>cursor<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过do&#x2F;while循环的条件cursor.compareAndSet(current, next)，来判断每次申请的空间是否已经被其他生产者占据。假如已经被占据，该函数会返回失败，While循环重新执行，申请写入空间。</p><p>消费者的流程与生产者非常类似，这儿就不多描述了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Disruptor通过精巧的无锁设计实现了在高并发情形下的高性能。</p><p>在美团内部，很多高并发场景借鉴了Disruptor的设计，减少竞争的强度。其设计思想可以扩展到分布式场景，通过无锁设计，来提升服务性能。</p><p>使用Disruptor比使用ArrayBlockingQueue略微复杂，为方便读者上手，增加代码样例。</p><p>代码实现的功能：每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端。详细逻辑请细读代码。</p><p>以下代码基于3.3.4版本的Disruptor包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meituan<span class="token punctuation">.</span></span><span class="token class-name">Disruptor</span><span class="token punctuation">;</span><span class="token comment">/** * @description disruptor代码样例。每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端 */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lmax<span class="token punctuation">.</span>disruptor<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lmax<span class="token punctuation">.</span>disruptor<span class="token punctuation">.</span>dsl<span class="token punctuation">.</span></span><span class="token class-name">Disruptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>lmax<span class="token punctuation">.</span>disruptor<span class="token punctuation">.</span>dsl<span class="token punctuation">.</span></span><span class="token class-name">ProducerType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisruptorMain</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 队列中的元素</span>        <span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 生产者的线程工厂</span>        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"simpleThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// RingBuffer生产工厂,初始化RingBuffer的时候使用</span>        <span class="token class-name">EventFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Element</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 处理Event的handler</span>        <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> sequence<span class="token punctuation">,</span> <span class="token keyword">boolean</span> endOfBatch<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Element: "</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 阻塞策略</span>        <span class="token class-name">BlockingWaitStrategy</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockingWaitStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 指定RingBuffer的大小</span>        <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 创建disruptor，采用单生产者模式</span>        <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> bufferSize<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">ProducerType</span><span class="token punctuation">.</span><span class="token constant">SINGLE</span><span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置EventHandler</span>        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动disruptor的线程</span>        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> ringBuffer <span class="token operator">=</span> disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取下一个可用位置的下标</span>            <span class="token keyword">long</span> sequence <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">// 返回可用位置的元素</span>                <span class="token class-name">Element</span> event <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 设置该位置元素的值</span>                event<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span>            <span class="token punctuation">&#123;</span>                ringBuffer<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>以下面这些模式测试性能:</p><p><img src="https://p1.meituan.net/travelcube/ada37da4ad62709ab67d7a32147cb19a306409.png" alt="img"></p><p>吞吐量测试数据（每秒的数量）如下。</p><p>环境： - CPU:Intel Core i7 860 @ 2.8 GHz without HT - JVM:Java 1.6.0_25 64-bit - OS:Windows 7</p><table><thead><tr><th align="left">-</th><th align="left">ABQ</th><th align="left">Disruptor</th></tr></thead><tbody><tr><td align="left">Unicast: 1P – 1C</td><td align="left">5,339,256</td><td align="left">25,998,336</td></tr><tr><td align="left">Pipeline: 1P – 3C</td><td align="left">2,128,918</td><td align="left">16,806,157</td></tr><tr><td align="left">Sequencer: 3P – 1C</td><td align="left">5,539,531</td><td align="left">13,403,268</td></tr><tr><td align="left">Multicast: 1P – 3C</td><td align="left">1,077,384</td><td align="left">9,377,871</td></tr><tr><td align="left">Diamond: 1P – 3C</td><td align="left">2,113,941</td><td align="left">16,143,613</td></tr></tbody></table><p>环境：</p><ul><li>CPU:Intel Core i7-2720QM</li><li>JVM:Java 1.6.0_25 64-bit</li><li>OS:Ubuntu 11.04</li></ul><table><thead><tr><th align="left">-</th><th align="left">ABQ</th><th align="left">Disruptor</th></tr></thead><tbody><tr><td align="left">Unicast: 1P – 1C</td><td align="left">4,057,453</td><td align="left">22,381,378</td></tr><tr><td align="left">Pipeline: 1P – 3C</td><td align="left">2,006,903</td><td align="left">15,857,913</td></tr><tr><td align="left">Sequencer: 3P – 1C</td><td align="left">2,056,118</td><td align="left">14,540,519</td></tr><tr><td align="left">Multicast: 1P – 3C</td><td align="left">260,733</td><td align="left">10,860,121</td></tr><tr><td align="left">Diamond: 1P – 3C</td><td align="left">2,082,725</td><td align="left">15,295,197</td></tr></tbody></table><p>依据并发竞争的激烈程度的不同，Disruptor比ArrayBlockingQueue吞吐量快4~7倍。</p><p>按照Pipeline: 1P – 3C的连接模式测试延迟，生产者两次写入之间的延迟为1ms。</p><p>运行环境：</p><ul><li>CPU:2.2GHz Core i7-2720QM</li><li>Java: 1.6.0_25 64-bit</li><li>OS:Ubuntu 11.04.</li></ul><table><thead><tr><th align="left">-</th><th align="left">Array Blocking Queue (ns)</th><th align="left">Disruptor (ns)</th></tr></thead><tbody><tr><td align="left">99% observations less than</td><td align="left">2,097,152</td><td align="left">128</td></tr><tr><td align="left">99.99% observations less than</td><td align="left">4,194,304</td><td align="left">8,192</td></tr><tr><td align="left">Max Latency</td><td align="left">5,069,086</td><td align="left">175,567</td></tr><tr><td align="left">Mean Latency</td><td align="left">32,757</td><td align="left">52</td></tr><tr><td align="left">Min Latency</td><td align="left">145</td><td align="left">29</td></tr></tbody></table><p>可见，平均延迟差了3个数量级。</p><h2 id="等待策略"><a href="#等待策略" class="headerlink" title="等待策略"></a>等待策略</h2><h3 id="生产者的等待策略"><a href="#生产者的等待策略" class="headerlink" title="生产者的等待策略"></a>生产者的等待策略</h3><p>暂时只有休眠1ns。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="消费者的等待策略"><a href="#消费者的等待策略" class="headerlink" title="消费者的等待策略"></a>消费者的等待策略</h3><table><thead><tr><th align="left">名称</th><th align="left">措施</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left">BlockingWaitStrategy</td><td align="left">加锁</td><td align="left">CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td align="left">BusySpinWaitStrategy</td><td align="left">自旋</td><td align="left">通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用</td></tr><tr><td align="left">PhasedBackoffWaitStrategy</td><td align="left">自旋 + yield + 自定义策略</td><td align="left">CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td align="left">SleepingWaitStrategy</td><td align="left">自旋 + yield + sleep</td><td align="left">性能和CPU资源之间有很好的折中。延迟不均匀</td></tr><tr><td align="left">TimeoutBlockingWaitStrategy</td><td align="left">加锁，有超时限制</td><td align="left">CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td align="left">YieldingWaitStrategy</td><td align="left">自旋 + yield + 自旋</td><td align="left">性能和CPU资源之间有很好的折中。延迟比较均匀</td></tr></tbody></table><h2 id="Log4j-2应用场景"><a href="#Log4j-2应用场景" class="headerlink" title="Log4j 2应用场景"></a>Log4j 2应用场景</h2><p>Log4j 2相对于Log4j 1最大的优势在于多线程并发场景下性能更优。该特性源自于Log4j 2的异步模式采用了Disruptor来处理。 在Log4j 2的配置文件中可以配置WaitStrategy，默认是Timeout策略。下面是Log4j 2中对WaitStrategy的配置官方文档：</p><table><thead><tr><th align="left">System Property</th><th align="left">Default Value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">AsyncLogger.WaitStrategy</td><td align="left">Timeout</td><td align="left">Valid values: Block, Timeout, Sleep, Yield. Block is a strategy that uses a lock and condition variable for the I&#x2F;O thread waiting for log events. Block can be used when throughput and low-latency are not as important as CPU resource. Recommended for resource constrained&#x2F;virtualised environments. Timeout is a variation of the Block strategy that will periodically wake up from the lock condition await() call. This ensures that if a notification is missed somehow the consumer thread is not stuck but will recover with a small latency delay (default 10ms). Sleep is a strategy that initially spins, then uses a Thread.yield(), and eventually parks for the minimum number of nanos the OS and JVM will allow while the I&#x2F;O thread is waiting for log events. Sleep is a good compromise between performance and CPU resource. This strategy has very low impact on the application thread, in exchange for some additional latency for actually getting the message logged. Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning. Yield is a good compromise between performance and CPU resource, but may use more CPU than Sleep in order to get the message logged to disk sooner.</td></tr></tbody></table><h3 id="性能差异"><a href="#性能差异" class="headerlink" title="性能差异"></a>性能差异</h3><p>loggers all async采用的是Disruptor，而Async Appender采用的是ArrayBlockingQueue队列。</p><p>由图可见，单线程情况下，loggers all async与Async Appender吞吐量相差不大，但是在64个线程的时候，loggers all async的吞吐量比Async Appender增加了12倍，是Sync模式的68倍。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ad04b8bd.png" alt="图8 Log4j 2各个模式性能比较"></p><p>图8 Log4j 2各个模式性能比较</p><p>美团在公司内部统一推行日志接入规范，要求必须使用Log4j 2，使普通单机QPS的上限不再只停留在几千，极高地提升了服务性能。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="http://brokendreams.iteye.com/blog/2255720">http://brokendreams.iteye.com/blog/2255720</a></li><li><a href="http://ifeve.com/dissecting-disruptor-whats-so-special/">http://ifeve.com/dissecting-disruptor-whats-so-special/</a></li><li><a href="https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results">https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results</a></li><li><a href="https://lmax-exchange.github.io/disruptor/">https://lmax-exchange.github.io/disruptor/</a></li><li><a href="https://logging.apache.org/log4j/2.x/manual/async.html">https://logging.apache.org/log4j/2.x/manual/async.html</a></li></ol><h2 id="版权说明"><a href="#版权说明" class="headerlink" title="版权说明"></a>版权说明</h2><p>转自美团技术沙龙，作者: 宫铭，<a href="https://tech.meituan.com/2016/11/18/disruptor.html">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无锁设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 滚动更新流程</title>
    <link href="/Linux/2021/10/09/Manjaro-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/"/>
    <url>/Linux/2021/10/09/Manjaro-%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="常规流程"><a href="#常规流程" class="headerlink" title="常规流程"></a>常规流程</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清理本地密钥</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/pacman.d/gnupg<span class="token comment"># 重新初始化</span>pacman-key <span class="token parameter variable">--init</span>pacman-key <span class="token parameter variable">--populate</span><span class="token comment"># 更新钥匙环</span>pacman <span class="token parameter variable">-Sy</span> archlinux-keyring archlinuxcn-keyring<span class="token comment"># 更新系统</span>pacman <span class="token parameter variable">-Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="异常流程"><a href="#异常流程" class="headerlink" title="异常流程"></a>异常流程</h2><ol><li><p>若是<code>archlinux-keyring</code>和&#96;&#96;archlinuxcn-keyring&#96;也无法更新，则需要手动去源站找包安装，如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载到本地</span><span class="token function">wget</span> https://mirrors.aliyun.com/archlinuxcn/x86_64/archlinuxcn-keyring-20220716-1-any.pkg.tar.zst<span class="token comment"># 安装</span>pacman <span class="token parameter variable">-U</span> archlinuxcn-keyring-20220716-1-any.pkg.tar.zst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计树形数据的表结构</title>
    <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/08/16/%E8%AE%BE%E8%AE%A1%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/08/16/%E8%AE%BE%E8%AE%A1%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>存储树形结构数据是一个常见的问题，同时也有多种解决方案。</p><p>这里介绍三种树形结构的表设计方案：</p><ul><li>邻接表模型</li><li>基于路径和层级的表设计</li><li>基于左右值编码的表设计（MPT）</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>这里以一个在线食品店作为例子，食品通过类别、颜色和品种组织食品。</p><p>示例如下：</p><p><img src="https://file.note.0moe.cn/img/0_1312037863t4T7.gif" alt="img"></p><h2 id="邻接表模型"><a href="#邻接表模型" class="headerlink" title="邻接表模型"></a>邻接表模型</h2><p>最简单的方法就是使用邻接表模型或者叫做递归模型。通过显示地描述某一节点的父节点，从而能够建立二维的关系表，你只需要一个简单的函数去迭代查询即可获取你的数据。</p><p>示例如下：</p><p><img src="https://file.note.0moe.cn/img/0_1312038147o1wJ.gif" alt="img"></p><p>优点：</p><ul><li>设计简单</li><li>实现容易</li><li>直观</li></ul><p>缺点：</p><ul><li>由于是递归模型CRUD操作低效</li></ul><h2 id="基于路径和层级的表设计"><a href="#基于路径和层级的表设计" class="headerlink" title="基于路径和层级的表设计"></a><strong>基于路径和层级的表设计</strong></h2><p>在一的基础上加上一个 level 字段来表示当前节点到根节点的距离和一个 key 字段来表示搜索路径。</p><ol><li>Node_id 主键</li><li>Name 名字</li><li>Parent_id 父节点的id</li><li>key 搜索路径</li><li>level 表示当前节点到根节点的距离或者层级</li></ol><p>示例如下：</p><table><thead><tr><th>Node_id</th><th>Name</th><th>Parent_id</th><th>key</th><th>level</th></tr></thead><tbody><tr><td>1</td><td>Food</td><td>0</td><td>“”</td><td>1</td></tr><tr><td>2</td><td>Fruit</td><td>1</td><td>“1-“</td><td>2</td></tr><tr><td>3</td><td>Red</td><td>2</td><td>“1-2-“</td><td>3</td></tr><tr><td>4</td><td>Cherry</td><td>3</td><td>“1-2-3-“</td><td>4</td></tr><tr><td>5</td><td>Yellow</td><td>2</td><td>“1-2-“</td><td>3</td></tr><tr><td>6</td><td>Banana</td><td>5</td><td>“1-2-5-“</td><td>4</td></tr><tr><td>7</td><td>Meat</td><td>1</td><td>“1-“</td><td>2</td></tr><tr><td>8</td><td>Beef</td><td>7</td><td>“1-7-“</td><td>3</td></tr><tr><td>9</td><td>Pork</td><td>7</td><td>“1-7-“</td><td>3</td></tr></tbody></table><p>两种需求查询解决方案如下：</p><ol><li>查找d的所有子孙节点：<code>select * from table_name where key like &quot;$&#123;d.key&#125;-$&#123;d.id&#125;-%&quot;</code></li><li>查找某个节点的所有子节点：<code>select * from table_name where key like &quot;$&#123;d.key&#125;-$&#123;d.id&#125;-%&quot; and level=$&#123;d.level&#125;+1</code></li></ol><p>此设计结构简单，利用key和level两个辅助字段可以完成查询操作比一更加高效，而且维护这两个字段成本很低。</p><h2 id="基于左右值编码的表设计-MPT"><a href="#基于左右值编码的表设计-MPT" class="headerlink" title="基于左右值编码的表设计(MPT)"></a><strong>基于左右值编码的表设计(MPT)</strong></h2><p>为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。</p><p><img src="https://file.note.0moe.cn/img/0_1312038223m0YM.gif" alt="img"></p><p>如下图所示, 从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。</p><p><strong>注：</strong>LFT 和 RGT 分别对应 DFS 的发现时间 d 和完成时间相同 </p><p><img src="https://file.note.0moe.cn/img/0_1312038275P594.gif" alt="img"></p><p>如果我们需要查询Fruit的后续节点，只需找出所有左值大于2，并且右值小于11的节点即可。</p><h3 id="1-获取某节点的子孙节点"><a href="#1-获取某节点的子孙节点" class="headerlink" title="1. 获取某节点的子孙节点"></a>1. 获取某节点的子孙节点</h3><p>返回某节点子孙节点的前序遍历列表，以Fruit为例：</p><p>SQL: <code>SELECT* FROM Tree WHERE Lft BETWEEN 2 AND 11 ORDER BY Lft ASC</code></p><p>查询结果如下：</p><p><img src="https://file.note.0moe.cn/img/0_1312038343twHh.gif" alt="img"></p><p>那么某个节点到底有多少的子孙节点呢？</p><p>通过该节点的左、右值我们可以将其子孙节点圈进来，则子孙总数 &#x3D; (右值 – 左值– 1) &#x2F; 2，以Fruit为例，其子孙总数为：(11 –2 – 1) &#x2F; 2 &#x3D; 4。</p><p>同时，为了更为直观地展现树形结构，我们需要知道节点在树中所处的层次，通过左、右值的SQL查询即可实现。以Fruit为例：<code>SELECT COUNT(*) FROM Tree WHERE Lft &lt;= 2 AND Rgt &gt;=11</code>。为了方便描述，我们可以为Tree建立一个视图，添加一个层次数列，该列数值可以写一个自定义函数来计算，函数定义如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> dbo<span class="token punctuation">.</span>CountLayer<span class="token punctuation">(</span>    <span class="token variable">@node_id</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">int</span><span class="token keyword">AS</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> <span class="token variable">@result</span> <span class="token keyword">int</span>  <span class="token keyword">set</span> <span class="token variable">@result</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">declare</span> <span class="token variable">@lft</span> <span class="token keyword">int</span>  <span class="token keyword">declare</span> <span class="token variable">@rgt</span> <span class="token keyword">int</span>  <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> Node_id <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token variable">@lft</span> <span class="token operator">=</span> Lft<span class="token punctuation">,</span> <span class="token variable">@rgt</span> <span class="token operator">=</span> Rgt <span class="token keyword">from</span> Tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> <span class="token variable">@node_id</span>    <span class="token keyword">select</span> <span class="token variable">@result</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Lft <span class="token operator">&lt;=</span> <span class="token variable">@lft</span> <span class="token operator">and</span> Rgt <span class="token operator">>=</span> <span class="token variable">@rgt</span>  <span class="token keyword">end</span>  <span class="token keyword">return</span> <span class="token variable">@result</span><span class="token keyword">end</span>GO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>基于层次计算函数，我们创建一个视图，添加了新的记录节点层次的数列：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> dbo<span class="token punctuation">.</span>TreeView<span class="token keyword">AS</span><span class="token keyword">SELECT</span> Node_id<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Lft<span class="token punctuation">,</span> Rgt<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>CountLayer<span class="token punctuation">(</span>Node_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> Layer <span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>Tree <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LftGO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>创建存储过程，用于计算给定节点的所有子孙节点及相应的层次：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>GetChildrenNodeList<span class="token punctuation">]</span><span class="token punctuation">(</span>  <span class="token variable">@node_id</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">declare</span> <span class="token variable">@lft</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@rgt</span> <span class="token keyword">int</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> Node_id <span class="token keyword">from</span> Tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> <span class="token variable">@node_id</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token variable">@lft</span> <span class="token operator">=</span> Lft<span class="token punctuation">,</span> <span class="token variable">@rgt</span> <span class="token operator">=</span> Rgt <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> TreeView <span class="token keyword">where</span> Lft <span class="token operator">between</span> <span class="token variable">@lft</span> <span class="token operator">and</span> <span class="token variable">@rgt</span> <span class="token keyword">order</span> <span class="token keyword">by</span> Lft <span class="token keyword">ASC</span>  <span class="token keyword">end</span>GO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在，我们使用上面的存储过程来计算节点Fruit所有子孙节点及对应层次，查询结果如下：</p><p><img src="https://file.note.0moe.cn/img/0_1312038603C14v.gif" alt="img"></p><p>在进行树的查询遍历时，只需要进行2次数据库查询，消除了递归，再加上查询条件都是数字的比较，查询的效率是极高的，随着树规模的不断扩大，基于左右值编码的设计方案将比传统的递归方案查询效率提高更多。</p><h3 id="2-获取某节点的族谱路径"><a href="#2-获取某节点的族谱路径" class="headerlink" title="2. 获取某节点的族谱路径"></a>2. 获取某节点的族谱路径</h3><p>假定我们要获得某节点的族谱路径，则根据左、右值分析只需要一条SQL语句即可完成。</p><p>以Fruit为例：<code>SELECT* FROM Tree WHERE Lft &lt; 2 AND Rgt &gt; 11 ORDER BY Lft ASC</code></p><p>相对完整的存储过程如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>GetParentNodePath<span class="token punctuation">]</span><span class="token punctuation">(</span>  <span class="token variable">@node_id</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">declare</span> <span class="token variable">@lft</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@rgt</span> <span class="token keyword">int</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> Node_id <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token variable">@lft</span> <span class="token operator">=</span> Lft<span class="token punctuation">,</span> <span class="token variable">@rgt</span> <span class="token operator">=</span> Rgt <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> TreeView <span class="token keyword">where</span> Lft <span class="token operator">&lt;</span> <span class="token variable">@lft</span> <span class="token operator">and</span> Rgt <span class="token operator">></span> <span class="token variable">@rgt</span> <span class="token keyword">order</span> <span class="token keyword">by</span> Lft <span class="token keyword">ASC</span>  <span class="token keyword">end</span>GO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-为某节点添加子孙节点"><a href="#3-为某节点添加子孙节点" class="headerlink" title="3. 为某节点添加子孙节点"></a>3. 为某节点添加子孙节点</h3><p>假定我们要在节点“Red”下添加一个新的子节点“Apple”，该树将变成如下图所示，其中红色节点为新增节点。</p><p><img src="https://file.note.0moe.cn/img/0_13120386989za9.gif" alt="img"></p><p>相对完整的插入子节点的存储过程：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>AddSubNode<span class="token punctuation">]</span><span class="token punctuation">(</span>  <span class="token variable">@node_id</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@node_name</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">declare</span> <span class="token variable">@rgt</span> <span class="token keyword">int</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> Node_id <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token keyword">SET</span> XACT_ABORT <span class="token keyword">ON</span>    <span class="token keyword">BEGIN</span> TRANSCTION    <span class="token keyword">select</span> <span class="token variable">@rgt</span> <span class="token operator">=</span> Rgt <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span>    <span class="token keyword">update</span> Tree <span class="token keyword">set</span> Rgt <span class="token operator">=</span> Rgt <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">where</span> Rgt <span class="token operator">>=</span> <span class="token variable">@rgt</span>    <span class="token keyword">update</span> Tree <span class="token keyword">set</span> Lft <span class="token operator">=</span> Lft <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">where</span> Lft <span class="token operator">>=</span> <span class="token variable">@rgt</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> Tree<span class="token punctuation">(</span>Name<span class="token punctuation">,</span> Lft<span class="token punctuation">,</span> Rgt<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token variable">@node_name</span><span class="token punctuation">,</span> <span class="token variable">@rgt</span><span class="token punctuation">,</span> <span class="token variable">@rgt</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span>    <span class="token keyword">SET</span> XACT_ABORT <span class="token keyword">OFF</span>  <span class="token keyword">end</span>GO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-删除某节点"><a href="#4-删除某节点" class="headerlink" title="4. 删除某节点"></a>4. 删除某节点</h3><p>如果我们想要删除某个节点，会同时删除该节点的所有子孙节点，而这些被删除的节点的个数为：(被删除节点的右值 – 被删除节点的左值+ 1) &#x2F; 2，而剩下的节点左、右值在大于被删除节点左、右值的情况下会进行调整。来看看树会发生什么变化，以Beef为例，删除效果如下图所示。</p><p><img src="https://file.note.0moe.cn/img/0_13120387708332.gif" alt="img"></p><p>则我们可以构造出相应的存储过程：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>DelNode<span class="token punctuation">]</span><span class="token punctuation">(</span>  <span class="token variable">@node_id</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">declare</span> <span class="token variable">@lft</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@rgt</span> <span class="token keyword">int</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> Node_id <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>    <span class="token keyword">SET</span> XACT_ABORT <span class="token keyword">ON</span>    <span class="token keyword">BEGIN</span> TRANSCTION      <span class="token keyword">select</span> <span class="token variable">@lft</span> <span class="token operator">=</span> Lft<span class="token punctuation">,</span> <span class="token variable">@rgt</span> <span class="token operator">=</span> Rgt <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Node_id <span class="token operator">=</span> <span class="token variable">@node_id</span>      <span class="token keyword">delete</span> <span class="token keyword">from</span> Tree <span class="token keyword">where</span> Lft <span class="token operator">>=</span> <span class="token variable">@lft</span> <span class="token operator">and</span> Rgt <span class="token operator">&lt;=</span> <span class="token variable">@rgt</span>      <span class="token keyword">update</span> Tree <span class="token keyword">set</span> Lft <span class="token operator">=</span> Lft – <span class="token punctuation">(</span><span class="token variable">@rgt</span> <span class="token operator">-</span> <span class="token variable">@lft</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">where</span> Lft <span class="token operator">></span> <span class="token variable">@lft</span>      <span class="token keyword">update</span> Tree <span class="token keyword">set</span> Rgt <span class="token operator">=</span> Rgt – <span class="token punctuation">(</span><span class="token variable">@rgt</span> <span class="token operator">-</span> <span class="token variable">@lft</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">where</span> Rgt <span class="token operator">></span> <span class="token variable">@rgt</span>      <span class="token keyword">COMMIT</span> <span class="token keyword">TRANSACTION</span>    <span class="token keyword">SET</span> XACT_ABORT <span class="token keyword">OFF</span>  <span class="token keyword">end</span>GO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>优点：</p><ul><li>消除了递归查询，实现了无限嵌套</li><li>查询是基于整数的比较，效率很高</li></ul><p>缺点：</p><ul><li>节点的添加、删除及修改代价较大</li></ul><p>在基于数据库的一般应用中，查询的需求总要大于删除和修改，同时我们可以扩展MPT来实现更多的优化，例如：如果对层级需求较高，可以结合MPT和二中的方法来实现。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树形数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式数据库的ACID事务</title>
    <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/06/08/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84ACID%E4%BA%8B%E5%8A%A1/"/>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/06/08/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84ACID%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="事务的属性"><a href="#事务的属性" class="headerlink" title="事务的属性"></a>事务的属性</h2><p>ACID，事务的4个属性，这个每个人都很熟悉。其中：</p><p><strong>A</strong>代表原子性，即：事务中的操作要么全部正确执行，要么全部不执行。在分布式系统中，其主要由2pc协议来保证的（另外还有一个3pc协议，但是只停留在理论阶段，没有太多实践意义），这里有一篇文章专门介绍了<a href="https://levy5307.github.io/blog/2pc/">2pc</a>的内容</p><p><strong>I</strong>代表隔离性，即：多个事务并发执行时，对每个事务来说，它并不会感知系统中有其他事务在同时执行。隔离性有很多个级别，针对不同的级别有多种不同的实现方法，如：MVCC、2PL等。</p><p><strong>D</strong>代表持久性，即：一个事务在提交之后，该事务对数据库的改变是持久的。持久性主要通过redo log来保证的，即如果宕机导致内存中的数据丢失了，需要通过redo log回放来进行恢复。关于持久性，需要注意的是，并不存在完美的、绝对的持久性，因为磁盘可能会坏掉，即使有多个副本，理论上也存在多个副本所在的磁盘同时坏掉的情况。多副本这些手段只是用来降低风险，并不能使之达到绝对的持久性。</p><p><strong>C</strong>代表一致性。即：数据库必须保证事务的执行从一个一致性状态转移到另一个一致性状态。简单说就是数据库从一个正确的状态到另一个正确的状态。比如转账事务完成后，转账双方的总金额不能多也不能少。另外这里的一致性和多副本的一致性也不是一个概念。</p><p>多副本一致性是指：</p><ul><li>查询和更新单个对象的操作按一定顺序执行</li><li>更新操作的效果必然反映在后续查询操作返回的结果中</li></ul><p>在ACID中，C是目的，AID是手段，为了达到C的目的而提供的手段。AID是数据库自身的属性，C则更多的是应用层的属性，应用层利用数据库的AID的这三个特性来达到C。说到这里可能有些混乱，举个例子：</p><p>在银行系统中，A要向B转账100元，而A的账户余额只有50元，并且应用层给账户余额这一列添加了值不能小于0的约束，那么很显然这条事务会执行失败。因为50-100&#x3D;-50，很显然不符合约束。此时事务会回滚，这样应用层便利用了事务的AID特性保证了一致性C。</p><p>反之，如果用户没有为账户余额这一列添加不能小于0的约束，那么事务便会执行成功，导致A的账户余额变成了-50，显然这是不正确的状态。</p><p>由此可见，一致性的保证是由应用层来保证的。</p><p>另外说一句，对于一个涉及a、b节点的分布式事务，如果节点a提交了本地事务，而节点b还没来得及提交，从而其他事务看到了其中间状态，这个问题是由隔离性来解决的。很多人误以为是一致性，其实是不对的。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>严格意义上的隔离性是指假装没有发生并发，这意味着事务的最终执行结果与串行执行相同，然而这会严重影响性能。许多数据库不愿意牺牲性能，因而更多倾向于采用较弱的隔离级别。</p><p>隔离级别分为以下四种：读未提交、读已提交、可重复读、串行化。</p><h3 id="读未提交（read-uncommitted）"><a href="#读未提交（read-uncommitted）" class="headerlink" title="读未提交（read-uncommitted）"></a>读未提交（read-uncommitted）</h3><p>读未提交是指允许一个事务去读取其他事务尚未提交的数据，即***脏读***。用白话说就是你读取了别人正在处理的数据。</p><p>当存在以下问题时，需要解决脏读的问题：</p><ul><li>如果事务会更新多个对象，那么脏读意味着其他事务会看到部分更新这种中间状态，而非看到全部。例如当收到一封电子邮件时，需要更新收件箱以及未读邮件数。如果用户只看到了新邮件但看不到更新的邮件数，则会带来一些困扰。如下图所示：</li></ul><p><img src="https://file.note.0moe.cn/img/distribute-transtion-1.png" alt="img"></p><ul><li>如果事务中止，则所有写入操作都需要回滚。如果发生了脏读，那么可能看到了一些稍后会回滚的数据。</li></ul><p>与脏读所对应的还有<strong>脏写</strong>，即：写数据库时，会覆盖未成功提交的数据。</p><p>我们举一个汽车购买的例子来说明脏写的问题。购买汽车需要两次数据库写入：网站上商品买主需要更新为新卖家；销售发票也要随之更新。在下图中，用户1和用户2试图购买同一辆车，当脏写发生时，会导致商品卖给了用户1，发票却给了用户2。</p><p>读未提交隔离级别会对写入进行加锁，因此在该隔离级别下是不存在脏写的。</p><p>由于读未提交隔离级别的性能和读已提交并没有什么太大的区别，所以实际中很少使用读未提交。</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-2.png" alt="img"></p><h3 id="读已提交（read-committed）"><a href="#读已提交（read-committed）" class="headerlink" title="读已提交（read-committed）"></a>读已提交（read-committed）</h3><p>为了解决脏读&#x2F;脏写的问题，引入了读已提交。其只提供如下两个保证：</p><ul><li>读数据时，只能看到已经成功提交的数据（防止脏读）</li><li>写数据时，只会覆盖已经成功提交的数据（防止脏写）</li></ul><p>数据库通常使用行锁来解决脏写的问题，即当事务想要修改某个对象时，首先获取对象的锁，然后一直持有锁直到事务提交或中止。给定时刻只有一个事务可以拿到特定对象的锁，如果另一个事务尝试更新同一个对象，其必须等待，直到持有锁的事务提交或中止后，获取锁并继续。</p><p>对于脏读却不能像解决脏写问题一样简单地使用读锁，因为这样只读事务会被长时间的写事务阻塞，严重影响只读事务的延迟。所以大多数数据库都是采用了双版本的方式来解决脏读问题：对于每个待更新的对象，数据库都维护其旧值和即将更新的新值，在写事务提交之前，所有读都获取旧值；而当写事务提交之后，则读取新值。具体如下图所示：</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-3.png" alt="img"></p><p>虽然解决了脏读和脏写的问题，当时仍然有问题：</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-4.png" alt="img"></p><p>在上图中，最初账户1和账户2各有500元钱，转账者随后将100元钱从账户2转账到账户1。而小明则在其转账钱查看了账户1的金额，得到了500，又在转账完成后查看了账户2的金额，得到了400。发现两者之和为900，而非最初的1000，所以从小明看来，100元钱好像消失了一样。</p><p>这种异常现象叫做不可重复读（也叫做读倾斜），用白话说就是<strong>你读数据的时候别人插进来对数据操作了。</strong></p><h3 id="可重复读（repeatable-read）"><a href="#可重复读（repeatable-read）" class="headerlink" title="可重复读（repeatable read）"></a>可重复读（repeatable read）</h3><p>读提交的问题在于，只要事务提交，其所做的数据修改就可以看到，因此会有不可重复读的问题。</p><p>可重复读要求，假设一个事务多次读取同一个数据，如果该事务还没结束，其他事务不能访问该数据（这些事务包括读和写），这样在一个事务内两次读到的数据就是一样的，可以防止脏读、不可重复读，并且也能防止更新丢失和write skew（具体定义见下文）的问题。RR通过加行锁来实现的，但是由于其只加行锁不加范围锁，所以存在幻读的问题（***幻读***是不可重复读的一种特殊场景, 要求范围数据的可重复读，关注两次查询语句执行得到的结果集不同）。</p><p>目前业内普遍使用较多的实现方式是MVCC ，严格来说MVCC并不属于可重复读，其通常被定义为快照隔离级别。但是由于ANSI SQL92标准中不包含快照隔离级别，所以这里不对其进行详细讲解。而快照级别隔离与ANSI SQL92中的可重复读更为接近，所以这里将MVCC归为可重复读。相对于严格定义的可重复读，MVCC解决了幻读的问题，却引入了更新丢失和write skew的问题。</p><p>MVCC中每个事务都从数据库的一致性快照中读取，事务看到的所有数据都是最近提交的数据，即使随后数据可能会被修改。这样就避免了不可重复读的问题。其与读已提交的不同在于，对于读已提交，只需要保存数据的两个版本就够了，事务提交前读取旧版本数据，提交后则读取新版本数据。</p><p>对于同一份数据，读操作和读操作不会发生冲突，写操作和写操作一定会发生冲突，因此需要用锁来解决。读操作和写操作有时也会出现冲突，MVCC就是用来解决这个问题的。其可以保证读操作不会阻塞写，写操作也不会阻塞读。</p><p>这个目标是如何实现的呢？在update一个数据时，将创建数据项目的新版本，同时保留旧版本，并做上标记，即采用多版本的方法来解决读和写之间的冲突。由于写的时候旧版本数据不会被删除，读和写发生在了不同版本的数据上，读和写操作便不会发生冲突。</p><p>下图以上面银行转账的例子，展示了MVCC的实现。其中每个事务都有一个全局唯一且单调递增的事务ID。</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-5.png" alt="img"></p><p>当查询数据时，会列举出该数据的所有版本，然后经过一系列的筛选，获取可访问的数据。当以下两个条件都成立时，该数据对当前事务可见：</p><ul><li>事务开始时，创建对象的事务已经完成了提交。</li><li>对象没有被标记为删除；或者即使标记了，但是删除该对象的事务在事务开始时还没有完成提交。</li></ul><p>另外，对于脏写问题，快照级别隔离和读已提交一样，都是采用了行锁的方式来解决。</p><p>上面已经提到，虽然可重复读并不要求解决幻读的问题，但是MVCC其实已经解决了脏读、不可重复读以及幻读的问题，从这一点来看已经符合串行化的定义。但是却与事务的真正串行执行结果是不同的（更新丢失，write skew问题），从这一点来看又不符合串行化。这里主要是ANSI SQL92的各种定义的不严谨造成的，实际上ANSI SQL92现在来看有些过时了，这也造成了各个数据库厂商混乱的定义（有些数据库厂商把MVCC称为串行化隔离，比如OceanBase、而有一些则定义为可重复读，如TiDB）。</p><h3 id="串行化（serializable）"><a href="#串行化（serializable）" class="headerlink" title="串行化（serializable）"></a>串行化（serializable）</h3><p>对于之前的几个隔离级别，主要考虑的是<strong>只读事务遇到并发写时的情况</strong>，却并没有考虑<strong>写事务并发会带来什么问题</strong>。</p><h4 id="脏写"><a href="#脏写" class="headerlink" title="脏写"></a>脏写</h4><p>前面已经讲过脏写的问题，即事务更改了尚未提交的数据，这个问题在读未提交隔离级别中通过加写锁得到了解决，这里就不再赘述。</p><h4 id="更新丢失"><a href="#更新丢失" class="headerlink" title="更新丢失"></a>更新丢失</h4><p>更新丢失是一个很经典的问题，其发生在read-modify-write的场景中，即：读取旧值，修改旧值，并将新值写入。</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-6.png" alt="img"></p><p>在上图中，如果事务是顺序运行的话，最终counter应该等于300，然而在上图中，由于并发的存在，最终导致counter&#x3D;200。</p><p>对于写更新，可以采用原子操作、加锁或者自动检测（先让事务并发运行，当检测到更新丢失的风险时，则中止并回退事务）等方法来解决</p><h4 id="写倾斜"><a href="#写倾斜" class="headerlink" title="写倾斜"></a>写倾斜</h4><p>脏写和写更新指的都是更新同一个对象的情况，当更新多个对象时，则会产生写倾斜的问题。</p><p>做IT的应该基本都有oncall经历，假设团队中每天至少要有一个人负责oncall。如下图所示，最开始系统中标记小张和小李负责oncall，最后由于写倾斜的存在，导致当天无人oncall。</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-7.png" alt="img"></p><p>由此可见写倾斜发生的背景和更新丢失一致，都是由read-modify-update导致的。因此写倾斜可以定义为一种广义上的更新丢失。</p><p>串行化可以用来解决上述问题。</p><p>串行化是最强的隔离级别，它保证即使事务并行运行，但是最终的结果和串行结果相同。其效果是将事务完全隔离开、好像在串行化执行。其实现方案有一下三种：</p><h4 id="真正串行执行"><a href="#真正串行执行" class="headerlink" title="真正串行执行"></a>真正串行执行</h4><p>该办法的思路很简单：解决并发问题的最直接方法是避免并发，采用单线程循环来执行事务。</p><p>由于真正的串行化执行可以避免锁开销，所以有时甚至比只会并发的系统效率更高，但是其吞吐上限是单机单个cpu核的吞吐量。因此我们可以将数据分区，每个事务只访问一个分区内的数据。这样可以为每个分区分配一个事务线程去并发的执行线程。当然也支持跨分区事务，但是由于其要跨越所有分区加锁执行，所以要其性能要低很多、并且会阻塞所有分区上执行事务的线程，因此要严格控制其数量。</p><h4 id="2PL（两阶段加锁）"><a href="#2PL（两阶段加锁）" class="headerlink" title="2PL（两阶段加锁）"></a>2PL（两阶段加锁）</h4><p>相较于真正串行执行，两阶段加锁是一个更广泛使用的串行化算法。其基本介绍如下：</p><ul><li>如果事务要读取对象，必须先以共享模式获得锁。</li><li>如果事务要写入对象，必须先以独占模式获得锁。</li><li>如果事务先读取对象，再写入对象，则先获取共享锁，在写入之前将共享锁升级为独占锁。</li><li>可以有多个事务同时获得一个对象的共享锁，但是如果某个事务获取到了对象的独占锁，那么其他事务必须等待。也就是说，独占锁是排它的，而共享锁是非排它的。</li><li>将事务分成两个阶段，第一个阶段获取锁，第二个阶段释放锁。这也是两阶段加锁名字的由来</li></ul><p>对于2PL，由于锁的存在降低了事务的并发性，所以导致其最大的问题就是性能低。其他的隔离级别都没有对读加锁，只有2PL加了读锁。</p><h4 id="可串行化的快照隔离（SSI）"><a href="#可串行化的快照隔离（SSI）" class="headerlink" title="可串行化的快照隔离（SSI）"></a>可串行化的快照隔离（SSI）</h4><p>顾名思义，可串行化的快照隔离基于快照隔离，即事务中的所有读取操作都是基于数据库的一致性快照。</p><p>在2PL中，其实是一种悲观处理方法，即对于所有可能发生冲突的事务，都假定会产生冲突。并将其串行执行。而SSI则是一种乐观处理方法，即对于可能发生冲突的事务，都假定其不会发生冲突，而令其并行执行。当在提交时，假如发现了冲突，则令其中止回退。</p><p>对于上面写倾斜的例子，事务是基于查询的数据决定接下来的动作，当查询的时候条件成立。而在提交之前，由于其他写事务更改了数据，使先前成立的条件现在已经不成立了，因此导致写倾斜问题的发生。在SSI中要避免这种问题，需要通过专门检测机制，来发现这种对查询结果进行修改的写事务，并使其回退。具体可见下图：</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-8.png" alt="img"></p><p>当小李的事务提交时，发现其查询的oncall信息已经修改了，数据库系统检测到已经发生了冲突，便将其事务中止与回退。</p><p>当系统中的事务冲突比较少、读事务比较多时，SSI的性能则会更好；反之，如果事务冲突较多时，SSI由于需要频繁回退，则导致其性能差强人意。（类似于乐观锁与悲观锁之间的性能差异）</p><h3 id="各种隔离性总结与对比"><a href="#各种隔离性总结与对比" class="headerlink" title="各种隔离性总结与对比"></a>各种隔离性总结与对比</h3><p>ANSI SQL92标准中只讲到了4中隔离级别，并提到了这四种隔离级别分别用来解决脏读、不可重复读和幻读的问题。然而后面人们逐渐发现了write skew、更新丢失等ANSI SQL92中没有提到的问题。这里只对ANSI提到的问题和相应的隔离级别进行罗列。</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏写</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">读已提交</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">可重复读</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">串行化</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="行业内实践"><a href="#行业内实践" class="headerlink" title="行业内实践"></a>行业内实践</h2><p>下面研究一下行业内的数据库产品都是如何实现隔离性的。</p><h3 id="OceanBase"><a href="#OceanBase" class="headerlink" title="OceanBase"></a>OceanBase</h3><p>OceanBase内部实现了一个单调递增的时间戳服务，事务版本号就是从该服务获取的。OceanBase事务版本号分为两类：</p><ul><li>事务提交版本号。在事务提交的时候获取时间戳作为提交版本号，用于确定不同事务提交的先后顺序。本事务所有修改的数据都会被标记上这个提交版本号</li><li>读快照版本号。事务在修改数据之前会先读取数据，需要决定读取哪个版本的数据，这个版本就是读快照版本。</li></ul><p>OceanBase支持读已提交和串行化两种隔离级别，其实现都是采用的MVCC的实现方案，默认的隔离级别是读已提交。前面讲到过，MVCC其实是可重复读隔离级别，并不是串行化。所以<strong>OceanBase里的串行化隔离级别其实是可重复读，并非真正的串行化</strong></p><p>OceanBase中的读已提交和串行化的实现不同主要在于读。读已提交为了实现读到所有已提交的数据，事务中的每条语句都会获取系统中最新的版本号，保证可以读取到事务开启后才提交的数据修改。而可串行化隔离几倍在事务开始时获取了读版本号之后，就只会获取该版本号之前提交的数据，保证整个事务看到的是同一个快照下的数据。</p><p>举两个例子作为对比：</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-9.png" alt="读已提交"></p><p>对于读已提交隔离级别，可以获取到其事务开启之后所提交的数据修改。</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-10.png" alt="串行化"></p><p>然而对于串行化隔离级别，却获取不到其事务开启后所提交的数据修改。</p><p>对于写，OceanBase会对每个写操作加上行锁，这样保证了每个时刻最多只有一个事务在修改该记录，其他的则要进行排队。当行锁释放的时候则会通知队列里的第一个事务。不过OceanBase里的行锁有超时机制，当超过一定时间后则会报lock wait timeout</p><p>在传统的数据库实现中，可以采用时间戳作为版本号，因为时间戳是单调递增的。同样在查询时也要获取时间戳，然后根据时间戳获取可见的数据版本。</p><p>但是在分布式的实现中，由于不同机器的时间戳可能会不同，因此没办法保证时间戳是单调向前的。也许有人觉得即使不是严格单调向前的也不会有太大的问题，下面可以看一个例子：</p><p><img src="https://file.note.0moe.cn/img/distribute-transtion-11.png" alt="img"></p><p>在上图中，由于事务1和事务2所获取到的时间戳不同，导致事务1查询a时没有获取到其最新的数据。</p><p>在业界大概有两种方法解决时钟单调向前的问题：</p><ul><li>利用特殊的硬件设备，如GPD和原子钟（Atomic Clock）使多态机器间的系统始终保持高度一致。这样就可以继续利用本地系统的时间戳作为版本号。典型的代表就是google的spanner，其使用GPS系统再全球多个机房之间保持时间同步。这种方式的有点是软件实现简单，但是其缺点也是很明显的：其对硬件要求比较高，另外这种方式也不能完全保证多个机器时间系统时钟完全一致</li><li>通过集中式的服务获取全局一致的版本号，由这个服务来保证版本号的单调向前。这种问题的缺点就是，全局时钟服务可能会导致性能瓶颈。</li></ul><p>为了避免对特殊硬件的依赖、并且彻底根除不同机器间的时钟差异，OceanBase选择了集中式服务来提供全局统一的版本号。OceanBase将这个服务命名为全局时间戳服务（Global Timestamp Service，简称GTS）。OceanBase为每个租户维护了一个单独GTS服务。当然这个GTS是一个单点，为了解决单点问题，GTS也采用了Paxos来保证高可用。</p><h3 id="Greenplum"><a href="#Greenplum" class="headerlink" title="Greenplum"></a>Greenplum</h3><p>Greenplum支持读已提交和可重复读两种隔离级别。同OceanBase一样，可重复读也是通过MVCC来实现的，所以Greenplum中的可重复读与OceanBase中的串行化隔离级别只是称呼上的不同。与OceanBase相同，Greenplum默认的隔离级别也是可重复读。</p><h3 id="Percolator"><a href="#Percolator" class="headerlink" title="Percolator"></a>Percolator</h3><p>Percolator基于Bigtable的单行事务实现了跨行、跨表的<strong>快照隔离级别</strong>的事务。并且充分利用的Bigtable的timestamp，对每个数据项都维护多个版本（MVCC）以实现快照隔离。</p><p>同OceanBase一样，其依赖一个名为oracle的独立服务来提供单调向前的时间戳，并且每个事务需要获取两个时间戳：start timestamp和commit timestamp。其中start timestamp决定了该事务可以看到的snapshot，commit timestamp决定事务提交的数据的版本。</p><p>对于写入，其需要检测两种冲突：</p><ol><li>该事务开启之后对同样的row是否有新的写入，如果有则rollback。<strong>这样可以解决更新丢失的问题</strong>，当然，对于写倾斜还是束手无策。</li><li>是否有其他事务对相同的row持有锁，如果有则rollback，<strong>这样可以避免脏写问题</strong></li></ol><p>对于读取，首先查看[0, start timestamp]范围内的锁（该范围表示当前事务可以看到的数据版本），如果有锁，说明有一个其他的事务正在同时进行写入。因此当前读事务需要等待该锁释放。如果没有锁或者所有锁已经释放，则读取该时间范围内最新的数据。</p><h3 id="Spanner"><a href="#Spanner" class="headerlink" title="Spanner"></a>Spanner</h3><p>Spanner的事务分为三种类型，分别是：读写事务、snapshot事务以及snapshot读。其中后两者是只读事务，都是lock free的。区别在于后者是对历史数据的读取，由客户端来指定时间戳或者时间戳范围。</p><h4 id="读写事务"><a href="#读写事务" class="headerlink" title="读写事务"></a>读写事务</h4><p>Spanner中的事务运行时间都比较长，所以如果频繁冲突回滚的话，性能损耗比较大。所以，对于读写事务，Spanner采用了2PL这种悲观方式并使用伤停等待（wound wait）来解决冲突的问题。通过2PL可以实现串行化事务隔离级别。</p><h4 id="snapshot事务"><a href="#snapshot事务" class="headerlink" title="snapshot事务"></a>snapshot事务</h4><p>snapshot事务提供了快照隔离级别。其首要任务是获取一个时间戳Sread，然后当成Sread时刻的快照读来执行事务读操作。这里分为两种情况：</p><ol><li>读取只由一个Paxos Group提供服务。客户端把该事务发送给Paxos group leader，该leader分配sread并执行读取操作。定义LastTS()为一个Paxos group最后一次提交的写入timestamp，那么设置sread就可以满足外部一致性要求：该事务将会看到最新的一次写入，然后排在其后面执行。</li><li>读取需要由多个Paxos Group提供服务。最复杂的操作是需要做一次沟通，然后大家根据各自的LastTS()协商出sread。然而spanner根据TrueTime实现了一个更简单的方案，这个方案可以避免该沟通过程。其令sread&#x3D;TT.now().latest，由TrueTime来保证各个副本中获取的时间的一致，然后使用该时刻去执行读操作。</li></ol><h4 id="snapshot读"><a href="#snapshot读" class="headerlink" title="snapshot读"></a>snapshot读</h4><p>在spanner的每个replica中，都会记录一个safe time，名叫tsafe，其代表副本更新后的最大timestamp。当该读操作所指定的时间戳t &lt;&#x3D; tsafe时，则该副本可以满足该读取操作，因为该副本最新的更新时间在该事务读取时间之后。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Groovy语法糖及常用用法</title>
    <link href="/Java/2021/04/10/Groovy%E8%AF%AD%E6%B3%95%E7%B3%96%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/"/>
    <url>/Java/2021/04/10/Groovy%E8%AF%AD%E6%B3%95%E7%B3%96%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Groovy是JVM平台上的一种面向对象且同时支持静态动态的脚本语言，语法和Java区别不大，提供了一些语法糖，代码的表达能力更强。Gradle，Spring Cloud Contract等等都支持Groovy作为DSL（领域专用语言），同时Groovy在测试领域也有一席之地，因为语法简单，可以很快捷的编写Test Case。</p><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>大致了解一些语法糖可以更舒服的看DSL</p><ul><li>可以用def关键字定义变量和方法，编译期做类型推断</li><li>多变量同时创建</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token punctuation">(</span>aa<span class="token punctuation">,</span> bb<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>范围创建</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> range <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>支持for in写法</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">for</span><span class="token punctuation">(</span>variable <span class="token keyword">in</span> range<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    statement #<span class="token number">1</span>    statement #<span class="token number">2</span>    … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>方法参数支持默认值</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">someMethod</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">,</span> parameter2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> parameter3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Method code goes here </span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>字符串支持单引号和双引号，类似于shell，python，双引号中可识别变量</li><li>列表创建</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"g"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"r"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"o"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"o"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"v"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"y"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>map创建</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> stringMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"name"</span></span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"wang"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"age"</span></span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"99"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>正则表达式，～后面直接跟正则语句，可直接用于判断</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token interpolation-string"><span class="token string">"Groovy"</span></span> <span class="token operator">=~</span> <span class="token interpolation-string"><span class="token string">"^G"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>trait关键字声明一个可以有属性和默认实现的接口，Java8之后的接口也都能达到同样效果</li><li>支持闭包，自己Call自己</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> closure <span class="token operator">=</span> <span class="token punctuation">&#123;</span> param <span class="token operator">-></span> println <span class="token interpolation-string"><span class="token string">"Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">param</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>closure<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"World"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">.</span>times <span class="token punctuation">&#123;</span>num <span class="token operator">-></span> println num<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>函数科里化贼方便</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> cl1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">-></span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">&#125;</span><span class="token keyword">def</span> cl1Curry1 <span class="token operator">=</span> cl1<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>调用shell方便</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">println <span class="token string">"ls -l"</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>instanceof可以简写成in</li></ul><h2 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h2><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>在不产生歧义的情况下我们可以省略方法调用中的括号，使代码更像说话</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// equivalent to: turn(left).then(right)</span>turn left then right<span class="token comment">// equivalent to: take(2.pills).of(chloroquinine).after(6.hours)</span>take <span class="token number">2</span><span class="token punctuation">.</span>pills of chloroquinine after <span class="token number">6</span><span class="token punctuation">.</span>hours<span class="token comment">// equivalent to: paint(wall).with(red, green).and(yellow)</span>paint wall with red<span class="token punctuation">,</span> green and yellow<span class="token comment">// with named parameters too</span><span class="token comment">// equivalent to: check(that: margarita).tastes(good)</span>check that<span class="token punctuation">:</span> margarita tastes good<span class="token comment">// with closures as parameters</span><span class="token comment">// equivalent to: given(&#123;&#125;).when(&#123;&#125;).then(&#123;&#125;)</span>given <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> when <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> then <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><table><thead><tr><th align="left">Operator</th><th align="left">Method</th></tr></thead><tbody><tr><td align="left">a + b</td><td align="left">a.plus(b)</td></tr><tr><td align="left">a - b</td><td align="left">a.minus(b)</td></tr><tr><td align="left">a * b</td><td align="left">a.multiply(b)</td></tr><tr><td align="left">a ** b</td><td align="left">a.power(b)</td></tr><tr><td align="left">a &#x2F; b</td><td align="left">a.div(b)</td></tr><tr><td align="left">a % b</td><td align="left">a.mod(b)</td></tr><tr><td align="left">a &amp; b</td><td align="left">a.and(b)</td></tr><tr><td align="left">a ^ b</td><td align="left">a.xor(b)</td></tr><tr><td align="left">a++ 或 ++a</td><td align="left">a.next()</td></tr><tr><td align="left">a– 或 –a</td><td align="left">a.previous()</td></tr><tr><td align="left">a[b]</td><td align="left">a.getAt(b)</td></tr><tr><td align="left">a[b] &#x3D; c</td><td align="left">a.putAt(b, c)</td></tr><tr><td align="left">a &lt;&lt; b</td><td align="left">a.leftShift(b)</td></tr><tr><td align="left">a &gt;&gt; b</td><td align="left">a.rightShift(b)</td></tr><tr><td align="left">a &gt;&gt;&gt; b</td><td align="left">a.rightShiftUnsigned(b)</td></tr><tr><td align="left">switch(a) { case(b) : }</td><td align="left">b.isCase(a)</td></tr><tr><td align="left">if(a)</td><td align="left">a.asBoolean()</td></tr><tr><td align="left">~a</td><td align="left">a.bitwiseNegate()</td></tr><tr><td align="left">-a</td><td align="left">a.negative()</td></tr><tr><td align="left">+a</td><td align="left">a.positive()</td></tr><tr><td align="left">a as b</td><td align="left">a.asType(b)</td></tr><tr><td align="left">a &#x3D;&#x3D; b</td><td align="left">a.equals(b)</td></tr><tr><td align="left">a !&#x3D; b</td><td align="left">! a.equals(b)</td></tr><tr><td align="left">a &lt;&#x3D;&gt; b</td><td align="left">a.compareTo(b)</td></tr><tr><td align="left">a &gt; b</td><td align="left">a.compareTo(b) &gt; 0</td></tr><tr><td align="left">a &gt;&#x3D; b</td><td align="left">a.compareTo(b) &gt;&#x3D; 0</td></tr><tr><td align="left">a &lt; b</td><td align="left">a.compareTo(b) &lt; 0</td></tr><tr><td align="left">a &lt;&#x3D; b</td><td align="left">a.compareTo(b) &lt;&#x3D; 0</td></tr></tbody></table><h3 id="脚本基类"><a href="#脚本基类" class="headerlink" title="脚本基类"></a>脚本基类</h3><p>我们运行的Groovy脚本在编译过程中都自动继承了 <a href="https://docs.groovy-lang.org/2.5.9/html/gapi/index.html?groovy/lang/Script.html">groovy.lang.Script</a> 这个抽象类，并把脚步内容绑定到run方法中执行。</p><p>可以通过创建一个Binding在脚本和基类中创建公用的变量</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">def</span> shell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShell</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span>    binding<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>              binding<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>shell<span class="token punctuation">.</span>evaluate <span class="token string">'z=2*x+y'</span>                <span class="token keyword">assert</span> binding<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以自定义基类</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">BaseScript</span> <span class="token keyword">extends</span> <span class="token class-name">Script</span><span class="token punctuation">&#123;</span>    String name    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> println <span class="token interpolation-string"><span class="token string">"Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">!"</span></span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@BaseScript</span> demo<span class="token punctuation">.</span>BaseScript baseScriptsetName <span class="token interpolation-string"><span class="token string">"100"</span></span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="DelegatesTo"><a href="#DelegatesTo" class="headerlink" title="@DelegatesTo"></a>@DelegatesTo</h3><p>是一个文档与编译时注释，当我们使用了委托模式去执行闭包时，文档生成，IDE以及类型推断都无法准确知道闭包具体被委托到哪里执行，我们就需要使用此注解显示声明。</p><p>当我们要实现如下效果时，我们需要定义一个email方法接受一个闭包，然后通过构建模式创建一个EmailSpec，去初始化并且委托执行闭包</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">email <span class="token punctuation">&#123;</span>    from <span class="token string">'dsl-guru@mycompany.com'</span>    to <span class="token string">'john.doe@waitaminute.com'</span>    subject <span class="token string">'The pope has resigned!'</span>    body <span class="token punctuation">&#123;</span>        p <span class="token string">'Really, the pope has resigned!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">email</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DelegatesTo</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span>Closure<span class="token punctuation">.</span>DELEGATE_ONLY<span class="token punctuation">,</span> value<span class="token operator">=</span>EmailSpec<span class="token punctuation">)</span> Closure cl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当我们要委托给方法的另一个参数时可以</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DelegatesTo</span><span class="token punctuation">.</span>Target Object target<span class="token punctuation">,</span> <span class="token annotation punctuation">@DelegatesTo</span> Closure code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// rehydrate方法创建一个闭包副本</span>   <span class="token keyword">def</span> clone <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">rehydrate</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="自定义编译器"><a href="#自定义编译器" class="headerlink" title="自定义编译器"></a>自定义编译器</h3><p>增加默认导入，并且支持别名</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">import</span> org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>groovy<span class="token punctuation">.</span>control<span class="token punctuation">.</span>customizers<span class="token punctuation">.</span>ImportCustomizer<span class="token keyword">def</span> icz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImportCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// "normal" import</span>icz<span class="token punctuation">.</span><span class="token function">addImports</span><span class="token punctuation">(</span><span class="token string">'java.util.concurrent.atomic.AtomicInteger'</span><span class="token punctuation">,</span> <span class="token string">'java.util.concurrent.ConcurrentHashMap'</span><span class="token punctuation">)</span><span class="token comment">// "aliases" import</span>icz<span class="token punctuation">.</span><span class="token function">addImport</span><span class="token punctuation">(</span><span class="token string">'CHM'</span><span class="token punctuation">,</span> <span class="token string">'java.util.concurrent.ConcurrentHashMap'</span><span class="token punctuation">)</span><span class="token comment">// "static" import</span>icz<span class="token punctuation">.</span><span class="token function">addStaticImport</span><span class="token punctuation">(</span><span class="token string">'java.lang.Math'</span><span class="token punctuation">,</span> <span class="token string">'PI'</span><span class="token punctuation">)</span> <span class="token comment">// import static java.lang.Math.PI</span><span class="token comment">// "aliased static" import</span>icz<span class="token punctuation">.</span><span class="token function">addStaticImport</span><span class="token punctuation">(</span><span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'java.lang.Math'</span><span class="token punctuation">,</span> <span class="token string">'PI'</span><span class="token punctuation">)</span> <span class="token comment">// import static java.lang.Math.PI as pi</span><span class="token comment">// "star" import</span>icz<span class="token punctuation">.</span>addStarImports <span class="token string">'java.util.concurrent'</span> <span class="token comment">// import java.util.concurrent.*</span><span class="token comment">// "static star" import</span>icz<span class="token punctuation">.</span>addStaticStars <span class="token string">'java.lang.Math'</span> <span class="token comment">// import static java.lang.Math.*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可用于限制AST的级别，比如使用者不能用闭包，不允许导入其他包等等</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>Groovy内置了很多好用的构建器，具体使用查看官方教程</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从绫开始的后台管理系统（四）</title>
    <link href="/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/22/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/22/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>我们开始正式写代码。</p><p>这一章主要讲前后端的工程结构设计和搭建。</p><span id="more"></span><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p>工程结构这里我们使用pom管理的方式，项目结构我们采用DDD模型。</p><h4 id="parent工程"><a href="#parent工程" class="headerlink" title="parent工程"></a>parent工程</h4><p>我们创建一个parent用来管理子项目，依赖，属性以及打包方式。我们先预置三个子工程，core包负责核心配置，common包负责工具管理，system包负责对外提供服务。</p><p>parent的<code>packaging</code>为pom结构，它本身不对外提供功能，而是作为管理工程的工程。</p><p>依赖工程版本需要用<code>properties</code>维护起来，并用<code>$&#123;&#125;</code>的格式引用，这样改版本就可以做到统一修改，还有一些全局配置也可以放在<code>properties</code>中，供其他项目引用。</p><p>构建配置<code>build</code>这里我们会构建两个包<code>执行包</code>和<code>源码包</code>方便在其他子工程中查看源码，子工程可直接进行构建，不需要单独配置build。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>0moe-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>0moe-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>0moe-system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>redis-starter.version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>redis-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-starter.version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-starter.version</span><span class="token punctuation">></span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-starter.version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql-driver.version</span><span class="token punctuation">></span></span>8.0.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql-driver.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.18.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hutool.version</span><span class="token punctuation">></span></span>5.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hutool.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-api.version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-api.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>multi-redis-starter.version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>multi-redis-starter.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;redis-starter.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;security-starter.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis-starter.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql-driver.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;hutool.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- servlet包 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;servlet-api.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;web-starter.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>0moe-multi-redis-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;multi-redis-starter.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSource</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSource</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testTarget</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testTarget</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--配置生成源码包--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-sources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="core工程"><a href="#core工程" class="headerlink" title="core工程"></a>core工程</h4><p>core工程负责各种核心组件的配置以及管理组件，以starter的形式向外部提供服务。<code>仅允许api服务引入一次</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>0moe-multi-redis-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们每个核心组件都会放在一个包中，并且在<code>CoreAutoConfiguration</code>中使用<code>@Import</code>进行统一引入。这样我们在增删组件的时候直接修改<code>@Import</code>就可以，无需每个组件修改一次。</p><p><img src="https://file.note.0moe.cn/img/image-20210222113005820.png" alt="image-20210222113005820"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">SecurityConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Enable0moeMultiDbRedis</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoreAutoConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> <span class="token class-name">UserInfoService</span> <span class="token function">userInfoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenAuthenticationFilter</span> <span class="token function">tokenAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>要记得在<code>spring.factories</code>引入自动配置类。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\cn.lm.core.CoreAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>####common工程</p><p>common工程会集成一些标准工具类jar（如<code>hutool</code>）和项目通用的utils，方便其他项目使用。<code>允许多工程重复引入</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="system工程"><a href="#system工程" class="headerlink" title="system工程"></a>system工程</h4><p>system工程作为我们对外提供服务的工程，使用DDD模型驱动。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.lm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>工程结构如下：</p><p><img src="https://file.note.0moe.cn/img/image-20210222114540527.png" alt="image-20210222114540527"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h5><p>lombok是一把双刃剑，我们使用lombok来简化开发的同时应谨慎一些使用。值得注意的是，lombok应仅用在类pojo文件的编写简化上，可以使用Getter、Setter，log以及Builder等，<code>禁止使用@Data</code>。其他地方酌情按照项目需要，使用lombok一些特性，比如自动注入简化等。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端没有后端那么复杂，但是仍需要区分各个模块，以及遵守原则：<code>core模块仅允许单次引入，shared模块允许多次引入</code>。</p><h3 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建admin-ui工程, 使用严格模式，css使用scss，使用路由</span>ng new admin-ui <span class="token parameter variable">--strict</span> <span class="token parameter variable">--style</span> scss <span class="token parameter variable">--routing</span><span class="token comment"># 引入material-ui, 主题选择custom，应用全局排版样式，应用浏览器动画</span>ng <span class="token function">add</span> @angular/material<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h3><h4 id="core"><a href="#core" class="headerlink" title="core"></a>core</h4><p>core模块负责工程所有犬儒引入的模块和全局配置，比如<code>BrowserModule</code>、<code>BrowserAnimationsModule</code>、<code>ServiceModule</code>等，这些都仅需要在整个工程中引入一次即可，不需要重复引用，都由core包管理起来，然后将core包放在appModule中引入。勇士appModule应只引入core包</p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    SharedModule<span class="token punctuation">,</span>    BrowserModule<span class="token punctuation">,</span>    RoutesModule<span class="token punctuation">,</span>    BrowserAnimationsModule<span class="token punctuation">,</span>    ServiceModule<span class="token punctuation">,</span>    LayoutModule<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">[</span>    SharedModule<span class="token punctuation">,</span>    RoutesModule<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CoreModule</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">SkipSelf</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Optional</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> parentModule<span class="token operator">:</span> CoreModule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentModule<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'core只能在appModule引入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>appModule</p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>    AppComponent  <span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    CoreModule  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h4><p>shared模块类似于后端的common工程，本质上属于组件包，可在各个模块中引入。他存在的意义是为了方便一方组件和三方组件的管理，在使用第三方组件时应直接引入shared包。</p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    CommonModule<span class="token punctuation">,</span>    RouterModule<span class="token punctuation">,</span>    MatIconModule<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">[</span>    CommonModule<span class="token punctuation">,</span>    RouterModule<span class="token punctuation">,</span>    MatIconModule<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SharedModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>service包用于资源管理。他的绝大部分作用时管理api，当然有些兄弟组件的联动也可以通过service（或ngrx）来驱动，他也是放在core包中一次性引入。</p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServiceModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h4><p>routes负责业务路由视图的管理。我们以后的业务代码都会放到routes包中。</p><p><img src="https://file.note.0moe.cn/img/image-20210222155959126.png" alt="image-20210222155959126"></p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  declarations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>    RoutesRoutingModule<span class="token punctuation">,</span>    SharedModule  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RoutesModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'passport'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> PassportComponent<span class="token punctuation">,</span>    <span class="token function-variable function">loadChildren</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./passport/passport.module'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=></span> m<span class="token punctuation">.</span>PassportModule<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  imports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RoutesRoutingModule</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><p>layout负责模块布局。比如在这个passport页面，外部的背景、copyright都属于layout的一部分，登录路由（routesModule）渲染的部分仅包括红框内<img src="https://file.note.0moe.cn/img/image-20210222160142778.png" alt="image-20210222160142778"></p><p>在比如这里，这个就进入了业务布局，外部包括菜单等都是layout的一步分，只有红框内才是业务视图（routesModule）真正渲染的地方。</p><p><img src="https://file.note.0moe.cn/img/image-20210222160516595.png" alt="image-20210222160516595"></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>ng的组件生成需要改动一些全局配置。以下配置放在<code>projects.admin-ui.schematics</code>中</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"@schematics/angular:component"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"scss"</span><span class="token punctuation">,</span>    <span class="token property">"changeDetection"</span><span class="token operator">:</span> <span class="token string">"OnPush"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"@schematics/angular:module"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"commonModule"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>后台管理系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>从绫开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从绫开始的后台管理系统（三）</title>
    <link href="/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/18/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/18/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这一章我们开始对若依的前端工程进行分析。</p><p>ruoyi的前端主要包括登录验证，路由转发，dev模式这几个模块。</p><span id="more"></span><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>ruoyi的前端主要包括api(service)、layout、router、store(vuex)、view几个部分。</p><p><img src="https://file.note.0moe.cn/img/image-20210218172418893.png" alt="image-20210218172418893"></p><h3 id="组件视图"><a href="#组件视图" class="headerlink" title="组件视图"></a>组件视图</h3><p>assets是存储一些静态图片资源的地方；</p><p>components内放了一些抽象的、可复用的组件，可以放在具体的视图中直接使用。</p><p>layout是存储布局文件。菜单、内容区域、导航栏、用户设置都是数据布局的一部分。</p><p>views中存储的是内容视图，内容视图会在那layout的内容区域进行渲染。</p><p>directive存放的是vue指令。ruoyi仅将指定用于角色验证和权限验证。</p><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>api负责http资源管理，其实这里叫做service更恰当，因为资源不仅仅有api。</p><h3 id="路由访问"><a href="#路由访问" class="headerlink" title="路由访问"></a>路由访问</h3><p>router中存的是组件的路由数据，页面内导航都依赖于vue-router进行跳转。</p><h3 id="工具集合"><a href="#工具集合" class="headerlink" title="工具集合"></a>工具集合</h3><p>utils中是一些工具类，静态变量。比如权限验证工具类，错误代码常量。</p><p>store中是用来放置vuex的配置文件。若依在一些组件联动中使用了vuex，比如左侧菜单栏的伸缩。</p><p><strong>注：vuex严格来说只是一个状态管理的工具，它不产生数据，只是做数据的搬运工</strong></p><h2 id="资源聚合"><a href="#资源聚合" class="headerlink" title="资源聚合"></a>资源聚合</h2><p>资源管理的主要对象是http服务。因为现在的前端都是基于webapp的概念开发，对于一个app来说，数据来源不止一种http，它可以到一个资源服务器去拿用户信息，去另一个资源服务器拿订单信息等等。</p><p>基于这个理念，http服务资源就必须要管理起来。并且每种资源客户端都要作为一个单例提供（比如单例化的axios）。</p><h2 id="组件管理"><a href="#组件管理" class="headerlink" title="组件管理"></a>组件管理</h2><p>组件部分分为视图组件和指令组件，他们会一起参与渲染流程，控制页面的表现。这里视图组件和指令组件不在赘述，使用方法等可以自行查询vue文档。</p><h3 id="指令设计"><a href="#指令设计" class="headerlink" title="指令设计"></a>指令设计</h3><p>ruoyi的指令主要用绝角色验证和权限验证，他们控制着某个组件是否显示，某个页面是否有权限访问。举例来说：<img src="https://file.note.0moe.cn/img/image-20210218174148507.png" alt="image-20210218174148507"></p><p><img src="https://file.note.0moe.cn/img/image-20210218174245413.png" alt="image-20210218174245413"></p><p>如果当前用户没有<code>monitor:job:edit</code>这项权限，则会移除修改按钮。若仅使用指令而未设置操作权限值，则会直接抛出异常。</p><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p>状态管理ruoyi使用了vuex。它被使用在一些组件菜单数据的路由维护，组件之间的状态联动，tabs上右键菜单的联动，还有用户信息的更新联动。这一块有兴趣的同学可以学习一下vuex的状态管理。</p><blockquote><p>这里我们会用ng的rxjs来做，相比于rxjs，vuex，rxjs的写法会简明一些。</p></blockquote><h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p>程序从index.html进入，从layout&#x2F;index.vue开始渲染布局，布局渲染完毕后会渲染views下的内容视图。布局渲染和内容视图渲染的过程中会使用到components中的组件，这就是layout、views、components三者的关系和渲染流程。</p><h2 id="接口验证"><a href="#接口验证" class="headerlink" title="接口验证"></a>接口验证</h2><p>接口验证这里ruoyi是使用axios的拦截器做的。</p><h3 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h3><p>在进行请求时，会检查接口是否需要token将token注入头文件。</p><p><img src="https://file.note.0moe.cn/img/image-20210218175821226.png" alt="image-20210218175821226"></p><h3 id="响应拦截"><a href="#响应拦截" class="headerlink" title="响应拦截"></a>响应拦截</h3><p>在得到响应后，如果有错误代码axios拦截器会抛出异常并选择是否进行重定向。</p><p><img src="https://file.note.0moe.cn/img/image-20210218175712183.png" alt="image-20210218175712183"></p><h2 id="路由转发"><a href="#路由转发" class="headerlink" title="路由转发"></a>路由转发</h2><p>路由转发这里分为两部分，路由配置和路由转发。路由配置又分为静态配置和动态配置。路由转发一般使用<code>router.push</code>或<code>&lt;router-link&gt;</code>这里不再进行赘述，可以去看一下官方文档。</p><h3 id="静态配置"><a href="#静态配置" class="headerlink" title="静态配置"></a>静态配置</h3><p>使用下图这样的配置方式，将一些公共路由提前配置好。</p><p><img src="https://file.note.0moe.cn/img/image-20210218180413648.png" alt="image-20210218180413648"></p><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><p>根据一些条件向router对象中添加路由配置。在ruoyi中是结合vuex向router对象中添加动态路由</p><p><img src="https://file.note.0moe.cn/img/image-20210218180802820.png" alt="image-20210218180802820"></p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>路由模式这个并不是vue独有，这是目前实行的一种标准。目前我们默认使用history模式。</p><ul><li><code>hash</code>: 使用 URL hash 值来作路由。支持所有浏览器，同时也支持在不部署到前端服务器，直接访问文件来进行跳转。</li><li><code>history</code>: 依赖 HTML5 History API 和服务器配置。此模式依赖于浏览器实现，要求必须部署在服务器，如node，nginx等。</li><li><code>abstract</code>: 支持所有 JavaScript 运行环境，如 Node.js 服务器端。<strong>如果发现没有浏览器的 API，路由会自动强制进入这个模式</strong></li></ul><h2 id="dev模式"><a href="#dev模式" class="headerlink" title="dev模式"></a>dev模式</h2><p>dev模式是为了方便我们在开发时解决跨域问题而产生的，它会将我们访问的接口进行代理访问从而解决跨域问题。</p><p>核心配置在我们红框部分：</p><p><img src="https://file.note.0moe.cn/img/image-20210218181914328.png" alt="image-20210218181914328"></p><ol><li><p>被代理的接口范围。一般来说是使用前缀匹配要代理的api。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 若依管理系统<span class="token operator">/</span>开发环境<span class="token constant">VUE_APP_BASE_API</span> <span class="token operator">=</span> <span class="token string">'/dev-api'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>目标地址。api服务器的地址</p></li><li><p>是否重写api。由于1的原因，可能改写了部分api，这时要将api重写覆盖。</p></li></ol><h2 id="其他设计"><a href="#其他设计" class="headerlink" title="其他设计"></a>其他设计</h2><h3 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h3><p>因js的写法非常灵活，开发人员很容易写出bug，比如变量提升、内存泄漏等。这里采用eslint和husky进行代码检查。eslint在ide编辑时就会提是，husky则是做了一个git的钩子，在commit前会调用相应的方法进行代码检查。</p><h3 id="语法转译"><a href="#语法转译" class="headerlink" title="语法转译"></a>语法转译</h3><p>因为浏览器兼容性的问题，需要将一些es6语法转译为es5。ruoyi是使用babel进行转译。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在打包时会根据不同的配置注入不同的环境变量，这也是兼容多环境比较重要的一个点</p><p><img src="https://file.note.0moe.cn/img/image-20210218182451675.png" alt="image-20210218182451675"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ruoyi的前端设计解析到此就结束了。</p><p>其实前端框架性的配置本身就比较少，加上我们要用ng来实现，我们可利用的部分就更少了，基本都要重写，所以分析一些库的使用方法也意义不大。</p><p>前端的重点难点在于视图渲染和兼容。比如说要flow布局的兼容性，css在不同浏览器的兼容等等。这些都是要在我们正式编码中要解决的，在这里更希望关注一些宏观上，设计上的思路，而非到具体的兼容性和实现。</p>]]></content>
    
    
    <categories>
      
      <category>后台管理系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>从绫开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从绫开始的后台管理系统（二）</title>
    <link href="/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/14/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/14/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>那这一章就正式开始对ruoyi的后端配置进行分析。</p><p>ruoyi的后端模块主要包括权限系统，动态数据源、数据权限隔离、代码生成器、定时任务，common工具，还有后端接口，下面我们逐一进行分析。</p><p>我们也会讲一些关于工程结构，依赖管理配置方面的设计。</p><span id="more"></span><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>工程结构主要分为两部分：pom结构和包结构。</p><h3 id="pom结构"><a href="#pom结构" class="headerlink" title="pom结构"></a>pom结构</h3><p>pom结构遵循oo（面向对象）原则，即配置尽量放在父工程中进行管理，同时子工程也要能够根据自己的需要进行调整（封装与继承），但注意在划分工程时不要成环，即子工程互相依赖。</p><p><img src="https://file.note.0moe.cn/img/image-20210217215151835.png" alt="image-20210217215151835"></p><p>我们可以看到，属性配置<code>properties</code>，和依赖管理<code>dependencyManagement</code>，都是放在父工程<code>ruoyi</code>中，子工程只需要继承父工程就可以使用父工程的配置和依赖。</p><p>注意：注意打包结构<code>packaging</code>，自己选择是要打成jar，war，还是pom包。一般来说父工程是pom包，子项目打包时现在一般时jar包（内置tomcat），如果使用外部tomcat则要打成war包。</p><p><img src="https://file.note.0moe.cn/img/image-20210217220344888.png" alt="image-20210217220344888"></p><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>包结构目前由两种模型驱动：mvc模型和DDD模型。mvc模型是传统的驱动模型，讲究的是视图与数据分离，由controller负责管理；DDD模型（领域驱动模型）是近几年的一种驱动模型，他讲究的是根据业务领域划分功能边界。</p><ul><li><p>mvc模型</p><p>mvc模型在模板渲染时代（jsp和freemarker）比较流行，自从前后端分离流行起来后，渐渐的大家觉得味不太对，因为没有视图需要渲染了，controller的责任好像不像以前那么沉重了，但是又找不到新的，合适的称呼；而且因为ssm架构，导致配置xml和配置类越来越多，不是很好管理，因此mvc才渐渐没落下去。</p><p>mvc模型的基本结构为controller-dao-service，业务相关的类都依据这三者进行划分，有一些配置和工具类，则单独放在config和utils包中进行管理。</p></li><li><p>DDD模型</p><p>DDD模型（领域驱动模型）因上述的发展原因被挖了出来，实际上互联网各种理论很早就有人提出来了，只是顺应时代发展才出现这种风水轮流转的局面。mvc模型不足以描述复杂的结构，因此才掏出了DDD。</p><p>DDD模型讲究以业务边界划分领域，在业务边界有重合的地方，则单独补充一个业务融合领域。</p><p>由于DDD讲究一个理解（业务理解和架构理解），因此并没有mvc模型划分的那么清晰。每个人都有自己的一套理解和最佳实践。简单的说是分为api-app-domain-infra四层，具体可以去看我的这篇文章<a href="https://note.0moe.cn/2019/07/28/DDD%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%88%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%EF%BC%89/">DDD项目结构（领域驱动设计）</a>。</p></li></ul><p>这里我不讲的太深，具体理论有各路大神比我讲的更好。</p><p>ruoyi的包结构有一些地方让我有点难受，它把service放在了依赖<code>ruoyi-system</code>中，而controller放到了<code>ruoyi-admin</code>中这样就导致我要改动代码有时就要改两遍。</p><p>我理解作者的意图，他是想把字典，系统信息等等服务作为一个依赖提供，以供其他包调用，将controller和service解耦。但是我还是比较喜欢放在同一个包里，统一对外提供服务，这个就属于仁者见仁智者见智了。</p><p>在我看来，一个模块是一个整体，controller是面向http提供服务，service和mapper是面向class提供服务，所以他们这种提供服务的属性没必要拆开，应该由调用方面对不同的场景是，选择不同的服务方法。</p><blockquote><p>遇到这种情况我们会放在同一个包里。</p></blockquote><h2 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h2><h3 id="权限验证设计"><a href="#权限验证设计" class="headerlink" title="权限验证设计"></a>权限验证设计</h3><p>ruoyi的权限系统是使用spring security的方案，token颁发是使用jwt+redis。即将token下发给客户端，且在服务器也存储一份。鉴权时在接口调用处进行鉴权。</p><h4 id="token颁发"><a href="#token颁发" class="headerlink" title="token颁发"></a>token颁发</h4><p>这个设计在我来看着实是有些臃肿。用户信息是用单独接口去获取的，那为什么还要用jwt去封装一次token，这样一来解析了两次（jwt一次，cache一次）才能获取到用户信息，真的有这个必要吗？</p><p>现在主流的方案有两种，<code>jwt</code>和<code>token+redis</code></p><ol><li>jwt是无状态分布式的设计，类似于证书签署下发。<ul><li>优点<ol><li>jwt可以减少服务器压力。因为是无状态的设计，所以用户信息都存储在本体中被下发到客户端，客户端携带jwt访问资源时，可以直接读取到用户信息。特别是在分布式环境下，各个服务不需要再根据token去获取用户信息，鉴权中心也不需要再去存储用户信息。</li></ol></li><li>缺点<ol><li>jwt无法主动过期。因为是无状态的设计，jwt自身会包含一个过期时间，但是服务端无法让它主动过期或续签。比如我们想要修改用户的数据（如时区，权限等）这样就要使原有的jwt失效，重新颁发。要想主动过期必须要维护一个集合，以此来验证jwt是否有效。实际上证书注销也是这么做的，在https请求时会验证证书是否有效。</li><li>jwt存储过多数据会造成http头负担过大。如果用户信息中有太多的属性，比如时区，登录地区，操作系统等，或者直接在里面维护一个权限list。这样会导致http头负担暴增，http开销变得极大。</li><li>jwt未加密。jwt是使用base64编码，因此等同于明文。且使用base64编码增大数据体积，使<code>2</code>的缺点进一步被放大。</li><li>接口防刷及多端验证。持有jwt的客户端可以无穷端登录或者无限刷你的接口，这个时候你就要去管理jwt以防止这种问题。</li></ol></li></ul></li><li>token+redis是类session中心化存储的设计。<ul><li>优点<ol><li>可进行会话管理。因为用户信息和登录状态都是存储在服务器的，因此服务器可以控制会话，动态修改用户信息。并且这也是类session设计的优势所在，现在不推荐使用session的原因是因为session的跨域问题，安全问题以及存储扩展问题。</li></ol></li><li>缺点<ol><li>信息存储会增加服务器负担，且需要选择合适的存储组件。因为是中心化管理，所以用户信息必须要放在服务器存储，且这类数据读写频率会非常高，不能用数据库进行管理，需要引入redis等其他高速读写组件。<code>这同时也是中心化管理所需要的资源，不然中心化管理没法做。</code></li></ol></li></ul></li></ol><p>ruoyi的权限系统设计相当于把这两个设计聚合到一起。它解决了jwt过期的缺点，但jwt的优点完全没有用到，且其他的缺点无法解决，反而事倍功半。</p><blockquote><p>我们的后台管理会采用token+redis这种方案。因为作为管理系统，我们必须要对会话进行管理。jwt这种方案更适合应用在其他的场景，比如邮件验证等。</p></blockquote><h4 id="接口鉴权"><a href="#接口鉴权" class="headerlink" title="接口鉴权"></a>接口鉴权</h4><p>接口鉴权是使用spring security的<code>@PreAuthorize</code>+权限编码进行鉴权。这样设计鉴权逻辑可以有很大的自由，且可以精细到对每个接口单独进行权限管理。</p><p><img src="https://file.note.0moe.cn/img/image-20210215103340240.png" alt="image-20210215103340240"></p><p><img src="https://file.note.0moe.cn/img/image-20210215103405036.png" alt="image-20210215103405036"></p><blockquote><p>这一块我们采用和ruoyi相同的方案。</p></blockquote><h3 id="RBAC角色权限设计"><a href="#RBAC角色权限设计" class="headerlink" title="RBAC角色权限设计"></a>RBAC角色权限设计</h3><p>关于RBAC的方面可以参考<a href="https://shuwoom.com/?p=3041">《RBAC权限系统分析、设计与实现》</a> 或自行百度，这里我们不再赘述。</p><p>ruoyi也是采用的RBAC的设计方案，做到<code>用户-角色-权限</code>三者的解耦。不过它实现的有一些小瑕疵，并未完全做到用户与权限的解耦。</p><p><img src="https://file.note.0moe.cn/img/image-20210215211158151.png" alt="image-20210215211158151"></p><p>在这里，它创建用户的时候，不是将角色放在用户里，而是直接将权限放在用户里。这样会导致角色权限更新的时候要去更新所有用户缓存的权限，或者让具有此角色的用户重新登录才能获取到最新的权限list。前者需要遍历所有用户，对缓存的压力极大，后者会使token集体失效，对登录接口的压力极大。</p><p><img src="https://file.note.0moe.cn/img/image-20210215212949736.png" alt="image-20210215212949736"></p><p>ruoyi为了解决它，只更新了当前用户的权限缓存。但随之而来的是：如果其他用户具有此角色，则这个用户必须要重新登陆才能使用最新添加的权限，否则他还是没有这个权限。这样就造成了数据不一致。</p><blockquote><p>这个问题有更好的解决办法。在我们的系统中，用户信息存储的是角色信息，而非具体的权限信息。我们在访问接口时，会拿着用户的当前角色去缓存中查询角色对应的权限集合进行鉴权；当角色权限更新时，只要更新角色对应的权限集合及缓存。不需要进行用户遍历，也不会有数据一致性的问题。我们只要付出一次redis查询的代价就可以解决。</p></blockquote><h2 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h2><p>动态数据源这里要思考两处：一是怎么创建多个DataSource，多个DataSource的配置如何维护；二是在使用时如何选择自己想要的数据源，即数据源选择。</p><h3 id="数据源创建"><a href="#数据源创建" class="headerlink" title="数据源创建"></a>数据源创建</h3><p>在数据源创建时，创建主从数据源（实际上主从只是个代号，你也可以叫一号数据源二号数据源等等）。<code>@ConfigurationProperties</code>这个注解可以将对应配置下的属性自动填充到bean中；<code>DruidProperties</code>是统一进行druid连接池的配置。这样会创建两个数据源。</p><p><img src="https://file.note.0moe.cn/img/image-20210215223545825.png" alt="image-20210215223545825"></p><p><img src="https://file.note.0moe.cn/img/image-20210215223757427.png" alt="image-20210215223757427"></p><p><img src="https://file.note.0moe.cn/img/image-20210215224336965.png" alt="image-20210215224336965"></p><p>在创建完主从数据源后，会将两个数据源bean都加入到<code>dynamicDataSource</code>bean中，这个bean需要继承<code>org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource</code>，她内部会维护一个map，在数据源切换时会根据标记从map取出数据源使用。</p><p><img src="https://file.note.0moe.cn/img/image-20210215223810748.png" alt="image-20210215223810748"></p><p><img src="https://file.note.0moe.cn/img/image-20210215225013355.png" alt="image-20210215225013355"></p><p>注意上图的这个方法，这里是选择最终调用的数据源，ruoyi是使用ThreadLocal（线程变量）的方式进行选择。<img src="https://file.note.0moe.cn/img/image-20210215225426832.png" alt="image-20210215225426832"></p><p>还有一点要说明。如果你使用这种客制化数据源，一定要将spring boot数据源的自动配置类排除。不然会因无法找到数据源配置而启动失败。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="数据源选择"><a href="#数据源选择" class="headerlink" title="数据源选择"></a>数据源选择</h3><p>在选择数据源时，ruoyi是用AOP+ThreadLocal做的数据源选择。</p><p>整体思路：</p><p><img src="https://file.note.0moe.cn/img/image-20210218000912204.png" alt="image-20210218000912204"></p><p>使用示例：</p><p><img src="https://file.note.0moe.cn/img/image-20210215231153555.png" alt="image-20210215231153555"></p><p>需要注意，因为数据源切换时基于aop的，所以同类调用方法不能使用this调用，需要使用代理对象调用，即<code>AopContext.currentProxy()</code>。</p><h2 id="数据权限隔离"><a href="#数据权限隔离" class="headerlink" title="数据权限隔离"></a>数据权限隔离</h2><p>数据权限隔离，或者说叫数据权限分配，他的业务目的是让每个人只能看自己全权限的数据，不能越权去看别人的数据。比如每个销售员自己的单子都不想给别人看，但是销售经理应该可以看到所有销售员的单子，这时候就有了它的用武之地。</p><h3 id="主流做法"><a href="#主流做法" class="headerlink" title="主流做法"></a>主流做法</h3><p>目前这块主流的解决方案都是拼sql，将权限配置保存在数据库中，只不过是最后拼在哪：有些设计选择拼在sql最后，由开发人员显示的调用；也有些设计是在表名处做文章，根据权限条件限制生成临时表。</p><p>ruoyi的数据权限隔离的做法便是前者，且是基于aop做的。根据方法上标记<code>@DataScope</code>注解，在当前方法拦截并生成权限sql片段，最后由开发人员显式的插入。具体片段生成方法见<code>com.ruoyi.framework.aspectj.DataScopeAspect#dataScopeFilter</code>。</p><p><img src="https://file.note.0moe.cn/img/image-20210217231043061.png" alt="image-20210217231043061"></p><blockquote><p>因数据权限这里每种业务要求都不相同，这个没法做一个非常通用的方案，我们这里也是会维持相同的设计。</p></blockquote><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>代码生成器这里算是比较重要的一块，一个好用的生成器可以极大的减少工作量。</p><p>这里技术不是难点，会用模板引擎就ok，比如freemarker，velocity等。ruoyi使用的是velocity，它性能要比freemarker好一些，语法友好度也好一些。具体语法可以参考文档<a href="https://wizardforcel.gitbooks.io/velocity-doc/content/">介紹| Velocity 中文文档 - wizardforcel</a>，这里不做赘述</p><p>代码结构和预留结构是重点。直接影响你是否需要加班，像ruoyi自带的就有增删查改，导出，权限，这一块就做的很好，极大的减轻了工作量。</p><p>在这里提一下数据库乐观锁的问题，因为是管理系统，一条数据可能被很多人同时修改，所以需要加入乐观锁控制数据版本，保证所见即所得。</p><blockquote><p>我们这里因为使用框架的原因，需要对生成器模板做一些魔改。还有权限方面，我们希望做成自动放入数据库的模式，不要手动插入；还会在表设计中加入乐观锁。</p></blockquote><h2 id="common工具"><a href="#common工具" class="headerlink" title="common工具"></a>common工具</h2><p>工具包这里就比较自由了，常见的包有apache-common，guava，hutool，objectMapper等。这里我们主要分析工具类的设计原则。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li><p>尽量静态</p><p>工具类的方法应尽可能做成静态方法和静态字段，如果无法做成静态方法，则要考虑将这个类做成单例模式，不要多次实例化。因为静态方法会直接放在jvm栈中，效率要比非静态的高，而且对于开发人员来说也用着舒服。</p></li><li><p>命名规范</p><p>一般情况下，可以叫做xxxUtil或xxxUtils，如果有一些业务领域特定的工具类，则应该叫做xxxHelper,比如redisHelper，exportHelper等。且这些helper因为都要基于某一个组件的原因，必须要实例化。所以需要做单例设计。</p></li><li><p>性能要求</p><p>工具类方法作为基础架构的一种，调用的频率非常之高，所以内部实现在设计时就要考虑时间复杂度和空间复杂度，一点点性能问题就会被十倍百倍的放大，这也是一些公司要求工具类必须要技术经理编写的原因。</p></li><li><p>接口规范</p><p>一是方法命名要通俗易懂，且参数数量尽量控制不要超过5个。不然参数太多，命名只有自己看得懂，太麻烦了没人愿意用的。</p><p>二是是弃用原则。弃用时如果项目已经发布，要将原有方法打上<code>@Deprecated</code>标记，并记录推荐使用的新方法。原有方法千万不要立刻删除，要在写一个新接口。因为老方法不知道有多少个人用，一旦删除别人的系统可能立刻崩溃。在打上标记后再经历几个版本迭代，发个删除通告，再删就可以了。</p></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><del>其实ruoyi的common包我看着很难受</del>，他把core包的内容也放到了common包中，实际上core包和common包应该是独立的两个包。common负责工具，core负责核心配置。像<code>RuoYiConfig</code>，<code>BaseController</code>，<code>BaseException</code>这些应该集成在core包中单独发布。而像常量类、utils应放在common中。没必要混合在一起。这里感觉ruoyi比较混乱。</p><blockquote><p>关于这部分我会拆成两个包：core和common包，让职责划分更加清晰一点。</p></blockquote><h2 id="其他设计"><a href="#其他设计" class="headerlink" title="其他设计"></a>其他设计</h2><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>定时任务这里ruoyi是对quartz做了一个包装，封装了一些查询任务信息的方法和执行任务，具体可以参考quartz的方法。</p><p>如果对job的需求比较轻量可以试一下这个工具<a href="https://www.hutool.cn/docs/#/cron/%E5%85%A8%E5%B1%80%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-CronUtil">全局定时任务-CronUtil</a>，非常轻量</p><h3 id="异步日志"><a href="#异步日志" class="headerlink" title="异步日志"></a>异步日志</h3><p>这里也是用aop做了一个异步日志的拦截，核心就收集入参、出参、用户信息等信息调用异步线程插入数据库，比较简单。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实后端设计主要就是几块：数据库设计，配置设计，工程结构设计。剩下的基本都是经验积累：比如怎么去设计代码生成器，工具类应该怎么设计，这里只能讲一些原则性的思路（劝告？）,还是要多听多写多看多读源码。</p><p>关于ruoyi的后端部分分析就到此结束了，有一些设计原则和优化的点我都在相应章节记录下来。等我们正式开始编码的时候会一起应用。</p>]]></content>
    
    
    <categories>
      
      <category>后台管理系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>从绫开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从绫开始的后台管理系统（一）</title>
    <link href="/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/08/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2021/02/08/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这是从绫开始系列的新坑，适合有一些基础的朋友，<del>比如会写hello world的朋友</del>。</p><span id="more"></span><p>将会使用angular+spring boot搭建一个后台管理系统。我们尽量不重新造轮子，所以会先分析当前市面上成熟的管理系统（<a href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue</a>），再去开始搭建我们自己的后台管理系统，能重用ruoy的部分我们尽量不手写，<del>所以本系统是一个基于ruoyi的后台管理系统</del>。</p><p>有人可能会问，既然有现成的为什么还要自己做？这个我给出的回答有两个方面：</p><p>一方面是验证所学。朋友们可以看看我其他的文章：如<a href="https://note.0moe.cn/2019/08/15/%E9%92%88%E5%AF%B9%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">针对业务场景的解决方案</a>，<a href="https://note.0moe.cn/2020/05/27/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/">java线程池配置详解</a>等。都是一些零零散散的新得，没有统一的整合到一起。<del>还有就是<a href="https://note.0moe.cn/2020/06/19/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84k3s%E5%88%B0istio%EF%BC%88%E4%B8%80%EF%BC%89/">从绫开始的k3s到istio（一）：安装K3S</a>一直没有等来二</del>。</p><p>另一方面是推广ng（angular）+spring boot的开发模式。其实ng的模块化设计非常的便捷，现今前端局面还是以小厂vue，大厂react为主，ng其实只要付出亿点点学习成本（这个成本肯定要比vue和react要高的），小项目和大项目都能hold住。</p><p>这个系列其实重要的不是编码，而是一些主流的设计思路和开发模式，我会录制视频并加上解说，代码也会开源放到github上。</p><p>同样，这个从绫开始也是个很长的系列，耐心追更，你会有更多收获。</p><h2 id="开发计划"><a href="#开发计划" class="headerlink" title="开发计划"></a>开发计划</h2><ol><li>对<a href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue</a>进行结构分析。前端主要包括登录验证，路由转发，dev模式使用，组件设计要求；后端主要包括权限验证系统，日志系统，工程结构设计，多数据源，表设计，代码生成器等。</li><li>搭建权限系统。前后端的权限拦截，全局用户信息等。</li><li>字典模块设计。字典模块的后台存储，高速读取，前后端解耦。</li><li>构建代码生成器。这一步基本就是业务部分了，可以根据需要定制化一些代码模板。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个系列到<em>四</em>就截至了，因为网络上同质化内容太严重，剩下的就是一些业务模块的构建，再重写下去意义不大，种植此系列。</p>]]></content>
    
    
    <categories>
      
      <category>后台管理系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>从绫开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务选型对比</title>
    <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/01/13/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/"/>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/2021/01/13/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%80%89%E5%9E%8B%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式事务选型对比"><a href="#分布式事务选型对比" class="headerlink" title="分布式事务选型对比"></a>分布式事务选型对比</h1><p>随着互联网架构的不断扩展，传统的ACID事务已经无法满足要求。为了解决这个问题，BASE理论被提出来取代ACID，基于BASE理论和CAP理论的分布式事务也有各种事务策略。如何保证整个事务整体的原子性与一致性问题？分布式事务如何选项才能更加适合当下的业务场景？已经成为了当下事务的痛点。</p><span id="more"></span><h2 id="解决方案对比"><a href="#解决方案对比" class="headerlink" title="解决方案对比"></a>解决方案对比</h2><h3 id="2PC两阶段提交"><a href="#2PC两阶段提交" class="headerlink" title="2PC两阶段提交"></a>2PC两阶段提交</h3><h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><p>为了提供统一的对接模型和标准，X&#x2F;OPEN组织提出了一个DTP（Distributed Transaction Processing Reference Model）模型，其中规定了分布式事务中的三个角色：</p><ul><li>AP：应用程序</li><li>TM：事务管理器，负责协调管理整个分布式事务</li><li>RM：资源管理器也就是事务参与者，负责控制分支事务</li></ul><p>DTP模型还定义了TM和RM之间通信的接口规范，这个规范就是XA，本职上也是数据库提供的2PC接口协议。基于XA方案的事务流程如下：</p><ul><li>AP 持有 D1 和 D2 两个数据源；</li><li>AP 通过 TM 通知 D1 的 RM 操作数据，同时通知 D2 的 TM 操作数据，此时 D1 和 D2 操作的数据锁定，RM 不提交事务；</li><li>TM 收到 两个数据源的 RM 执行恢复，只要有一方失败，则向另外的 RM 发起回滚指令，对应 RM 回滚分支事务释放资源锁；</li><li>若均为成功，TM 向所有 RM 发起提交指令，所有 RM 接到指令提交事务，释放资源锁。</li></ul><p>XA方案本质上是数据库层面的分布式事务，要求数据库支持事务，实现强一致性。在整个事务流程中，从准备阶段到第二阶段的commit或rollback的整个过程中，TM一直持有对应相关数据资源的锁，如果有其他事务要修改数据库的该条数据，就必须等待锁的释放，存在长事务风险。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>适合于本地的多事务组合，对于基于网络io的分布式事务，由于无法解决io丢失问题，因此并不可靠</p><h3 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h3><p>关于TCC（Try-Confirm-Cancel）的概念，最早是由Pat Helland于2007年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。 TCC事务机制相比于上面介绍的XA，解决了其几个缺点: 1.解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。 2.同步阻塞:引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。 3.数据一致性，有了补偿机制之后，由业务活动管理器控制一致性</p><p>对于TCC的解释:</p><ul><li>Try阶段：尝试执行,完成所有业务检查（一致性）,预留必须业务资源（准隔离性）</li><li>Confirm阶段：确认执行真正执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，Confirm操作满足幂等性。要求具备幂等设计，Confirm失败后需要进行重试。</li><li>Cancel阶段：取消执行，释放Try阶段预留的业务资源 Cancel操作满足幂等性Cancel阶段的异常和Confirm阶段异常处理方案基本上一致。</li></ul><p>举个简单的例子如果你用100元买了一瓶水， Try阶段:你需要向你的钱包检查是否够100元并锁住这100元，水也是一样的。</p><p>如果有一个失败，则进行cancel(释放这100元和这一瓶水)，如果cancel失败不论什么失败都进行重试cancel，所以需要保持幂等。</p><p>如果都成功，则进行confirm,确认这100元扣，和这一瓶水被卖，如果confirm失败无论什么失败则重试(会依靠活动日志进行重试)</p><p>对于TCC来说适合一些:</p><ul><li>强隔离性，严格一致性要求的活动业务。</li><li>执行时间较短的业务</li></ul><h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h4><p>TCC的特点在于业务资源检查与加锁，一阶段进行校验，资源锁定，如果第一阶段都成功，二阶段对锁定资源进行交易逻辑，否则，对锁定资源进行释放。应用实施成本较高。</p><h3 id="MQ事务"><a href="#MQ事务" class="headerlink" title="MQ事务"></a>MQ事务</h3><p>RocketMQ在4.3版本开始支持事务消息，即prepare消息。这种消息在发送到MQ之后不会立即投递到消费者，会由发送者二次确认后，由RocketMQ根据确认指令决定投递还是丢弃。基于该方案的整个事务流程如下：</p><ul><li>事务发起方发送prepare消息到RocketMQ，RocketMQ存储该消息并反馈发起方消息接收成功，prepare消息不允许被消费者消费。</li><li>发起方接收到RocketMQ的反馈后，执行本地事务，若本地事务执行成功，发起方向RocketMQ发送prepare消息的commit指令，否则发送rolback。</li><li>RocketMQ接收到发起方二次对prepare消息的确认指令后，执行消息的对应操作，commit控制消息进入实际的消费队列，rollback会删除对应消息，至此，保证了本地事务与消息发送的原子性问题。</li><li>对于事务发起方二次确认的可靠性问题，RocketMQ提供反向的定时任务汇差事务状态机制，最多重试15次，超过则丢弃消息。</li><li>事务参与者监听RocketMQ，基于消息确认（ACK）机制，参与者接收到消息并业务处理完成后向RocketMQ发送ack，保证参与者接收消息的可靠性问题。</li><li>事务参与者对事务消息的消费方法实现幂等性，解决可能存在的消息重复消费问题。</li></ul><h4 id="结论-2"><a href="#结论-2" class="headerlink" title="结论"></a>结论</h4><p>适合非主要流程的事务处理，如电商中的评论，物流信息等。允许丢失部分信息，必要时可人工干预。</p><h3 id="saga事务"><a href="#saga事务" class="headerlink" title="saga事务"></a>saga事务</h3><p>Saga是30年前一篇数据库伦理提到的一个概念。其核心思想是将长事务拆分为多个本地短事务，由Saga事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。 Saga的组成：</p><p>每个Saga由一系列sub-transaction Ti 组成 每个Ti 都有对应的补偿动作Ci，补偿动作用于撤销Ti造成的结果,这里的每个T，都是一个本地事务。 可以看到，和TCC相比，Saga没有“预留 try”动作，它的Ti就是直接提交到库。</p><p>Saga的执行顺序有两种：</p><p>T1, T2, T3, …, Tn</p><p>T1, T2, …, Tj, Cj,…, C2, C1，其中0 &lt; j &lt; n Saga定义了两种恢复策略：</p><p>向后恢复，即上面提到的第二种执行顺序，其中j是发生错误的sub-transaction，这种做法的效果是撤销掉之前所有成功的sub-transation，使得整个Saga的执行结果撤销。 向前恢复，适用于必须要成功的场景，执行顺序是类似于这样的：T1, T2, …, Tj(失败), Tj(重试),…, Tn，其中j是发生错误的sub-transaction。该情况下不需要Ci。</p><p>这里要注意的是，在saga模式中不能保证隔离性，因为没有锁住资源，其他事务依然可以覆盖或者影响当前事务。</p><p>还是拿100元买一瓶水的例子来说，这里定义</p><p>T1&#x3D;扣100元 T2&#x3D;给用户加一瓶水 T3&#x3D;减库存一瓶水</p><p>C1&#x3D;加100元 C2&#x3D;给用户减一瓶水 C3&#x3D;给库存加一瓶水</p><p>我们一次进行T1,T2，T3如果发生问题，就执行发生问题的C操作的反向。 上面说到的隔离性的问题会出现在，如果执行到T3这个时候需要执行回滚，但是这个用户已经把水喝了(另外一个事务)，回滚的时候就会发现，无法给用户减一瓶水了。这就是事务之间没有隔离性的问题</p><p>可以看见saga模式没有隔离性的影响还是较大，可以参照华为的解决方案:从业务层面入手加入一 Session 以及锁的机制来保证能够串行化操作资源。也可以在业务层面通过预先冻结资金的方式隔离这部分资源， 最后在业务操作的过程中可以通过及时读取当前状态的方式获取到最新的更新。</p><h4 id="结论-3"><a href="#结论-3" class="headerlink" title="结论"></a>结论</h4><p>Saga的核心就是补偿，一阶段就是服务的正常顺序调用（数据库事务正常提交），如果都执行成功，则第二阶段则什么都不做；但如果其中有执行发生异常，则依次调用其补偿服务（一般多逆序调用未已执行服务的反交易）来保证整个交易的一致性。应用实施成本一般。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现操作符重载</title>
    <link href="/Java/2020/12/09/Java%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/Java/2020/12/09/Java%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>操作符重载，就是把已经定义的、有一定功能的操作符进行重新定义，来完成更为细致具体的运算等功能。</p><p>从面向对象的角度说，就是可以将操作符定义为类的方法，使得该操作符的功能可以用来代表对象的某个行为。</p><p>从DSL的角度说，就是用操作符来代替部分语法，提高DSL的可理解性与可读性。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们来考虑实现这样的功能：使用 BigInteger 来计算(a^2 + b^2)</p><p>常规写法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> res <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>假设可以对 *、+ 进行操作符重载，那可以直接这样写：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> res <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>所以，对于非原始类型的数值运算，如果能够进行操作符重载，至少有 2 个好处：</p><ol><li>代码写起来更简单，不容易出错</li><li>代码更容易阅读，不会一堆括号嵌套</li></ol><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><p>Manifold 是将每个算数操作符的重载，映射到特定名称的函数。例如你在某个类 A 中定义了 plus(B) 的方法，那么这个类就可以使用 a + b 代替 a.plus(b) 进行调用。具体的映射关系为：</p><p><img src="https://file.note.0moe.cn/img/27422-20230315105650383-1271865634.png" alt="图片"></p><p>为了方便举例说明，我们定义一个数值类型 Num：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Num</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">Num</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">+</span> that<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Num</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span>v <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Num</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token class-name">Num</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">-</span> that<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Num</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">Num</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">*</span> that<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Num</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Num</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 常规算术</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token comment">// 编译后</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 支持运算符优先级</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a <span class="token operator">+</span> a <span class="token operator">*</span> b <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">// 编译后</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>b <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 支持运算符重载</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">// 编译后</span><span class="token class-name">Num</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于 +&#x3D;、-&#x3D; 这些，Manifold 也支持。</p><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p>Java中进行比较用的是 Comparable&lt;T&gt;。只需类实现 Comparable&lt;T&gt;接口，就可以直接使用 &gt;、&gt;&#x3D;、&lt;、&lt;&#x3D; 这四个比较操作符的重载：</p><p><img src="https://file.note.0moe.cn/img/27422-20230315105650462-1985458372.png" alt="图片"></p><p> Num 实现 Comparable&lt;Num&gt;：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Num</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Num</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">-</span> that<span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>那么对于这样的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Num</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Num</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行代码会输出 b，因为代码在被 Manifold 处理之后会被编译为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当然 &#x3D;&#x3D; 和 !&#x3D; 也是支持的，只需要实现ComparableUsing&lt;T&gt;这个接口，并覆写 equals：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Num</span> <span class="token keyword">implements</span> <span class="token class-name">ComparableUsing</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Num</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Num</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Num</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">==</span> that<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>则此时我们对 &#x3D;&#x3D; 和 !&#x3D; 进行了重载，并且使用的是基于 equals 方法的实现。那么对于下面的代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Num</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Num</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行代码会打印<code>相等</code>，因为 Manifold 处理之后的代码会编译为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b  a <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">compareTousing</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token class-name">Operator</span><span class="token punctuation">.</span><span class="token constant">EQ</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>Warning</code>：ComparableUsing继承于Comparable，则表示该对象在设计时是可比较的。从Java的设计哲学来说，equals()表示两个对象是否相等的意义很抽象，而这两个对象可能是数值，也可能是车、订单或者其他什么东西。使用时一定要谨慎，不要滥用重载&#x3D;&#x3D;和!&#x3D;。</p><h3 id="索引操作符"><a href="#索引操作符" class="headerlink" title="索引操作符"></a>索引操作符</h3><p>因为 List 已经具备了这两个方法，所以有了 Manifold，可以这样写：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第 1个元素</span><span class="token class-name">String</span> first <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 替换第 1 个元素</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而Map则需要手动添加<a href="https://github.com/manifold-systems/manifold/tree/master/manifold-deps-parent/manifold-ext">扩展方法</a>来实现：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Extension</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapExt</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">V</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token annotation punctuation">@This</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后我们可以这样写：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Integer</span><span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>实际上，Manifold的定位是一个编译工具，通过编译来减轻Java繁琐的语法或实现语法糖，可用之处不仅仅是操作符重载，它还支持扩展方法、代理等其他功能。</p><p>那么为什么不考虑学习一下Kotlin或者Scala呢？</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/manifold-systems/manifold">manifold-Github</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作符重载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程工具之CountDownLatch分析</title>
    <link href="/Java/2020/09/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E4%B9%8BCountDownLatch%E5%88%86%E6%9E%90/"/>
    <url>/Java/2020/09/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E4%B9%8BCountDownLatch%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>相信大家都挺熟悉 CountDownLatch 的，顾名思义就是一个栅栏，其主要作用是多线程环境下，让多个线程在栅栏门口等待，所有线程到齐后，栅栏打开程序继续执行。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>用一个最简单的案例引出我们的主角</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"就位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatchDemo</span> countDownLatchDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatchDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-></span> executorService                        <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> countDownLatchDemo<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>countDownLatch<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已到齐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 输出：     * pool-1-thread-2就位     * pool-1-thread-5就位     * pool-1-thread-4就位     * pool-1-thread-3就位     * pool-1-thread-1就位     * 已到齐     */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>看源码前最好先熟悉下 AQS 的大致结构，在看 AQS 的 Node 节点的时候看到有共享模式和独占模式，ReentrantLock 用了独占模式，CountDownLatch 正式用了共享模式，相信看完能够对 AQS 有更深的理解。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><strong>CountDownLatch#CountDownLatch</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以看到 CountDownLatc 内部也实现了一个 AQS</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>CountDownLatch.Sync#Sync</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接拿了 count 把锁（当前线程可重入 Sync 锁 count 次）</span>  <span class="token function">setState</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><ul><li><strong>CountDownLatch#await</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#acquireSharedInterruptibly</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意，持有锁的线程被中断是直接抛异常的 </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tryAcquireShared很简单，如果全员到齐了返回1，其他时候都返回 -1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// 所以没到齐前都会以共享模式入同步队列</span>    <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#doAcquireSharedInterruptibly</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//addWaiter之前看过，作用就是把节点放到同步队列的末尾，但是这里节点类型是共享模式</span>  <span class="token comment">//  值得注意的是，模式是存在节点的 nextWaiter 中，所以不管 nextWaiter 可能三种情况 1。独占模式的空节点2.共享模式的空节点3。Condition条件队列的下一个节点</span>  <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SHARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 下面的自旋和 acquireQueued 方法基本一模一样，重点看下区别</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果前驱节点是 head 说明没人排队</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再次尝试</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 只有调用了足够次数countDown，栅栏才会打开</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 这里的 r 一定为 1，会一个一个唤醒所有节点</span>          <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>          p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>          failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 一般入队肯定有人排队的，之前也看过，主要作用，通知前驱节点，然后挂起</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>      <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#setHeadAndPropagate</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// propagate = 1 次判断一定为 true</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>      <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// CountDownLatch节点所有节点都是共享模式，一定满足</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 直接唤醒下一个</span>      <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#doReleaseShared</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 同步队列不为空则进入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>      <span class="token comment">// 如果有节点需要被唤醒</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不断重试 CAS 吧 头节点设为全新</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token comment">// 唤醒下一个节点</span>        <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 到这里 下一个已经唤醒了，把节点状态设置为 PROPAGATE，说明是共享状态唤醒的</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">PROPAGATE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 直到头节点变化结束，也就是下一个一个被唤醒了，然后再由下一个接着唤醒</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="唤醒"><a href="#唤醒" class="headerlink" title="唤醒"></a>唤醒</h3><p>看等待过程，栅栏打开后，所有共享模式的节点会一个一个的唤醒，让我们一起看看如何打开栅栏并唤醒第一个节点。</p><ul><li><strong>AbstractQueuedSynchronizer#releaseShared</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这个方法和等待时候自悬的一样，用于唤醒第一个节点</span>    <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>CountDownLatch#tryReleaseShared</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment">// c == 0 说明栅栏已经打开过了，CountDownLatch 是一次性的，直接false</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// cas 递减状态，达到0的时候返回 true 栅栏打开</span>      <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从绫开始的k3s到istio（一）：安装K3S</title>
    <link href="/%E8%BF%90%E7%BB%B4/2020/06/19/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84k3s%E5%88%B0istio%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/%E8%BF%90%E7%BB%B4/2020/06/19/%E4%BB%8E%E7%BB%AB%E5%BC%80%E5%A7%8B%E7%9A%84k3s%E5%88%B0istio%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="从绫开始的k3s到istio（一）：安装K3S"><a href="#从绫开始的k3s到istio（一）：安装K3S" class="headerlink" title="从绫开始的k3s到istio（一）：安装K3S"></a>从绫开始的k3s到istio（一）：安装K3S</h1><p>因为k8s太大了嘛，就一直想搞也莫得银子。正巧从逼乎上看到了k3s，也是挺有意思，正好我服务器也能勉强带的动（2C4G）就搞了一个。这个系列主要使用k3s+istio。从k3s安装，配置资源服务，部署代码，自动化构建到状态监控等，会一直更新下去。</p><span id="more"></span><h2 id="K3S安装"><a href="#K3S安装" class="headerlink" title="K3S安装"></a>K3S安装</h2><p>安装前有几点注意：</p><ul><li><p>hostname。</p><p>因为k3s的node节点有命名规则，只允许字母、数字和中划线(<code>-</code>)。并且节点名称默认名称使用hostname，因此某些云服务商的默认命名可能有问题，比如VM_6。这种节点是无法创建成功的，因此我们首先要重命名hostname。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hostnamectl set-hostname <span class="token operator">&lt;</span>newhostname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>用istio代替traefik做反向代理</p><p>因为traefik不支持mysql、redis等协议代理，因此我们用istio做反代</p></li></ul><h3 id="国内源安装k3s"><a href="#国内源安装k3s" class="headerlink" title="国内源安装k3s"></a>国内源安装k3s</h3>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://docs.rancher.cn/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token assign-left variable">INSTALL_K3S_EXEC</span><span class="token operator">=</span><span class="token string">"server --no-deploy=traefik --kube-apiserver-arg service-node-port-range=1-65535"</span> <span class="token function">sh</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>  关于安装参数，我们一条一条来解释：</p><blockquote><p>INSTALL_K3S_MIRROR：使用国内源安装</p><p>INSTALL_K3S_EXEC：安装参数</p><ul><li>–no-deploy&#x3D;traefik：禁用traefik代理。traefik是k3s自带的反向代理，因为我们这里要使用istio做反代，所以把默认的traefik禁用。</li><li>–kube-apiserver-arg service-node-port-range&#x3D;1-65535：端口映射范围，api-server默认可映射到宿主的端口范围是30000+，但是我们有些资源或者服务要映射到外部供外部调用，比如80、443、3306等……因此要更改默认范围。前面的–kube-apiserver-arg表示这是一个k8s服务的配置参数。具体可参考文档<a href="https://docs.rancher.cn/k3s/installation/install-options.html#_3-%E9%A2%9D%E5%A4%96%E7%9A%84%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9">额外的配置选项</a>。</li></ul></blockquote><h3 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用阿里源安装</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span>setenforce <span class="token number">0</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kubelet kubeadm kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="安装验证"><a href="#安装验证" class="headerlink" title="安装验证"></a>安装验证</h3><ul><li><p>检查节点状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get <span class="token function">node</span> NAME   STATUS   ROLES    AGE     VERSIONvm6   Ready    master   5d23h   v1.18.3+k3s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>检查节点的污点情况</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 请检查节点的污点情况，如果是false，则下面可以略过</span>$ kubectl describe <span class="token function">node</span> vm6 <span class="token operator">|</span> <span class="token function">grep</span> UnschedulableUnschedulable:      <span class="token boolean">false</span><span class="token comment"># 因为我只有一台服务器，所以仅部署了master节点，正常master节点是不允许运行pod的，这里是对master做了污化</span><span class="token comment"># 移除node.kubernetes.io/unschedulable，或执行以下命令</span>$ kubectl taint nodes <span class="token parameter variable">--all</span> node-role.kubernetes.io/master-$ kubectl taint nodes <span class="token parameter variable">--all</span> node-role.kubernetes.io/master:PreferNoSchedule-<span class="token comment"># 这一步不确定性较大，如果都不可用，请自行根据文档解决，文档地址</span><span class="token comment"># https://kubernetes.io/zh/docs/concepts/configuration/taint-and-toleration/#%E6%A6%82%E5%BF%B5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>检查dns解析情况</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nslookup</span> kubernetes.defaultServer:    <span class="token number">10.0</span>.0.10Address <span class="token number">1</span>: <span class="token number">10.0</span>.0.10 kube-dns.kube-system.svc.cluster.localName:      kubernetes.defaultAddress <span class="token number">1</span>: <span class="token number">10.0</span>.0.1 kubernetes.default.svc.cluster.local<span class="token comment"># 如果显示NODOMAIN等，请修改/etc/resolv.conf,添加dnsip和search</span><span class="token comment"># 获取kube-dns的endpoint ip</span>$ kubectl get endpoints <span class="token parameter variable">-n</span> kube-system <span class="token operator">|</span> <span class="token function">grep</span> kube-dnskube-dns                <span class="token number">10.42</span>.0.54:53,10.42.0.54:9153,10.42.0.54:53   6d$ <span class="token function">vim</span> /etc/resolv.conf<span class="token comment"># nameserver放在第一行</span>nameserver <span class="token number">10.42</span>.0.54search default.svc.cluster.local svc.cluster.local svc.cluster.local cluster.localoptions ndots:5<span class="token comment"># 若产生其他问题请根据文档解决</span><span class="token comment"># https://kubernetes.io/zh/docs/tasks/debug-application-cluster/debug-service/#service-%E6%98%AF%E5%90%A6%E9%80%9A%E8%BF%87-dns-%E5%B7%A5%E4%BD%9C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><p><a href="https://docs.rancher.cn/k3s/">K3S中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
      <tag>k3s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java线程池配置详解</title>
    <link href="/Java/2020/05/27/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <url>/Java/2020/05/27/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="java线程池配置详解"><a href="#java线程池配置详解" class="headerlink" title="java线程池配置详解"></a>java线程池配置详解</h1><p>网络资料多是复制粘贴，在此重写，以我为准。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><p>4核</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 核心线程池大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">// 最大可创建的线程数</span><span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment">// 队列最大长度</span><span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token comment">// 线程池维护线程所允许的空闲时间</span><span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><span id="more"></span><ul><li><p>2核</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 核心线程池大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 最大可创建的线程数</span><span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token comment">// 队列最大长度</span><span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">// 线程池维护线程所允许的空闲时间</span><span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>1核</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 核心线程池大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 最大可创建的线程数</span><span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">// 队列最大长度</span><span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 线程池维护线程所允许的空闲时间</span><span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>ThreadPoolExecutor类可设置的参数主要有：</p><ul><li><p><code>corePoolSize</code></p><blockquote><p>核心线程数，核心线程会一直存活，即使没有任务需要处理。当线程数小于核心线程数时，即使现有的线程空闲，线程池也会优先创建新线程来处理任务，而不是直接交给现有的线程处理。</p><p>核心线程在allowCoreThreadTimeout被设置为true时会超时退出，默认情况下不会退出。</p></blockquote></li><li><p><code>maxPoolSize</code></p><blockquote><p>当线程数大于或等于核心线程，且任务队列已满时，线程池会创建新的线程，直到线程数量达到maxPoolSize。如果线程数已等于maxPoolSize，且任务队列已满，则已超出线程池的处理能力，线程池会拒绝处理任务而抛出异常。</p></blockquote></li><li><p><code>keepAliveSeconds</code></p><blockquote><p>当线程空闲时间达到keepAliveSeconds，该线程会退出，直到线程数量等于corePoolSize。如果allowCoreThreadTimeout设置为true，则所有线程均会退出直到线程数量为0。</p></blockquote></li><li><p><code>allowCoreThreadTimeout</code></p><blockquote><p>是否允许核心线程空闲退出，默认值为false。</p></blockquote></li><li><p><code>queueCapacity</code></p><blockquote><p>任务队列容量。从maxPoolSize的描述上可以看出，任务队列的容量会影响到线程的变化，因此任务队列的长度也需要恰当的设置。</p></blockquote></li></ul><h2 id="扩容流程："><a href="#扩容流程：" class="headerlink" title="扩容流程："></a>扩容流程：</h2><p><img src="/1590563487338.png" alt="线程池"></p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><h3 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h3><p>任务主要分为两类<strong>计算密集型</strong>和<strong>IO密集型</strong></p><p>目前大多数cpu都是多核多线程，像我是6核12线程，因此以往的用cpu核数计算并不恰当，应以实际线程数为主。</p><p>注意：有些cpu说是4核8线程，但实际上是6线程+2虚拟线程，此时要用6来计算。</p><p>或者直接一把梭：Runtime.getRuntime().availableProcessors()</p><p>在计算<code>corePoolSize</code>时涉及到一个阻塞系数的概念。</p><blockquote><p>如果任务有50%的时间处于阻塞状态，则阻塞系数为0.5。则程序所需的线程数为处理器可用核心数的两倍。如果任务被阻塞的时间少于50%，即这些任务是计算密集型的，则程序所需线程数将随之减少，但最少也不应该低于处理器的核心数。如果任务被阻塞的时间大于执行时间，即该任务是IO密集型的，我们就需要创建比处理器核心数大几倍数量的线程。</p></blockquote><p>计算公式：线程数 &#x3D;cpu实际线程数&#x2F;(1 - 阻塞系数)，其中阻塞系数的取值在0和1之间。计算密集型人物的阻塞系数为0，而IO密集型任务的阻塞系数则接近1。</p><p>通用的说，计算密集型的<code>corePoolSize</code>&#x3D;cpu实际线程数+1</p><p>IO密集型的<code>corePoolSize</code>&#x3D;cpu实际线程数*5</p><h3 id="queueCapacity"><a href="#queueCapacity" class="headerlink" title="queueCapacity"></a>queueCapacity</h3><p>任务队列的长度要根据核心线程数，以及系统对任务响应时间的要求有关。队列长度计算公式为(corePoolSize&#x2F;tasktime)*responsetime。</p><p>一般来说，tasktime是0.1，responsetime是2，因此等价于</p><p>queueCapacity&#x3D;20*corePoolSize</p><h3 id="maxPoolSize"><a href="#maxPoolSize" class="headerlink" title="maxPoolSize"></a>maxPoolSize</h3><p>如果需要最大线程池扩容，则说明任务队列已满。在这种情况下，对于计算密集型的任务，扩容线程池意义不是很大，因为不需要上下文的切换，这种情况下建议增加物理核数；对于IO密集型的任务，说明IO的速度变慢，需要将空闲的cpu资源让给后续的线程，需要增加线程池的容量。</p><p>一般来说，我们设置为core的4倍。</p><p>maxPoolSize&#x3D;4*corePoolSize</p><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><p>此参数设置的最大意义是当线程池维持在一个较高的使用率，延长线程存活时间可以有效的提高处理速度，避免无用的创建-销毁线程。</p><p>keepAliveTime &#x3D; 5*responsetime * corePoolSize</p><h3 id="allowCoreThreadTimeout"><a href="#allowCoreThreadTimeout" class="headerlink" title="allowCoreThreadTimeout"></a>allowCoreThreadTimeout</h3><p>此参数建议维持默认false，不建议核心线程也退出。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程工具之ReentrantLock分析</title>
    <link href="/Java/2020/03/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E4%B9%8BReentrantLock%E5%88%86%E6%9E%90/"/>
    <url>/Java/2020/03/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E4%B9%8BReentrantLock%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>ReentrantLock 可重入锁，应该是除了 synchronized 关键字外用的最多的线程同步手段了，虽然JVM维护者疯狂优化 synchronized 使其已经拥有了很好的性能。但 ReentrantLock 仍有其存在价值，例如可以感知线程中断，公平锁模式，可以指定超时时间的抢锁等更细粒度的控制都是目前的 synchronized 做不到的。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>用一个最简单的案例引出我们的主角</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认是非公平锁和 synchronized 一样</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThreadInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-></span> executorService                        <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printThreadInfo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 输出:     * 0 : pool-1-thread-1     * 0 : Thread[pool-1-thread-1,5,main]     * 3 : pool-1-thread-4     * 3 : Thread[pool-1-thread-4,5,main]     * 1 : pool-1-thread-2     * 1 : Thread[pool-1-thread-2,5,main]     * 2 : pool-1-thread-3     * 2 : Thread[pool-1-thread-3,5,main]     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到使用起来也很简单，而且达到了同步的效果。废话不多说一起来瞅一瞅 lock() 和 unlock() 两个同步方法是怎么实现的。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p>公平锁顾名思义。就是每个线程排队抢占锁资源。而非公平锁线程什么时候能执行更多的看缘分，例如一个线程需要执行临界区代码，不管之前有多少线程在等，直接去抢锁，说白了就是插队。对于 ReentrantLock 的实现，从构造器看出，当我们传入 true 代表选择了公平锁模式</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>为什么先看公平锁实现，而不是默认的非公平锁，因为 synchronized 就是非公平锁，1.7开始 synchronized 的实现改变了，并且基本借鉴了 ReentrantLock 的实现，加入了自旋，偏向锁减少系统调用，所以如果需要非公平锁且不需要特别精细的控制，完全没有必要因为性能选择 ReentrantLock 了。</p><h3 id="AQS-结构"><a href="#AQS-结构" class="headerlink" title="AQS 结构"></a>AQS 结构</h3><p>从案例中的 lock 方法进入</p><ul><li><strong>ReentrantLock.FairSync#lock</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 要一把锁，向谁要锁？</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在继续深入之前让我们先熟悉一下 AbstractQueuedSynchronizer（AKA ：AQS） 的结构</p><ul><li>首先继承了 AbstractOwnableSynchronizer ，主要属性：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 保存当前持有锁的线程</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Thread</span> exclusiveOwnerThread<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ul><li>AQS 自身主要属性：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 阻塞队列的头</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span><span class="token comment">// 阻塞队列的尾</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span><span class="token comment">// 同步器的状态</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>从 head 和 tail 可以猜想到，AQS 应该是用一个链表作为等待队列，给等待的线程排队， status 字段默认是0，一旦锁被某个线程占有就 +1，那为啥要用int呢？ 如果当前持有锁的这个线程（exclusiveOwnerThread）还要再来把锁，那状态还可以继续 +1，也就实现了可重入。</p><ul><li>上面的 Node 节点长啥样呢，不要被注释中 CLH 锁高大上的名称吓到，其实就是双向链表，主要属性：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 标识次节点是共享模式</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> <span class="token constant">SHARED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 标识次节点是独占模式</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> <span class="token constant">EXCLUSIVE</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 节点里装着排队的线程</span><span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span><span class="token comment">// 节点里装的线程放弃了，不抢锁了，可能超时了，可能中断了</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span> <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 下一个节点里的线程等待被通知出队</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIGNAL</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 节点里装的线程在等待执行条件，结合 Condition 使用</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONDITION</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 节点状态需要被传播到下一个节点，主要用在共享模式</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PROPAGATE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 标识节点的等待状态，初始0，取值是上面的 -3 ~ 1</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span><span class="token comment">// 前一个节点</span><span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span><span class="token comment">// 后一个节点</span><span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token comment">// 指向下一个等待条件 Condition</span><span class="token class-name">Node</span> nextWaiter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>去掉一些普通情况不会涉及的属性，如果有四个线程竞争，结构如下图所示：</p><p><a href="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-1.png"><img src="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-1.png" alt="img"></a></p><p>可以看到就是一个标准的头节点为空的双链表，为什么头节点是空？</p><h3 id="公平锁加锁"><a href="#公平锁加锁" class="headerlink" title="公平锁加锁"></a>公平锁加锁</h3><ul><li><strong>AbstractQueuedSynchronizer#acquire</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果尝试拿锁没成功，那就进等待队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 检测到线程被中断了，因为重置了中断信号但没做处理，再设置下中断位，让用户去处理，中断标准操作</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>ReentrantLock.FairSync#tryAcquire</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取AQS的 state 值</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当前没有线程持有锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果没有其他线程在排队（公平）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token comment">// 这里可能存在竞争 CAS 试着去抢一次锁</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 抢到锁了，把锁持有者改成自己，其他线程往后稍稍</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 锁已经被持有了，但如果锁主人就是自己，那欢迎光临（可重入）</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为其他线程进不来，这里不存在竞争，直接改锁状态</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#hasQueuedPredecessors</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 返回 false 代表不需要排队，true 代表要排队</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> s<span class="token punctuation">;</span>    <span class="token comment">// h == t 头等于尾只可能是刚初始的状态或者已经没有节点等待了</span>    <span class="token comment">// h.next == null ？ 下面介绍进队的过程中，如果其他线程与此同时 tryAcquire 成功了，会把之前的head.next置为空，说明被捷足先登了，差一点可惜</span>    <span class="token comment">// 如果到最后一个判断了，也就是队列中至少有一个等待节点，直接看第一个等待节点是不是自己，如果不是自己就乖乖排队去</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#addWaiter</strong></li></ul><p>tryAcquire如果没有拿到锁，就需要进等待队列了，变成一个 Node 实例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里 mode 为独占模式</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment">// 如果尾节点不为空，说明等待队列已经初始化过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token comment">// 尝试把自己放到队尾</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 进来这里说明，等待队列没有被初始化过，或者尝试失败了</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#enq</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token comment">// 如果尾节点是空，说明队列没有初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 初始化一个空节点（延迟加载），head ，tail都指向它</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// 一直尝试把自己塞到队尾（自旋）</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#acquireQueued</strong></li></ul><p>addWaiter方法已经把等待线程包装成节点放到等待队列了，acquireQueued自旋抢锁，醒了就抢，为啥要返回中断标识呢？主要是为了给一些需要处理中断的方式复用，例如 <strong>ReentrantLock#lockInterruptibly</strong>，以及带超时的锁，以及Condition</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 这边逻辑开始绕起来了</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 拿前一个节点</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 前一个节点是head，说明自己排在第一个</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span>                 <span class="token comment">// 在让出cpu前再试一次，此时可能锁持有者已经让位了</span>                <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 抢到锁了</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 把之前没用的头节点释放</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 两次尝试都失败了，只能准备被挂起,让出cpu了（调了内核，重量级）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 普通的锁不处理中断异常，不会进这个方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 把头节点设为自己</span>    head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment">// 因为已经抢到锁了，不需要记录这个线程在等待了，保持了头节点中线程永远为 null</span>    node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#shouldParkAfterFailedAcquire</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span>        <span class="token comment">// 已经告诉前一个节点自己需要被通知了</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只有 CANCELLED 这个状态大于0，如果前面的节点不排队了，就一直找到一个没 CANCELLED 的</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 进到这里，只剩下PROPAGATE（共享锁时候才有） CONDITION（本文不涉及） 和 未赋值状态也就是0， </span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里把 默认状态0 置为 -1，也就代表着后面有线程在等着被唤醒了</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回false，就暂时不会让线程挂起，继续自旋，直到返回true</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#parkAndCheckInterrupt</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 挂起，标准用法this充当blocker </span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一旦恢复，返回线程在挂起阶段是否被中断，此方法会重置中断位</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>到这里加锁流程就介绍差不多了，用一个最简单流程的图来总结一下：</p><p><a href="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-2.png"><img src="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-2.png" alt="img"></a></p><h3 id="公平锁解锁"><a href="#公平锁解锁" class="headerlink" title="公平锁解锁"></a>公平锁解锁</h3><ul><li><strong>AbstractQueuedSynchronizer#release</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试释放锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 如果等待队列已经被初始化过，并且后面有节点等待操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 恢复挂起的线程</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>ReentrantLock.FairSync#tryRelease</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token comment">// 能执行释放锁的肯定是锁的持有者，除非虚拟机魔怔了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 考虑可重入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 锁现在没有持有者了</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>ReentrantLock.FairSync#unparkSuccessor</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// node 是头节点</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment">// 如果状态不是 CANCELED，就把状态置为初始状态 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// s == null 这个条件成立主要是在共享模式下自旋释放。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 把 CANCELED 状态的节点置为空</span>        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 因为 head 这条路已经断了，从尾巴开始找到第一个排队的节点，然后把队列接上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// 把第一个排队的节点中的线程唤醒，</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>线程从加锁代码里介绍的 <strong>AbstractQueuedSynchronizer#parkAndCheckInterrupt</strong> 方法中醒来，继续自旋拿锁。如果此时后面还有人排队就一定能拿到锁了。如图所示：</p><p><a href="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-3.png"><img src="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-1-3.png" alt="img"></a></p><h3 id="非公平锁加锁"><a href="#非公平锁加锁" class="headerlink" title="非公平锁加锁"></a>非公平锁加锁</h3><ul><li><strong>ReentrantLock.NonfairSync#lock</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 不管三七二十一，直接抢锁，如果运气好，锁正好被释放了，就不排队了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 和上面介绍的公平锁一样，只是 tryAcquire 实现不一样</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>ReentrantLock.Sync#nonfairTryAcquire</strong></li></ul><p>上面公平锁我们已经知道，线程真正挂起前会尝试两次，由于不考虑别人有没有入队，实现非常简单</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果没有线程持有锁，直接抢锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果是重入，状态累加</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="非公平锁解锁"><a href="#非公平锁解锁" class="headerlink" title="非公平锁解锁"></a>非公平锁解锁</h3><p>因为都是独占锁模式，解锁和公平锁逻辑一样。</p><h3 id="感知中断锁"><a href="#感知中断锁" class="headerlink" title="感知中断锁"></a>感知中断锁</h3><p>如果我们希望检测到中断后能立刻抛出异常就用 lockInterruptibly 方法去加锁，还是建议用 lock 方法，自定义中断处理，更灵活一点。</p><ul><li><strong>ReentrantLock#lockInterruptibly</strong></li></ul><p>我们只需要把 <strong>ReentrantLock#lock</strong> 改成 <strong>ReentrantLock#lockInterruptibly</strong> 方法就可以获得内部检测中断的锁了</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#acquireInterruptibly</strong></li></ul><p>主要流程和前文介绍的类似</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 一上来就检查下中断，中断直接异常，就没必要抢锁排队了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#doAcquireInterruptibly</strong></li></ul><p>和正常加锁唯一区别就是这个方法，但是定睛一看是不是似曾相识？最大区别就是把中断标识给去掉了，检测到中断直接抛异常</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 大神也偷懒了，因为这个方法，只有独占锁且检查中断这一个应用场景，把节点入队的步骤也揉了进来</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">// 当线程拿到锁苏醒过来，发现自己挂起过程被中断了，直接抛出异常</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 只要发生了中断异常，就会进取消加锁方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#cancelAcquire</strong></li></ul><p>此方法很有东西，只保证该节点失效，然后延迟移出等待队列</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 把节点里登记等待的线程去掉，完成这一步此节点已经没有作用了</span>    node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 下面的三步其实可以放到一个CAS中，直接设置 CANCELLED 状态 ，拿前一个节点，predNext 也必然是自己，但是吞吐量就下来了</span>    <span class="token comment">// 这里大神，没有这样做也是出于了性能考虑，因为我们已经把等待线程设置成 null 了，所以此节点已经没有任何意义，没有必要去保证节点第一时间被释放，只要设置好 CANCELLED 状态</span>    <span class="token comment">// 就算后面 CAS 调整等待队列失败了，下次取消操作也会帮着回收。相应地代码复杂度提高了。</span>      <span class="token comment">/* ----------------------------------------- */</span>    <span class="token comment">// 找到自己前面第一个没取消的节点，</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment">// 主要是为了下面把链表接上</span>    <span class="token class-name">Node</span> predNext <span class="token operator">=</span> pred<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 这里逻辑上把当前节点的状态设置成取消，便于检测释放</span>    node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CANCELLED</span><span class="token punctuation">;</span>  <span class="token comment">/* ----------------------------------------- */</span>      <span class="token comment">// 如果当前节点是尾节点，就把前一个没取消的节点设成新尾巴</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 把新尾巴的 next 设置成空</span>        <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 进到这里说明当前节点肯定不是尾节点了</span>        <span class="token keyword">int</span> ws<span class="token punctuation">;</span>      <span class="token comment">// 条件1: 如果前一个非取消节点不是头，也就是还需要排队</span>      <span class="token comment">// 条件2: 如果前一个节点为 SIGNAL，也就是说后面肯定还有线程等待被唤醒</span>      <span class="token comment">// 条件3: 如果前一个节点也取消了，说明前一个节点也取消了，还没来得及设置状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span> <span class="token operator">||</span>             <span class="token punctuation">(</span>ws <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            pred<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token comment">// 当前节点后一个没取消的话，就接到前一个正常的节点后面</span>                <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 前一篇文章解锁部分讲过，会把下一个节点中的线程恢复，然后把后继节点接上</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token comment">// 有点花里胡哨，直接 = null不行么，</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// help GC</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>来张图说明下，假如我们目前等待队列里有7个线程：</p><p><a href="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-2-1.png"><img src="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-2-1.png" alt="img"></a></p><h3 id="等待条件锁"><a href="#等待条件锁" class="headerlink" title="等待条件锁"></a>等待条件锁</h3><p>上篇文章看源码过程中，AQS中有个 CONDITION 状态没有研究</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONDITION</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>ReentrantLock 中的 newCondition 等 Condition 相关方法正是基于 AQS 中的实现的，让我们先大致了解一波作用和用法</p><h4 id="Condition简介"><a href="#Condition简介" class="headerlink" title="Condition简介"></a>Condition简介</h4><p>Condition 类似于 Object 中的 wait 和 notify ，主要用于线程间通信，最大的优势是 Object 的 wait 是把线程放到当前对象的等待池中，也就是说一个对象只能有一个等待条件，而 Condition 可以支持多个等待条件，举个例子，商品要等至少三个人预定了才开始发售，第一个预定的减500，第二三两个减100。正式发售之后恢复原价。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockConditionDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> wait1 <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> wait2 <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> wait1Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> wait2Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>wait1Count<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"减500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wait1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                price <span class="token operator">-=</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            wait1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>wait2Count<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"减100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wait2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                price <span class="token operator">-=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            wait2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"到手价"</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReentrantLockConditionDemo</span> reentrantLockConditionDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockConditionDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-></span> executorService                        <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>reentrantLockConditionDemo<span class="token operator">::</span><span class="token function">buy</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">/**     * 输出：     *     * pool-1-thread-1减500     * pool-1-thread-2减100     * pool-1-thread-3减100     * pool-1-thread-4到手价999     * pool-1-thread-5到手价999     * pool-1-thread-1到手价499     * pool-1-thread-2到手价899     * pool-1-thread-3到手价899     */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>ReentrantLock#newCondition</strong></li></ul><p>先来看条件的创建，需要基于锁对象使用 newCondition 去创建</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">ConditionObject</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ConditionObject 是 AQS 中对 Condition 的实现</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="ConditionObject结构"><a href="#ConditionObject结构" class="headerlink" title="ConditionObject结构"></a>ConditionObject结构</h4><p>上一篇文章中介绍了 Node 结构，这里条件也使用了这个节点定义了一个单链表，统称为条件队列，上一篇介绍统称同步队列。条件队列结构相当简单就不单独画图了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 条件队列头</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Node</span> firstWaiter<span class="token punctuation">;</span><span class="token comment">// 条件队列尾</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Node</span> lastWaiter<span class="token punctuation">;</span><span class="token comment">// 因为默认感知中断，需要考虑如何处理</span><span class="token comment">// 退出条件队列时重新设置中断位</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REINTERRUPT</span> <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 退出条件队列时直接抛异常</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THROW_IE</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="条件队列入队"><a href="#条件队列入队" class="headerlink" title="条件队列入队"></a>条件队列入队</h4><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#await</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 到条件队列中排队，下文详解</span>  <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 此方法比较简单，就是调用前一篇讲过的 release 方法释放锁（调用 await 时必定是锁的持有者）</span>  <span class="token comment">// savedState 是进入条件队列前，持有锁的数量</span>  <span class="token comment">// 失败会直接抛出异常，并且最终把节点状态设置为 CANCELLED</span>  <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 判断在不在同步队列（当调用signal之后会从条件队列移到同步队列），此判断很简单：节点状态是 CONDITION 肯定 false，否则就到同步队列中去找</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 挂起</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查是不是因为中断被唤醒的，下文详解</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 上一篇介绍过acquireQueued自旋抢锁，如果抢到锁了，并且中断模式不是 -1（默认0），就记录中断模式为1，表示需要重新设置中断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> <span class="token constant">THROW_IE</span><span class="token punctuation">)</span>    interruptMode <span class="token operator">=</span> <span class="token constant">REINTERRUPT</span><span class="token punctuation">;</span>  <span class="token comment">// 清除条件队列中取消的节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment">// 下文详解，在addConditionWaiter方法中也有用到</span>    <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理中断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// 1：再次中断-1:抛出异常</span>    <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#addConditionWaiter</strong></li></ul><p>加入条件队列</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Node</span> t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>  <span class="token comment">// 如果条件队列最后一个节点取消了，就清理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CONDITION</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 新建一个 waitStatus = -2 的节点</span>  <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CONDITION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下面是简单的单链表操作，之前同步队列入队用的 CAS 操作，因为会有很多线程去抢锁，而线程进入条件队列一定是拿到锁了，不满足条件了，所以不存在并发问题</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token keyword">else</span>    t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>  lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#unlinkCancelledWaiters</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> t <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token comment">// 辅助变量，用于接尾巴，trail始终等于循环中当前节点t的上一个不是取消状态的节点</span>    <span class="token class-name">Node</span> trail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> next <span class="token operator">=</span> t<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>        <span class="token comment">// 判断当前节点有没有取消</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CONDITION</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 断当前节点链</span>            t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// trail == null 说明目前条件队列里面全取消了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token comment">// 头节点指向第一个没取消的节点</span>                firstWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment">// trail 是 t 的前一个节点，也就是踢出了 t</span>                trail<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token comment">// 如果最后一个节点取消了，那需要改一下尾指针</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                lastWaiter <span class="token operator">=</span> trail<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            trail <span class="token operator">=</span> t<span class="token punctuation">;</span>        t <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#checkInterruptWhileWaiting</strong></li></ul><p>上文 await 方法中，线程一旦唤醒会先检查中断</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没中断，返回0，中断了需要放回同步队列</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token punctuation">(</span><span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">THROW_IE</span> <span class="token operator">:</span> <span class="token constant">REINTERRUPT</span><span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#transferAfterCancelledWait</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 把因为中断醒来的节点，设置状态为全新的节点，从条件队列放入同步队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CONDITION</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 上面改状态为什么要 CAS ? 如果中断唤醒的同时被 signal 唤醒了，在 signal 入队成功之前让出cpu，但是不释放锁</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="条件队列出队"><a href="#条件队列出队" class="headerlink" title="条件队列出队"></a>条件队列出队</h4><p>单个唤醒和唤醒所以掉的方法类似，看一个单个唤醒流程就可</p><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#signal</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果持有锁的线程不是当前线程就抛异常，也就是只有获得锁的线程可以执行唤醒操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token comment">// 通知条件队列中的第一个节点，也就是等的最久的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token function">doSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer.ConditionObject#doSignal</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 把 first 断链</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            lastWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 如果转移到同步队列失败了，并且还有条件队列不为空就唤醒下一个</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>AbstractQueuedSynchronizer#transferForSignal</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果节点取消了，转移失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CONDITION</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 这里的 p 是 node 在同步队列里的前驱节点</span>    <span class="token class-name">Node</span> p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment">// 看过上一篇文章应该有映像，只要是进同步队列，都需要把前一个节点状态设为 -1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 如果取消了，或者状态设置失败，唤醒后继续挂起</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>最后按照惯例结合上面的案例，画张图总结下：</p><p><a href="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-2-2.png"><img src="https://cdn.jsdelivr.net/gh/freshchen/resource@master/img/draw/aqs-2-2.png" alt="img"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，总算看完了 ReentrantLock 常规的加锁解锁源码，好好体会下 AQS 的结构，Doug Lea 大神牛B。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java使用JPackage打包为exe</title>
    <link href="/Java/2020/01/04/Java%E4%BD%BF%E7%94%A8JPackage%E6%89%93%E5%8C%85%E4%B8%BAexe/"/>
    <url>/Java/2020/01/04/Java%E4%BD%BF%E7%94%A8JPackage%E6%89%93%E5%8C%85%E4%B8%BAexe/</url>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>JDK14以上</li><li>jpackage在环境变量中</li><li>Wix和.Net Framework 3.5.1（可选）</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>将Java程序打包为可正常运行的Jar，使用maven或自带打包都行。maven命令如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>在项目根目录下运行如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpackage <span class="token parameter variable">--type</span> app-image <span class="token parameter variable">--name</span> spring <span class="token parameter variable">--input</span> target --main-jar spring.jar --win-console <span class="token parameter variable">--dest</span> dist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>作用</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>–type</td><td>打包类型</td><td>app-image</td><td>可选：”app-image”, “exe”, “msi”，这里使用app-image，选择另外两个选项需要安装WiX</td></tr><tr><td>–name</td><td>应用名称</td><td>spring</td><td>打包后的名称，如”sping.exe”</td></tr><tr><td>–input</td><td>输入目录</td><td>target</td><td>该目录所有文件打包到应用目录中</td></tr><tr><td>–main-jar</td><td>应用主jar</td><td>spring-1.0.jar</td><td>–input目录里的jar程序</td></tr><tr><td>–win-console</td><td>运行时启动控制台</td><td>–win-console</td><td>打开应用程序时，打开控制台。如果不启用在后台运行，关闭只能从任务管理器中结束任务</td></tr><tr><td>–dest</td><td>输出目录</td><td>dist</td><td>输出到该目录，不要和–input同个目录，否则会无限循环复制目录</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序+mpvue+vant的打开方式</title>
    <link href="/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/2019/12/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-mpvue-vant%E7%9A%84%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/2019/12/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-mpvue-vant%E7%9A%84%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-mpvue-vant的打开方式"><a href="#微信小程序-mpvue-vant的打开方式" class="headerlink" title="微信小程序+mpvue+vant的打开方式"></a>微信小程序+mpvue+vant的打开方式</h1><p>前阵子使用mpvue构建微信小程序，在引入其他框架时出现了一点问题，需要去修改配置，这里给出具体的配置流程。</p><span id="more"></span><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>按照正常流程创建工程</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vue init mpvue/mpvue-quickstart demo<span class="token builtin class-name">cd</span> demo<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 这一步是选择依赖是否在开发环境安装，可根据工程实际情况自行配置</span><span class="token function">npm</span> i vant-weapp <span class="token parameter variable">-S</span> <span class="token parameter variable">--production</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="修改webpack"><a href="#修改webpack" class="headerlink" title="修改webpack"></a>修改webpack</h2><p>在项目根目录下找到<code>build/webpack.base.conf.js</code>，在<code>baseWebpackConfig.plugins</code>中添加以下代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/vant-weapp/dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'dist/wx/vant-weapp/dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.*'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h2><p>这里只需要在<code>src/app.json</code>中添加所需要的组件即可，不需要在vue文件中再次import</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"van-button"</span><span class="token operator">:</span> <span class="token string">"vant-weapp/dist/button/index"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>实际上思路还是很明确的，微信的npm是自成一体，所以需要把工程中引入的第三方npm包复制到微信的npm中一份。在引入完毕后，在<code>app.json</code>中统一进行组件的引入。</p><p>另外可能出现这样的报错</p><p><img src="/image-20191220102739192.png" alt="image-20191220102739192"></p><p>这个时候打开微信的转译就好了，把es6编译成es5</p>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于docker版nginx的几点注意</title>
    <link href="/Docker/2019/11/16/%E5%85%B3%E4%BA%8Edocker%E7%89%88nginx%E7%9A%84%E5%87%A0%E7%82%B9%E6%B3%A8%E6%84%8F/"/>
    <url>/Docker/2019/11/16/%E5%85%B3%E4%BA%8Edocker%E7%89%88nginx%E7%9A%84%E5%87%A0%E7%82%B9%E6%B3%A8%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于docker版nginx的几点注意"><a href="#关于docker版nginx的几点注意" class="headerlink" title="关于docker版nginx的几点注意"></a>关于docker版nginx的几点注意</h1><ol><li>在启动nginx时，如果使用<code>-v</code>参数映射了宿主机目录，用来映射配置文件，日志等文件，则需要预先创建好，不然会报文件not found。</li><li>如果在启动时，使用了命令，如<code>nginx -c</code>等，则需要在配置文件种加上<code>daemon off;</code>或者<code>nginx -g &#39;daemon off;&#39;</code>,这使nginx转入后台运行，避免docker启动后因在前台运行导致立刻停机。</li><li>如果在<code>nginx.conf</code>中，配置了路由转发，并且所转发到的服务未使用docker构建，则要使用本机ip或域名访问，不可使用<code>localhost</code>或者<code>127.0.0.1</code>，会导致无法访问（404），因为docker使用的网络默认使docker的内网（bridge）。如果想要使用<code>localhost</code>等，请将<code>network</code>设置为<code>host</code>（<code>--network host</code>）</li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用flex制作滚动列表</title>
    <link href="/%E5%89%8D%E7%AB%AF/2019/11/03/%E4%BD%BF%E7%94%A8flex%E5%88%B6%E4%BD%9C%E6%BB%9A%E5%8A%A8%E5%88%97%E8%A1%A8/"/>
    <url>/%E5%89%8D%E7%AB%AF/2019/11/03/%E4%BD%BF%E7%94%A8flex%E5%88%B6%E4%BD%9C%E6%BB%9A%E5%8A%A8%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="使用flex制作滚动列表"><a href="#使用flex制作滚动列表" class="headerlink" title="使用flex制作滚动列表"></a>使用flex制作滚动列表</h1><p>因为自己在做一点小东西，所以就有个需求，一个元素里面需要有两个子元素，两个子元素竖排排列，第二个子元素里面的内容不定长，需要做滚动，但第二个元素的高度需要自适应。</p><p>在学习的过程稿发现flex和overflow挺有意思的，特此记录下来。</p><span id="more"></span><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> #66ccff</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">*</span> <span class="token punctuation">&#123;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden    <span class="token punctuation">&#125;</span>    <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <meta http-equiv="X-UA-Compatible" content="ie=edge">  <title>Document</title></head><body>  <div class="parent">    <div style="height: 200px; background: #66ccff">标题</div>    <ul>      <li>1</li>      <li>2</li>      <li>3</li>      <li>4</li>      <li>5</li>      <li>6</li>    </ul>  </div>  <style>    * {      padding: 0;      margin: 0;    }    .parent {      display: flex;      flex-direction: column;      height: 500px;      overflow: hidden    }    .parent ul {      overflow: auto;    }    .parent li {      height: 200px;      border: 1px solid #ccc;    }  </style></body></html><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先是<code>.parent</code>。将display设置为弹性布局，并且规定了布局方向为竖排，对于溢出元素的处理方式设置为隐藏。这样的情况下，html就会将这个元素里面的布局重置，保证了里面的元素可以自适应高度，不会出现子元素与父元素高度相同的情况，并且对于移除内容进行了隐藏</p><p>第二就是<code>ul</code>。对于其中<code>ul</code>其中的溢出元素做了自动处理，实际上是将溢出元素设置为滚动，这样ul里面的元素就可以进行滚动。</p><p>第三要注意<code>height</code>。如果要求<code>ul</code>为自适应，则height一定为<code>100%</code>（或者<code>inherit</code>）,并且父级元素需要显式的设置高度，不能为<code>auto</code></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx匹配规则</title>
    <link href="/Nginx/2019/10/17/nginx%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/"/>
    <url>/Nginx/2019/10/17/nginx%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h2 id="一、语法规则"><a href="#一、语法规则" class="headerlink" title="一、语法规则"></a>一、语法规则</h2><figure><div class="code-wrapper"><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> [=|~|~*|^~] /uri/</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><table><thead><tr><th align="center">符&amp;nbsp;号</th><th align="left">含&amp;nbsp;义</th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="left">开头表示精确匹配</td></tr><tr><td align="center"><code>^~</code></td><td align="left">开头表示 uri 以某个常规字符串开头，理解为匹配 <code>url</code> 路径即可。<code>nginx</code> 不对 <code>url</code> 做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）</td></tr><tr><td align="center"><code>~</code></td><td align="left">开头表示区分大小写的正则匹配</td></tr><tr><td align="center"><code>~*</code></td><td align="left">开头表示不区分大小写的正则匹配</td></tr><tr><td align="center"><code>/</code></td><td align="left">通用匹配，任何请求都会匹配到</td></tr></tbody></table><span id="more"></span><h4 id="多个-location-配置的情况下匹配顺序为"><a href="#多个-location-配置的情况下匹配顺序为" class="headerlink" title="多个 location 配置的情况下匹配顺序为"></a>多个 location 配置的情况下匹配顺序为</h4><blockquote><ul><li>首先匹配 <code>=</code></li><li>其次匹配 <code>^~</code></li><li>其次是按文件中顺序的正则匹配</li><li>最后是交给 &#x2F; 通用匹配</li><li>当有匹配成功时候，停止匹配，按当前匹配规则处理请求</li></ul></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> = /</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则A</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> = /login</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则B</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ^~ /static/</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则C</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ \.(gif|jpg|png|js|css)$</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则D</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~* \.png$</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则E</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>   <span class="token comment">#规则F</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>那么产生的效果如下：</p><ul><li>访问根目录 &#x2F;， 比如 <a href="http://localhost/">http://localhost/</a> 将匹配规则 A</li><li>访问 <a href="http://localhost/login">http://localhost/login</a> 将匹配规则 B，<a href="http://localhost/register">http://localhost/register</a> 则匹配规则 F</li><li>访问 <a href="http://localhost/static/a.html">http://localhost/static/a.html</a> 将匹配规则 C</li><li>访问 <a href="http://localhost/a.gif">http://localhost/a.gif</a>, <a href="http://localhost/b.jpg">http://localhost/b.jpg</a> 将匹配规则 D和规则 E，但是规则 D 顺序优先，规则 E不起作用，而 <a href="http://localhost/static/c.png%E5%88%99%E4%BC%98%E5%85%88%E5%8C%B9%E9%85%8D%E5%88%B0%E8%A7%84%E5%88%99">http://localhost/static/c.png则优先匹配到规则</a> C</li><li>访问 <a href="http://localhost/a.PNG">http://localhost/a.PNG</a> 则匹配规则 E，而不会匹配规则 D，因为规则 E 不区分大小写</li><li>访问 <a href="http://localhost/category/id/1111">http://localhost/category/id/1111</a> 则最终匹配到规则 F，因为以上规则都不匹配，这个时候应该是 nginx 转发请求给后端应用服务器，比如 FastCGI（PHP），tomcat（jsp），nginx 作为反向代理服务器存在</li></ul></blockquote><h2 id="二、运用场景"><a href="#二、运用场景" class="headerlink" title="二、运用场景"></a>二、运用场景</h2><h4 id="实际使用中，至少有三个匹配规则定义，如下："><a href="#实际使用中，至少有三个匹配规则定义，如下：" class="headerlink" title="实际使用中，至少有三个匹配规则定义，如下："></a>实际使用中，至少有三个匹配规则定义，如下：</h4><figure><div class="code-wrapper"><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><span class="token comment"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><span class="token comment"># 第一个必选规则</span><span class="token directive"><span class="token keyword">location</span> = /</span> <span class="token punctuation">&#123;</span>    proxy_pass http://tomcat:8080/index<span class="token punctuation">&#125;</span><span class="token comment"># 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项</span><span class="token comment"># 有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</span><span class="token directive"><span class="token keyword">location</span> ^~ /static/</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">root</span> /webroot/static/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~* \.(gif|jpg|jpeg|png|css|js|ico)$</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">root</span> /webroot/res/</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><span class="token comment"># 非静态文件请求就默认是动态请求，自己根据实际把握</span><span class="token comment"># 毕竟目前的一些框架的流行，带.php、.jsp后缀的情况很少了</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    proxy_pass http://tomcat:8080/<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/Linux/2019/10/17/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/Linux/2019/10/17/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>内存资源最多的前 10 个进程</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-auxf</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token parameter variable">-k</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p> CPU 资源最多的前 10 个进程 </p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-auxf</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token parameter variable">-k</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>find在根目录下根据文件名查找</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><span id="more"></span><h3 id="NGINX-一般目录"><a href="#NGINX-一般目录" class="headerlink" title="NGINX 一般目录"></a>NGINX 一般目录</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动文件</span>/usr/src/nginx/sbin/nginx<span class="token comment"># 配置文件</span>/usr/src/nginx/conf/nginx.conf<span class="token comment"># 日志目录</span>/usr/src/nginx/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="SSH-KEY-生成"><a href="#SSH-KEY-生成" class="headerlink" title="SSH KEY 生成"></a>SSH KEY 生成</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span class="token comment"># 三连回车</span>ssh-agent <span class="token parameter variable">-s</span><span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>ssh-agent <span class="token parameter variable">-s</span><span class="token variable">`</span></span>ssh-add ~/.ssh/id_rsa<span class="token comment"># 添加私钥登录</span><span class="token builtin class-name">cd</span> .ssh<span class="token function">cat</span> id_rsa.pub <span class="token operator">>></span> authorized_keys<span class="token function">chmod</span> <span class="token number">600</span> authorized_keys<span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh<span class="token comment"># 编辑 /etc/ssh/sshd_config 开启私钥登录</span><span class="token comment"># ------------------------------------</span>RSAAuthentication <span class="token function">yes</span>PubkeyAuthentication <span class="token function">yes</span><span class="token comment"># 留意 root 用户能否通过 SSH 登录</span>PermitRootLogin <span class="token function">yes</span><span class="token comment"># 禁用密码登录</span>PasswordAuthentication no<span class="token comment"># ------------------------------------</span><span class="token comment"># 重启 SSH 服务</span><span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="建立swap分区"><a href="#建立swap分区" class="headerlink" title="建立swap分区"></a>建立swap分区</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）。</span><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/root/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span><span class="token comment">#2.格式化为交换分区文件:</span><span class="token function">mkswap</span> /root/swapfile<span class="token comment">#3.启用交换分区文件:</span><span class="token function">swapon</span> /root/swapfile<span class="token comment">#4.使系统开机时自启用，在文件/etc/fstab中添加一行：</span><span class="token builtin class-name">echo</span> <span class="token string">"/root/swapfile swap swap defaults 0 0"</span> <span class="token operator">>></span>/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器自动部署脚本</title>
    <link href="/%E8%BF%90%E7%BB%B4/2019/09/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <url>/%E8%BF%90%E7%BB%B4/2019/09/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器自动部署脚本"><a href="#服务器自动部署脚本" class="headerlink" title="服务器自动部署脚本"></a>服务器自动部署脚本</h1><p>自搭服务器需要自动打包部署流程，写了个脚本，备忘。</p><p>没有特殊需求直接放在工程根目录下就可以。</p><span id="more"></span><h2 id="SHELL脚本"><a href="#SHELL脚本" class="headerlink" title="SHELL脚本"></a>SHELL脚本</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># 刷新环境变量</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># [$1]会作为git的分支信息处理</span><span class="token comment"># 工程路径, 绝对路径</span><span class="token assign-left variable">dirPath</span><span class="token operator">=</span><span class="token string">'DIR_PATH'</span><span class="token comment"># 项目名称</span><span class="token assign-left variable">appName</span><span class="token operator">=</span><span class="token string">'PROJECT_NAME'</span><span class="token comment"># 端口号, 会根据端口号关闭进程</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">8080</span><span class="token comment">############# 工具方法 ###############################</span><span class="token comment"># 自动stash，如果存在更改的内容</span><span class="token keyword">function</span> <span class="token function-name function">autoStash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> status <span class="token parameter variable">--porcelain</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span>    <span class="token function">git</span> stash push <span class="token parameter variable">-m</span> <span class="token string">"auto stash at: <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token comment">## 非阻塞延迟2-3秒</span><span class="token keyword">function</span> <span class="token function-name function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"loading..."</span>  <span class="token assign-left variable">ti1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>    <span class="token comment">#获取时间戳</span>  <span class="token assign-left variable">ti2</span><span class="token operator">=</span><span class="token variable">$ti1</span>  <span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$((</span>ti2 <span class="token operator">-</span> ti1 <span class="token variable">))</span></span>"</span> <span class="token parameter variable">-le</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">do</span>  <span class="token assign-left variable">ti2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>  <span class="token keyword">done</span><span class="token punctuation">&#125;</span><span class="token comment">##################################################</span><span class="token comment">#     start to run application                   #</span><span class="token comment">##################################################</span><span class="token comment"># 拉取新代码并打包</span><span class="token keyword">if</span> <span class="token variable">$dirPath</span> <span class="token keyword">then</span> <span class="token builtin class-name">cd</span> <span class="token variable">$dirPath</span><span class="token keyword">fi</span><span class="token comment"># 自动stash</span>autoStash<span class="token comment"># 支持外部传递分支名称，没有则按当前默认分支处理</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch --show-current<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  <span class="token assign-left variable">branch</span><span class="token operator">=</span><span class="token variable">$1</span>  <span class="token function">git</span> checkout <span class="token string">"<span class="token variable">$branch</span>"</span>  <span class="token function">git</span> pull origin <span class="token string">"<span class="token variable">$branch</span>"</span><span class="token keyword">else</span>  <span class="token function">git</span> pull<span class="token keyword">fi</span>mvn clean package <span class="token parameter variable">-U</span> <span class="token parameter variable">-DskipTests</span><span class="token operator">=</span>true<span class="token comment"># 根据端口号查询对应的pid，并删除服务进程</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">netstat</span> <span class="token parameter variable">-nlp</span> <span class="token operator">|</span> <span class="token function">grep</span> :$port <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $7&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">"/"</span> <span class="token string">'&#123; print $1 &#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$pid</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span>  <span class="token parameter variable">-n</span>  <span class="token string">"<span class="token variable">$pid</span>"</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">then</span>    <span class="token function">kill</span>  <span class="token parameter variable">-9</span>  <span class="token string">"<span class="token variable">$pid</span>"</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment"># 删除老文件，复制新文件</span><span class="token function">rm</span> <span class="token variable">$dirPath</span>/app/<span class="token variable">$appName</span>.jar <span class="token parameter variable">-f</span><span class="token function">rm</span> <span class="token variable">$dirPath</span>/logs/<span class="token variable">$appName</span>.log <span class="token parameter variable">-f</span><span class="token function">mv</span> ./target/app.jar ./target/<span class="token variable">$appName</span>.jar<span class="token comment"># 启动项目</span><span class="token builtin class-name">cd</span> <span class="token variable">$dirPath</span>/ <span class="token operator">||</span> <span class="token function">mkdir</span> logs <span class="token operator">||</span> <span class="token builtin class-name">exit</span><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-Xms512m</span> <span class="token parameter variable">-Xmx1024m</span> <span class="token punctuation">\</span> ./target/<span class="token variable">$appName</span>.jar <span class="token operator">></span> ./logs/<span class="token variable">$appName</span>.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 添加一点延迟，等待日志文件创建，避免tail失败</span>delay<span class="token function">tail</span> <span class="token parameter variable">-f</span> ./logs/<span class="token variable">$appName</span>.log <span class="token parameter variable">-n</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="maven打包配置"><a href="#maven打包配置" class="headerlink" title="maven打包配置"></a>maven打包配置</h2><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtensions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>xlsx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>xls<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>ttf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>ttc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtensions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>$&#123;project.build.sourceEncoding&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-javadoc-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>$&#123;maven.javadoc.skip&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-javadocs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalOptions</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalOption</span><span class="token punctuation">></span></span>                                -Xdoclint:none                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalOption</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalOptions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>$&#123;maven.springboot.skip&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*Test.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*Spec.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab的specificRunner安装与注册</title>
    <link href="/Gitlab/2019/08/26/Gitlab%E7%9A%84specificRunner%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/"/>
    <url>/Gitlab/2019/08/26/Gitlab%E7%9A%84specificRunner%E5%AE%89%E8%A3%85%E4%B8%8E%E6%B3%A8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab的specificRunner安装与注册"><a href="#Gitlab的specificRunner安装与注册" class="headerlink" title="Gitlab的specificRunner安装与注册"></a>Gitlab的specificRunner安装与注册</h1><p>这里使用docker版本的specificRunner，以下命令可直接使用。</p><p>注册时必须须替换<code>url</code>和 <code>registration-token</code>，其他项可按需求更改。</p><span id="more"></span><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>拉下最新版本镜像</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull gitlab/gitlab-runner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>启动启动容器</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab-runner <span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /srv/gitlab-runner/config:/etc/gitlab-runner <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>  gitlab/gitlab-runner:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>runner注册</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab-runner gitlab-runner register <span class="token punctuation">\</span>  --non-interactive <span class="token punctuation">\</span>  <span class="token parameter variable">--executor</span> <span class="token string">"docker"</span> <span class="token punctuation">\</span>  --docker-image alpine:latest <span class="token punctuation">\</span>  <span class="token parameter variable">--url</span> <span class="token string">"https://gitlab.com/"</span> <span class="token punctuation">\</span>  --registration-token <span class="token string">"PROJECT_REGISTRATION_TOKEN"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--description</span> <span class="token string">"docker-runner"</span> <span class="token punctuation">\</span>  --tag-list <span class="token string">"docker"</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>url</code>和 <code>registration-token</code>是在Gitlab的CI&#x2F;CD页面</p><p><img src="/1566811661513.png" alt="1566811661513"></p></li><li><p>检查注册是否成功</p><p><img src="/1566811779484.png" alt="1566811779484"></p><p>绿色代表注册成功。</p><p><img src="/1566811872456.png" alt="1566811872456"></p><p>如果ip与本机不同，不用担心，这是gitlab分配的地址，可以正常调用。</p></li><li><p>查看日志</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> gitlab-runner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>   如果是虚拟机中的docker，则需要将虚拟机挂在到物理网络才可以连接。否则虽然虚拟机中的runner可以注册到gitlab，但gitlab无法访问</p>]]></content>
    
    
    <categories>
      
      <category>Gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对业务场景的解决方案</title>
    <link href="/%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/2019/08/15/%E9%92%88%E5%AF%B9%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/2019/08/15/%E9%92%88%E5%AF%B9%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="针对业务场景的解决方案"><a href="#针对业务场景的解决方案" class="headerlink" title="针对业务场景的解决方案"></a>针对业务场景的解决方案</h1><p>​这是一个系列专题，是根据我所经历的具体的业务场景所用到的解决方案和技术架构设计的一个汇总。</p><p>​一方面是对一直以来的经历做一个总结，在以后做项目的时候有一个基础的想法。</p><p>​另一方面是秉承这开源的精神，希望大家在接到甲方爸爸的需求时候，起码一个基本的解决方案的思路方向，不至于心里没底。</p><p>​如果针对某一场景，在以后的工作中有更好的解决方案，我也会更新进来并说明原因及优劣。</p><span id="more"></span><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><p>​基础篇包括表设计原则，API设计原则，工程结构设计原则，事务设计原则</p><h3 id="表设计原则"><a href="#表设计原则" class="headerlink" title="表设计原则"></a>表设计原则</h3><h4 id="锁的设计"><a href="#锁的设计" class="headerlink" title="锁的设计"></a>锁的设计</h4><p>​乐观锁和悲观锁都是经常使用的锁，现在大多使用的都是乐观锁，悲观锁由于其特性（一人编辑，其他人无法做任何操作，包括查看）很少被使用，这里不作赘述，现在主要是对于锁存在的情况下，异步更新数据所引发的问题。</p><blockquote><p>场景：</p><p>​在一个订单系统中，用到的数据库是TiDB，采用乐观锁。订单在提交后，需要将数据导出到外部系统，并且在外部系统生成外部系统订单号，由于外部系统的响应时间不确定，因此需要做成异步。</p><p>问题：</p><p>​由于TiDB的默认事务级别是<code>快照隔离</code>，并不是他文档上描述的<code>可重复读</code>。因此在主线程事务没有提交时，异步线程开启，此时主线程的事务还未提交，这时候订单的版本号并不是最新的，如果异步事务根据这个版本号更新，则会发生无法更新的异常，异步事务直接结束。</p><p>解决：</p><p>​订单增加回传状态flag相关字段，并将异步回传的事务提取出来，与订单能正常提交的事务拆开，两个事务放在controller层。在确定订单提交事务的提交后，再进行异步事务。是否成功更新回传flag。</p><p>预防：</p><p>​两手准备：</p><ol><li>应把异步字段单独提取出来形成一张表，表中不应含有锁字段<code>版本号</code>。这样可以解决锁的问题</li><li>在调用异步方法时，应直接传入最新的对象，不应传入对象的主键ID在再异步方法中查出数据。这样可以解决数据库隔离级别的问题。</li></ol></blockquote><h4 id="字段的设计"><a href="#字段的设计" class="headerlink" title="字段的设计"></a>字段的设计</h4><p>​对于业务单据来说，字段主要分为两大类：<code>状态字段</code>、<code>值字段</code>、<code>管控维度字段</code>。状态字段包括新建状态，提交状态等；值字段包括金额，数量等；管控维度字段包括公司，业务实体，采购组织等。</p><blockquote><p>状态字段：</p><p>​状态字段需要记录三点：状态FLAG，状态操作人，状态操作时间</p><p>​如果头状态需要根据行状态算出来，则要根据具体业务判断头状态是设置FLAG还是CODE</p><p>​状态需要分为状态CODE和状态FLAG，某种状态可以结合当前状态及标志位算出来。头状态的数量一般为&#96;&#96;行状态数量阶乘-1(n!-1)&#96;注意不要落下。</p><p>​状态操作人如果有多个，建议做成行转列，之后进行扩展也比较容易。</p><p>值字段：</p><p>​值字段包括金额，数量等，这些在数据库中要注意小数点位数，java中注意要中BigDeciaml类型，防止精度丢失。</p><p>管控维度字段：</p><p>​管控维度字段比较有争议的地方就是应该放在头上还是行上。这里需要看业务的具体要求和单据类型。以采购订单为例，供应商自然是要放在头上的，而物料肯定是要放在行上的。</p><p>​然后是头行上都有管控字段。这种情况一定要和产品商量好，如果行上字段的数据不一致，头应该怎么处理。举个订单上税率的例子，行上有税率（行税率），头上有税率（头税率），当行税率不一致，头税率怎么取（整张订单该以何种税率结算？）</p><p>​还有一点就是冗余设计。这种字段一般都配有code和name，是否需要在当前业务表上冗余这些字段，则要看单据是否要存储当前时间点信息，则需要冗余；如果要和管控字段的实时信息一致，则不要冗余。</p></blockquote><h3 id="API设计原则"><a href="#API设计原则" class="headerlink" title="API设计原则"></a>API设计原则</h3><p>API需要符合restful设计原则，这里对restful不作解释，只对细节作一些说明。</p><h4 id="API连接符"><a href="#API连接符" class="headerlink" title="API连接符"></a>API连接符</h4><blockquote><p>eg. PUT &#x2F;v1&#x2F;{orderId}&#x2F;batch-enable</p><p>这是一个简单的restful风格的API，其中有几点需要作下说明</p><ol><li>连字符需要用中划线<code>-</code>，不要使用batchCreate因为使用驼峰某些古老的浏览器不支持。下划线也不要使用，URL中的hostname不允许使用下划线，统一风格使用<code>-</code>；而且用户体验不好（只按-键和shift+-键哪个更简单一点？）。</li><li>最好是加上版本号控制<code>/v1</code>，以后如果升级大版本可以直接<code>v2</code>，对外兼容性好，不需要再改动原本url</li><li>启用禁用功能不要让外部传递flag，而应该是系统暴露启用禁用端口。</li></ol></blockquote><h3 id="工程结构设计原则"><a href="#工程结构设计原则" class="headerlink" title="工程结构设计原则"></a>工程结构设计原则</h3><p>使用DDD工程结构，可查看<a href="https://yukdawn.gitee.io/2019/07/28/DDD%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%88%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%EF%BC%89/"><strong>DDD项目结构（领域驱动设计）</strong></a>。方法封装粒度按照infra-&gt;domain-&gt;app的顺序从低到高。</p><h3 id="事务设计原则"><a href="#事务设计原则" class="headerlink" title="事务设计原则"></a>事务设计原则</h3><p>主要是两点，默认事务与独立事务，独立事务需要谨慎使用。</p>]]></content>
    
    
    <categories>
      
      <category>设计哲学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>速查集</tag>
      
      <tag>解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDD项目结构（领域驱动设计）</title>
    <link href="/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2019/07/28/DDD%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%88%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%EF%BC%89/"/>
    <url>/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/2019/07/28/DDD%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%EF%BC%88%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="DDD项目结构（领域驱动设计）"><a href="#DDD项目结构（领域驱动设计）" class="headerlink" title="DDD项目结构（领域驱动设计）"></a>DDD项目结构（领域驱动设计）</h1><p>DDD项目结构（领域驱动设计）这种工程结构模型我接触了一年多，虽然每个人都有不同的理解，不过相比于MVC的工程结构，对于代码结构的清晰度，还有业务逻辑的分层方面，DDD都是优于MVC的。</p><p>尽管每个人对DDD模型的理解不同，但大家的思路总归是一致的（api、app、domain、infra），争议之处在于一些包放置的层级以及代码分层。</p><p>因此这里记录了对DDD工程结构的理解，以后我会不定期更新。</p><p>互相分享，互相学习。</p><span id="more"></span><h2 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h2><p>先晒出工程目录：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">├─ api│   ├─ controller│   ├─ dto├─ app│   ├─ service│   │  └─ impl├─ domain│   ├─ entity│   ├─ service│   │  └─ impl│   ├─ repository│   │  └─ impl│   ├─ vo├─ infra│   ├─ config│   ├─ constant│   ├─ util│   ├─ mappper│   ├─ feign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我会从下到上依次进行说明。</p><h2 id="infra（基础设施层）"><a href="#infra（基础设施层）" class="headerlink" title="infra（基础设施层）"></a>infra（基础设施层）</h2><p>infra主要负责基础资源的定义。</p><p>基础资源常见类型为以下几种：</p><ul><li>config</li><li>constant</li><li>utils</li><li>mapper</li><li>feign</li></ul><p>这里涉及到一个问题，什么是基础资源？</p><p>基础资源指的是工程用到的工具类、配置类、常量类（枚举类）、获取数据的接口（包括从数据库中获取数据的mapper层和从外部接口获取数据的feign层）。</p><p>基础资源构成了工程的骨架和常用工具，一个工程只有骨架（config，mapper，feign）齐全，工具（constant， utils）完备，才能正常进行开发。</p><h2 id="domain（领域层）"><a href="#domain（领域层）" class="headerlink" title="domain（领域层）"></a>domain（领域层）</h2><p>领域层是整个DDD模型的核心，是上层（app层）和下层（infra层）的桥梁</p><p>领域层主要分为三个包</p><ul><li>entity</li><li>repository</li><li>service</li><li>vo</li></ul><p><code>entity</code>对应的是实体层，也是业务对象的核心，数据库中表映射的对象就是实体类。</p><p>entity的基础意义是作为数据库表映射的<code>实体对象</code>。允许存在对实体类属性操作的封装方法。</p><p>比如说，现在有需求对这个实体进行一个取消操作。取消操作需要设置cancelFlag&#x3D;0，并且设置取消日期和操作人。这时就可以对这个取消操作封装成一个方法。</p><p><code>repository</code>层对应的是资源库层，代表<code>对资源的操作</code>。在DDD模型中，mapper层仅能代表和数据库的交互操作，而DDD中资源这个概念并不仅仅指的是数据库的数据，还包括网络资源（http）和文件资源等。</p><p>并且业务逻辑中，最常见的是头行结构的业务数据，可在repository层进行头行操作的业务逻辑封装。</p><p>service层这里指的是<code>领域service层</code>（domain），并非是<code>应用service层</code>（app）。</p><p>这里的service层是对业务操作进行一个粗粒度的封装，但不是完全封装。完全封装是应用service层要做的事。</p><p>举个例子：有一个订单系统，有自动审批配置，如果自动审批开启，则要在订单提交后进行自动审批。</p><p>领域service层要做的就是封装两个方法，提交和审批方法，而判断是否进行自动审批，则应该交给应用service层去做</p><p>VO只负责数据流转，没有处理逻辑，负责对网络资源，数据库资源进行接收</p><h2 id="app（事务层）"><a href="#app（事务层）" class="headerlink" title="app（事务层）"></a>app（事务层）</h2><p>app层处理实际需求，进行事务控制，流程调度。</p><p>只有一层</p><ul><li>service</li></ul><p>app层需要对domain层，infra层的接口进行调用，并且要求实现对业务逻辑的完全封装（例如在domain层举的订单系统审批例子）。</p><p>另外，是否需要事务控制则需要根据需求进行具体分析</p><h2 id="api（接口层）"><a href="#api（接口层）" class="headerlink" title="api（接口层）"></a>api（接口层）</h2><p>api层做接口。负责与外界的数据交互。</p><p>api层主要分为两个包</p><ul><li>controller</li><li>dto</li></ul><p>controller层是整个系统和外部交互的端口，因此权限控制，资源访问方法控制（GET、POST、PUT、DELETE）、数据校验控制，数据防篡改控制，都要在这一层做</p><p>dto层则是负责接收外部系统传递的数据。</p><p>对于权限控制和数据控制方面，可在infra层定义相关的拦截器进行处理，controller层仅需要增加校验注解。这一层要尽可能的轻。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在这种工程结构下，DTO的作用实际上是被严重弱化了，仅仅起到了一个接收数据的作用。</p><p>还有事务方面，repository和domain是一定要加事务控制的，app则要根据具体业务逻辑来做。</p><p>之前接过一个需求，要求订单生成完毕后传入另一个系统，无论另一个系统返回什么都要生成订单，此时app层就需要做独立事务处理，因此是否要求事务控制之还是要看实际应用场景是什么。</p><p>另外还有数据库事务隔离级别的问题，比如mysql的默认级别是可重复读（使用mvcc的方式控制版本），tidb的默认级别是快照隔离，也因此被坑过。不过这个不在本文讨论范围之内，只是要强调事务控制要看具体场景，脱离实际应用都是空谈。</p>]]></content>
    
    
    <categories>
      
      <category>工程实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>领域驱动设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis拦截器--从基础到与Spring Boot整合</title>
    <link href="/Java/2019/07/28/MyBatis%E6%8B%A6%E6%88%AA%E5%99%A8--%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E4%B8%8ESpring%20Boot%E6%95%B4%E5%90%88/"/>
    <url>/Java/2019/07/28/MyBatis%E6%8B%A6%E6%88%AA%E5%99%A8--%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E4%B8%8ESpring%20Boot%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis拦截器–从基础到与Spring-Boot整合"><a href="#MyBatis拦截器–从基础到与Spring-Boot整合" class="headerlink" title="MyBatis拦截器–从基础到与Spring Boot整合"></a>MyBatis拦截器–从基础到与Spring Boot整合</h3><p>MyBatis拦截器是Java持久层框架，最近在研究拦截器的写法。本以为会很复杂，实际上从使用上来说，是很简单的。</p><p>本文主要介绍的时各个<strong>方法</strong>和<strong>注解</strong>的<code>含义</code>及<code>使用方式</code>，并且与springboot进行简单的整合。</p><span id="more"></span><p>话不多说，开始说明。</p><h4 id="关于拦截器"><a href="#关于拦截器" class="headerlink" title="关于拦截器"></a>关于拦截器</h4><p>Mybatis拦截器的写法很简单，需要继承<code>Interceptor</code>类，重写其中的<code>intercept()</code>、<code>plugin()</code>、<code>setProperties()</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>plugin</span><span class="token punctuation">;</span><span class="token comment">//import ingnore</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>  <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>具体如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAuthorityDataInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是先说方法，再说注解</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p><code>setProperties()</code>方法主要是用来从配置中获取属性。</p><p>如果是使用xml式配置拦截器，可在Mybatis配置文件中添加节点，属性可以以如下方式传递</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tk.mybatis.simple.plugin.XXXInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>propl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valuel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果在<code>Spring boot</code>中使用，则需要单独写一个配置类，如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisMapperAutoConfiguration</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipkinInterceptor</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZipkinInterceptor</span> zipkinInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipkinInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"prop1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zipkinInterceptor<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>zipkinInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果说<strong>不需要配置属性</strong>，则在<code>spring boot</code>中，不需要去编写配置类，只需要像我一样在拦截器上加个<code>@Component</code>即可。</p></li><li><p><code>plugin()</code>方法用于指定哪些方法可以被此拦截器拦截。如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//表明只有Executor方法才会执行这个拦截器内的intercept()</span>        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>Plugin.wrap()</code>是个包装方法，如果需要此拦截器，则将此此拦截器连同入参中的<code>target</code>一起包装后返回，如果不需要则直接返回<code>target</code></p><p>另附具体<code>Plugin.wrap()</code>的源码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">></span><span class="token punctuation">></span></span> signatureMap <span class="token operator">=</span> <span class="token function">getSignatureMap</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> type <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token function">getAllInterfaces</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>        type<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        interfaces<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> interceptor<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p><code>intercept()</code>方法是用来对拦截的<code>sql</code>进行具体的操作。</p><p>这里拿分页插件<code>PageHelper</code>中的类<code>PageInterceptor</code>进行说明。</p><p>坐标：<code>com.github.pagehelper.PageInterceptor#intercept(Invocation)</code></p><p><img src="/1543743905576.png" alt="1543743905576"></p><ol><li><p><code>invocation.getArgs()</code>是从入参<code>invocation</code>获取拦截器所拦截方法的参数，其参数顺序和<strong>被拦截的方法</strong>保持一致，这个<strong>参数的个数</strong>以及<strong>参数具体是什么</strong>我们下一步说到<code>@Signature</code>注解时会讲。</p></li><li><p>获取执行器，可以用<code>Executor</code>直接执行被我们修改过的sql，示例如下</p><p><img src="/1543744369471.png" alt="1543744369471"></p><p>这里就是不继续执行原来的方法体中的内容，而是去执行我们修改后的sql并且返回。</p></li><li><p>关于返回值</p><p>除了以上这种直接去执行我们修改过sql的方式，如果我们想让方法继续执行下去也是可以的。</p><p>只需要返回：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ol></li></ul><h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p><code>MyBatis</code>拦截器用到了两个注解：<code>@Intercepts</code>和<code>@Signature</code></p><ul><li><p><code>@Intercepts</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Intercepts</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Signature</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到，其中是一个<code>Signature</code>类型的数组，意味着一个拦截器可以拦截多种方法。</p></li><li><p><code>@Signature</code></p><p><strong>Signature</strong>意为<strong>签名，署名</strong>。实际上作用也与语义相同：表明需要拦截方法的方法签名。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Signature</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有三个参数，</p><ul><li><code>type</code>：类型</li><li><code>method</code>：方法名称</li><li><code>args</code>：方法参数</li></ul><p>这三个参数可以确定一个方法。默认情况下， <code>MyBatis</code>允许使用插件（拦截器）来拦截的接口和包括以下几个。</p><ul><li>Executor ( update 、 query 、 flushStatements 、 commit 、 rollback 、 get Transaction、 close、 isClosed)</li><li>ParameterHandler ( getParameterObj ect、setParameters)</li><li>ResultSetHandler ( handleResul tSets 、 handleCursorResultSets 、 handleOutputParameters)</li><li>StatementHandler (prepare、 parameterize、 batch、 update、 query)</li></ul><p>实际上，我们只需要记住这几个接口名称就可以，其余我们可以根据实际需要去看源码来确定具体所需要拦截的类。</p><ul><li>以<code>Executor</code>的<code>query</code>方法举例说明<code>@Signature</code>是如何确定一个方法。</li></ul><p><img src="/1543745710452.png" alt="1543745710452"></p><p>如果我们需要拦截第一个方法，只需要这么写<code>@Signature</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CacheKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">BoundSql</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以注意看，<code>type</code>的值与<strong>类名</strong>相同，<code>method</code>与<strong>方法名</strong>相同，为了避免方法重载，<code>args</code>中指定了<strong>各个参数的类型和个数</strong>。</p><ul><li><p>如果我们想拦截多个方法，比如说上图1和2的方法我们都想拦截到，只需要再加个<code>@Signature</code>就可以，要记得<code>@Intercepts</code>的value可是数组啊</p></li><li><figure><div class="code-wrapper"><pre><code class="java">@Intercepts(    &#123;        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;),    &#125;)<pre class="line-numbers language-none"><code class="language-none">#### 与Spring Boot整合与Spring Boot整合这一块就简单许多，有两种方法，其实在上文中已有交代1. 手写一个配置类   &#96;&#96;&#96;java   @Configuration   public class MybatisMapperAutoConfiguration&#123;       @Bean       public void zipkinInterceptor(SqlSessionFactory sqlSessionFactory) &#123;           ZipkinInterceptor zipkinInterceptor &#x3D; new ZipkinInterceptor();           Properties properties &#x3D; new Properties();           properties.setProperty(&quot;prop1&quot;,&quot;value1&quot;);           zipkinInterceptor.setProperties(properties);           sqlSessionFactory.getConfiguration().addInterceptor(zipkinInterceptor);       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></code></pre></li></ul></li></ul><ol start="2"><li><p>在拦截器上加<code>@Component</code>注解</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAuthorityDataInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>在mybatis的xml文件中，使用的是ognl语法，然而在mybatis中new的变量，因类加载器不同，会导致<code>equals</code>或<code>==</code>永远是<code>false</code>，需要注意。</p><h4 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h4><p>《MyBatis从入门到精通》——<strong>刘增辉</strong>（PageHelper作者）</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
